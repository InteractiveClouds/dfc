/**!
 This notice must be untouched at all times.

 DreamFace DFX
 Version: 3.0.13
 Author: Interactive Clouds

 Copyright (c) 2016 Interactive Clouds, Inc. "DreamFace" is a trademark of Interactive Clouds, Inc.

 LICENSE: 
*/
/*
 This notice must be untouched at all times.

 DreamFace DFX
 Version: 3.0.0
 Author: Interactive Clouds

 Copyright (c) 2015 Interactive Clouds, Inc.  "DreamFace" is a trademark of Interactive Clouds, Inc.

 LICENSE: DreamFace Open License
 */

'use strict';
angular.module('dfx.utils', [])
.directive('dfxScreen', ['$compile', function ($compile) {
    return function(scope, element, attrs) {
        scope.$watch(
            function(scope) {
                // watch the 'bindUnsafeHtml' expression for changes
                return scope.$eval(attrs.dfxScreen);
            },
            function(value) {
                if (value) {
                    // when the 'bindUnsafeHtml' expression changes
                    // assign it into the current DOM
                    element.html(value);

                    setup_widgets_web();

                    // compile the new DOM and link it to the current scope.
                    // NOTE: we only compile .childNodes so that
                    // we don't get into infinite loop compiling ourselves
                    $compile(element.contents())(scope);
                }
            }
        );
    };
}])
.directive('dfxIncludeReplace', ['$compile', function ($compile) {
    return {
        require: 'ngInclude',
        restrict: 'A', /* optional */
        link: function (scope, element, attrs) {
            // apply application configuration for GCs
            if (dfx_app_conf && $user) {
                for (var i = 0; i < dfx_app_conf.length; i++) {
                    if ($user.roles && $user.roles.list && $user.roles.list.indexOf(dfx_app_conf[i].role) > -1) {
                        // apply every attribute configuration of this GC
                        for (var j = 0; j < dfx_app_conf[i].attributes.length; j++) {
                            if ( dfx_app_conf[i].attributes[j].value && dfx_app_conf[i].screen == dfx_current_screen ) {
                                switch (dfx_app_conf[i].attributes[j].name) {
                                    case "display":
                                        // find GC container and change ng-show
                                        element.find('[id^=' + dfx_app_conf[i].id + ']').attr('ng-show', dfx_app_conf[i].attributes[j].value);
                                        $compile( element.find('[id^=' + dfx_app_conf[i].id + ']') )(scope);
                                        break;
                                    case "disabled":
                                        // find all GC container children with ng-disabled and change the value
                                        element.find('[id^=' + dfx_app_conf[i].id + ']').find('[ng-disabled]').attr('ng-disabled', dfx_app_conf[i].attributes[j].value);
                                        //$compile(element.find('[id^=' + dfx_app_conf[i].id + ']').find('[ng-disabled]'))(scope);
                                        break;
                                    case "labelVisible":
                                        // find only first element - label itself and change the value
                                        element.find('[for^=' + dfx_app_conf[i].id + ']').first().attr('ng-show', dfx_app_conf[i].attributes[j].value);
                                        $compile( element.find('[for^=' + dfx_app_conf[i].id + ']') )(scope);
                                        break;
                                }
                            }
                        }
                    }
                }
            }

            // compile the changed DOM and link it to the current scope
            //$compile(element.find('[ng-controller]').children().contents())(scope);
        }
    };
}])
.directive('dfxGrid', function () {
    return function (scope, element, attrs) {

        // apply DataTable options
        var options = {
            "bStateSave": true,
            "iCookieDuration": 2419200,
            /* 1 month */
            "bJQueryUI": false,
            "bPaginate": ((attrs.dfxGridPaging==null || attrs.dfxGridPaging=='true') ? true : false),
            "bLengthChange": ((attrs.dfxGridPaging==null || attrs.dfxGridPaging=='true') ? true : false),
            "bFilter": ((attrs.dfxGridFilter==null || attrs.dfxGridFilter=='true') ? true : false),
            "bInfo": ((attrs.dfxGridPaging==null || attrs.dfxGridPaging=='true') ? true : false),
            "bDestroy": true,
            "sDom": '<"toolbar"lfrtip>'
        }

        var columns_definition = [];
        var explicitColumns = [];

        element.find('th').each(function (index, elem) {
            explicitColumns.push($('span:first', elem).text());
            var column_object = $('column', elem);

            var type = $('type', column_object).text();
            var model = $('model', column_object).text();
            var classes = $('classes', column_object).text();
            var style = $('style', column_object).text();
            var scope_function = $('scope-function', column_object).text();
            var html_content = $('html-content', column_object).html();

            scope_function = scope_function.substring( 0, scope_function.indexOf('(') );

            var rendering_function;
            var rendering_function_src;
            if (type=='link') {

                //rendering_function_src = 'return \'<a href="#" onclick="dfGCGridCallScopeFct(\'' + scope_function + '\', this)" class="' + classes + '" style="' + style + '">\' + data + \'</a>\';';
                rendering_function_src = "return '<a href=\"javascript:void(0)\" onclick=\"dfGCGridCallScopeFct(\\'" + scope_function + "\\', this)\" class=\"" + classes + "\" style=\"" + style + "\">' + data + '</a>';";

            } else if (type=='image') {

                rendering_function_src = "return '<a href=\"javascript:void(0)\" onclick=\"dfGCGridCallScopeFct(\\'" + scope_function + "\\', this)\" class=\"" + classes + "\" style=\"" + style + "\">";
                rendering_function_src += "<img src=\"' + data + '\"/></a>';";

            } else if (type=='html') {

                if (html_content!=null) {

                    var data_start = html_content.indexOf('{{');
                    while (data_start > -1) {
                        var data_end = html_content.indexOf('}}', data_start);
                        html_content = html_content.substring(0, data_start) + '\' + ' + html_content.substring(data_start + 2, data_end) + ' + \'' + html_content.substr(data_end+2);
                        data_start = html_content.indexOf('{{');
                    }

                    rendering_function_src = 'return \'<div class="' + classes + '" style="' + style + '">' + html_content + '</div>\';';

                }

            } else {

                rendering_function_src = 'return \'<div class="' + classes + '" style="' + style + '">\' + data + \'</div>\';';

            }

            rendering_function = new Function( 'data', 'type', 'item', rendering_function_src );

            var column_definition = {
                "mDataProp": model,
                "aTargets": [index],
                "mRender": rendering_function
            }
            columns_definition.push( column_definition );
        });

        if (explicitColumns.length > 0) {
            //options["aoColumns"] = explicitColumns;
            options["aoColumnDefs"] = columns_definition;
        }

        if (attrs.fnRowCallback) {
            options["fnRowCallback"] = scope.$eval(attrs.fnRowCallback);
        }

        // apply the plugin
        var dataTable = element.dataTable(options);
        dataTable.fnSettings().oScope = scope;
        dataTable.bind('dataLoaded', { "dt": dataTable, "scope": scope, "data_loaded_function": attrs.dfxGridDataloaded}, function (e) {
            if (e.data.data_loaded_function && e.data.data_loaded_function!='') {
                var arg_pos = e.data.data_loaded_function.indexOf('(');
                var fct_name ;
                if (arg_pos>-1) {
                    fct_name = e.data.data_loaded_function.substring( 0, arg_pos );
                } else {
                    fct_name = e.data.data_loaded_function;
                }
                var dyn_source = 'return scope.' + fct_name + '({"data": data, "dt": dt});';
                var dyn_function = new Function( 'scope', 'data', 'dt', dyn_source );
                var data = e.data.dt.fnGetData();
                dyn_function( scope, data, e.data.dt );
            }
        });

        // watch for any changes to our data, rebuild the DataTable
        scope.$watch(attrs.aaData, function (value) {
            var val = value || null;
            if (val) {
                dataTable.fnClearTable();
                dataTable.fnAddData(scope.$eval(attrs.aaData));
                dataTable.trigger('dataLoaded');
            }
        });
    };
})
.directive('dfxWizard', function () {
    return function (scope, el, attr, ngModel) {
        var o = null;
        scope.currentStep = 1;
        $(el).wizard();
        o = $(el).wizard('getObject');
        scope.numSteps = o.numSteps;
        $(el).on('changed', function(e, data){
            scope.currentStep = data.currentStep;
            scope.$broadcast('selectedItem');
        });
    };
})
// ***********************************************************
//    Additional directives used by DFX
// ***********************************************************
.directive("inputMask", ['$parse', function ($parse) {
    return {
        restrict: 'A', // only as attribute
        require: "?ngModel", // get a hold of NgModelController
        link: function (scope, el, attr, ngModel) {
            if (!ngModel) {
                return; // do nothing if no ng-model
            }

            // to correct Number
            var toNum = function(val, decSep){
                if(!decSep){
                    decSep = '.';
                }
                var toNumberRegex = new RegExp('[^0-9-\\'+decSep+']', 'g'), res = val;
                if(typeof val == 'string'){
                    res = val.replace(toNumberRegex, '');
                    if(decSep == ','){
                        res = res.replace(',', '.');
                    }
                    res = parseFloat(res);
                }
                return res;
            }
            /*
             I made my validator,
             because if there is an initial value with ng-init,
             the validation does not work correctly with min, max length.
             Check If no mask and set: ng-init=22, ng-minlength=2, ng-maxlength=10 -
             ng-init value is not added to input field
             */
            // validator
            var validate = function (value) {
                if (!ngModel.$isEmpty(value)) {
                    var minLen = (attr.ngMinlength) ? parseInt(attr.ngMinlength, 10) : 0, // ngMinlength
                        maxLen = (attr.ngMaxlength) ? parseInt(attr.ngMaxlength, 10) : 0,  // ngMaxlength
                        pattern = attr.ngPattern, // ngPattern
                        match = (pattern) ? pattern.match(/^\/(.*)\/([gim]*)$/) : 0,
                        lenErr = false, cond1 =false, cond2 = false;

                    if (match) {
                        pattern = new RegExp(match[1], match[2]);
                    }

                    ngModel.$setValidity("pattern", true);

                    // remove comma when mask is decimal to true model value
                    if(attr.inputMask == "'decimal'" && attr.maskGroupsep && typeof value == 'string') {
                        value = toNum(value, attr.maskDecsep);
                    }

                    if(typeof value == 'number'){
                        value = value.toString();
                    }

                    cond1 = minLen && value.length < minLen; // if length of value < minLength
                    cond2 = maxLen && value.length > maxLen; // if length of value > minLength

                    // check length
                    if ( (cond1) || (cond2) ) {
                        //ngModel.$setValidity("length", false);
                        lenErr = true;
                        if ( cond1) {
                            ngModel.$setValidity('minlength', false); // length < minLength
                        }
                        if( cond2 ){
                            ngModel.$setValidity("maxlength", false); // length > maxLength
                        }
                    }
                    else {
                        //ngModel.$setValidity("length", true);
                        ngModel.$setValidity("minlength", true);
                        ngModel.$setValidity("maxlength", true);
                        lenErr = false;
                    }

                    // check pattern
                    if (!lenErr) {
                        if (match && !pattern.test(value)) {
                            ngModel.$setValidity("pattern", false);
                        }
                        else {
                            ngModel.$setValidity("pattern", true);
                        }
                    }
                } else {
                    ngModel.$setValidity("length", true);
                    ngModel.$setValidity("pattern", true);
                }
                return value;
            }

            if (attr.ngModel) {
                // add custom validator
                ngModel.$parsers.push(validate);
                ngModel.$formatters.push(validate);
                /*
                 In our directive we can add $formatters that do exactly what we need and
                 $parsers, that do the other way around (parse the value before it goes to the model).
                 */
                // we need to add init value

                ngModel.$formatters.unshift(function(value) {
                    // we add
                    // what you return will be passed to the text field
                    var val = value || ngModel.$modelValue;
                    if(val){
                        // init value for inputmask
                        $(el).val(val).blur();
                        // write data to ngModel
                        ngModel.$setViewValue(val);
                        // we can get value - ngModel.$viewValue
                    }
                    return val;
                });
                /*
                 ngModel.$parsers.push(function(valueFromInput) {
                 // put the inverse logic, to transform formatted data into model data
                 // what you return, will be stored in the $scope
                 // return ...;
                 });
                 */
            }
            var props = {};
            if(attr.maskGroupsep){
                props.groupSeparator = attr.maskGroupsep;
                props.autoGroup = true;
            }
            if(attr.maskDecsep){
                props.radixPoint = attr.maskDecsep;
            }
            if(attr.maskDigits){
                props.digits = attr.maskDigits;
            }

            $(el).inputmask(scope.$eval(attr.inputMask),props); // add jquery inputmask plugin
            // keyUp
            el.on('keyup', function (e) {
                var val = el.val();
                // when mask is decimal - remove ', .' as group separator to true model value as number
                if(attr.inputMask == "'decimal'" && attr.maskGroupsep && typeof val == 'string'){
                    val = toNum(val, attr.maskDecsep)
                }
                // apply scope
                scope.$apply(function(){
                    ngModel.$setViewValue(val);
                });
            });
        }
    };
}])
.directive('dfxDate', function() {
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function ($scope, el, attr, ngModel) {
            var textfield = $('input', el),
                format = $(el).data('dateFormat'),
                startDate = $(el).data('dateStart'),
                endDate = $(el).data('dateEnd'),
                childInput = $(el).find('input');
            if (childInput.hasClass('input-sm')) {
                $(el).addClass('input-group-sm');
            } else if (childInput.hasClass('input-lg')) {
                $(el).addClass('input-group-lg');
            }

            setTimeout(function() {
                if(ngModel.$viewValue){
                    $(el).attr('data-date', ngModel.$viewValue);
                    textfield.val(ngModel.$viewValue)
                }
                // date picker
                $(el).datepicker({'autoclose':true, 'forceParse': false, 'startDate': startDate, 'endDate':endDate})
                    .on('changeDate', function(e) {
                        var nDate = textfield.val();
                        $(this).attr('data-date',nDate);
                        // set model value
                        ngModel.$setViewValue(nDate);
                        // for $watch
                        $scope.$digest();
                        ngModel.$setValidity('isdate', true);
                    });
            }, 10);

            function validate(value) {
                if(value){
                    var d = isValidDate(value, format, startDate, endDate);
                    // check if it is a date
                    if (!d) {
                        ngModel.$setValidity('isdate', false);
                        //console.log('bad')
                    } else {
                        ngModel.$setValidity('isdate', true);
                        //console.log('true')
                    }
                    //console.log(ngModel.$error)
                } else {
                    if($(el).find('input').attr('required')){
                        ngModel.$setValidity('isdate', false);
                        //console.log('empty data')
                    } else {
                        ngModel.$setValidity('isdate', true);
                    }
                }
                //console.log(ngModel.$error)
            }

            $scope.$watch(function () {
                return ngModel.$viewValue;
            }, validate);
        }
    };
})
.directive('dfxText', ['$timeout', function($timeout){
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, el, attr, ngModel) {
            var init = true;
            try{
                scope.$watch(
                    attr.dfxText,
                    function( newValue, oldValue ) {
                        if (init) {
                            $timeout(function() {
                                init = false;
                                if(!newValue){
                                    newValue = attr.textBind;
                                }
                                el.text(newValue);
                            });
                        } else {
                            if(newValue != oldValue){
                                el.text(newValue);
                            }
                        }
                    }
                );
            } catch (e){}
        }
    }
}])
.directive('dfxToolTip', ['$timeout', function($timeout) {
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, el, attr, ngModel) {
            var init = true;
            try{
                scope.$watch(
                    attr.tooltipTitle,
                    function( newValue, oldValue ) {
                        if (init) {
                            $timeout(function() {
                                init = false;
                                if(!newValue){
                                    newValue = attr.tooltipTitle;
                                }
                                $(el).tooltip({'title':newValue});
                            });
                        } else {
                            if(newValue != oldValue){
                                $(el)
                                .attr('data-original-title', newValue)
                                .tooltip('fixTitle');
                                if($(el).next('div.tooltip:visible').length){
                                    $(el).tooltip('show');
                                } else {
                                    $(el).tooltip('hide');
                                }
                            }
                        }
                    }
                );
            } catch (e){
                $(el).tooltip({'title':attr.tooltipTitle});
            }
        }
    }
}])
.directive('dfxSpinner', ['$timeout', function($timeout){
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, el, attr, ngModel) {
            if(attr.class.indexOf('input-sm') > -1){
                $(el).closest('.input-group').addClass('input-group-sm');
            } else if(attr.class.indexOf('input-lg') > -1) {
                $(el).closest('.input-group').addClass('input-group-lg');
            }
            function isInt(n) {
                return n % 1 === 0;
            }
            var opts = {
                min: attr.min || -1000000000,
                max: attr.max || 1000000000,
                step: attr.step || 1,
                verticalbuttons: !!(attr.vertical == 'yes'),
                forcestepdivisibility: 'none'
            }
            if( !isInt(parseFloat(opts.step)) ){
                opts.decimals = 2;
            }
            $(el).TouchSpin(opts);
            el.on('change', function(e){
                var val = el.val();
                scope.$apply(function(){
                    ngModel.$setViewValue(val);
                });
            }).on('keydown', function (e) {  // only number
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                    // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }

            }).on('keyup', function (e) {
                $(this).trigger('change');
            })
        }
    }
}])
.directive('dfxRating', ['$timeout', function($timeout){
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function(scope, el, attr, ngModel) {
            $timeout(function() {
                var $i = scope.$index || null,
                    $p = ($i) ? $('[id^="' + attr.id + '"]')[$i] : $('[id^="' + attr.id + '"]');
                if(attr.dataFgcolor){
                    //$('.rating-stars', $p).css({'color': attr.fgcolor});
                    $p.prev().css({'color': attr.dataFgcolor});
                }
                if(attr.dataBgcolor){
                    //$('.rating-container', $p).css({'color': attr.bgcolor});
                    $p.parent().css({'color': attr.dataBgcolor});
                }
                var opts = {
                    showCaption: !!((attr.showCaption == "true")),
                    showClear: !!((attr.showClear == "true"))
                    //size: attr.size || 'md' //TODO: is not taken into account?
                };
                el.rating('refresh',opts);
                el.on('rating.clear', function(event) {
                    scope.$apply(function() {
                        if(ngModel){
                            ngModel.$setViewValue(el.val());
                        }
                    });
                });
            }, 0);

            var updateRating = function(value) {
                el.rating('update', value);
            };
            scope.$watch(function () {
                return (ngModel) ? ngModel.$modelValue : 0;
            }, updateRating);
        }
    }
}])
.directive('dfxKnob', ['$timeout', function($timeout){
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function(scope, el, attr, ngModel) {
            var _validate = function (v, step) {
                var val = (~~ (((v < 0) ? -0.5 : 0.5) + (v/step))) * step;
                return Math.round(val * 100) / 100;
            };
            $timeout(function() {
                el.knob({
                    "min": parseInt(attr.min),
                    "max": parseInt(attr.max),
                    "step": parseInt(attr.step),
                    "draw" : function () {
                        if (attr.symbolPosition && attr.symbol) {
                            var res = '';
                            if (attr.symbolPosition == 'left'){
                                res = attr.symbol + el.val();
                            } else if(attr.symbolPosition == 'right') {
                                res = el.val() + attr.symbol;
                            }

                            $(this.i).val(res);
                        }
                    },
                    "change" : function (v) {
                        scope.$apply(function() {
                            if(ngModel){
                                ngModel.$setViewValue(_validate(v, parseInt(attr.step)));
                            }
                        });
                        if (attr.change) {
                            var bracketsPos = attr.change.indexOf('(');
                            var changeFunc = (bracketsPos > -1) ? attr.change.substring(0, bracketsPos) : attr.change;
                            if (scope[changeFunc]) {
                                scope[changeFunc]();
                            }
                        }
                    }
                });
            }, 0);
            var updateKnob = function(value) {
                if (value) el.val(value).trigger('change');
            };
            scope.$watch(function () {
                return (ngModel) ? ngModel.$modelValue : 0;
            }, updateKnob);
        }
    }
}])
.directive('dfxSlider', ['$timeout', function($timeout){
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function(scope, el, attr, ngModel) {
            $timeout(function() {
                var newOpts = {
                    range: {
                        'min': Number(attr.min) || 0,
                        'max': Number(attr.max) || 100
                    }
                };
                // start
                newOpts.start = [0];
                if(ngModel && ngModel.$modelValue){
                    newOpts.start = ngModel.$modelValue;
                } else {
                    if(attr.startMin || attr.startMax){
                        if(attr.startMin && attr.startMax){
                            newOpts.start[0] = attr.startMin;
                            newOpts.start[1] = attr.startMax;
                        } else {
                            if(attr.startMin){
                                newOpts.start[0] = attr.startMin;
                            } else if(attr.startMax) {
                                newOpts.start[0] = attr.startMax;
                            }
                        }
                    }
                }
                // connect
                if(attr.connect){
                    if(newOpts.start.length == 1 || typeof newOpts.start == 'number'){
                        if(!(attr.connect == 'lower' || attr.connect == 'upper')){
                            newOpts.connect = 'lower';
                        } else {
                            newOpts.connect = attr.connect;
                        }
                    } else if(newOpts.start.length == 2){
                        if(attr.connect == 'true' || attr.connect == 'false'){
                            newOpts.connect = !!((attr.connect == 'true'));
                        } else {
                            newOpts.connect = false;
                        }
                    }
                }
                newOpts.step = Number(attr.step) || 1;
                newOpts.orientation = attr.orientation;
                newOpts.direction = attr.direction;
                newOpts.behaviour = attr.behaviour;
                el.noUiSlider(newOpts);
                if (attr.fgcolor) {
                    $( '.noUis-connect', '#' + attr.id + '_slider').css({'background-color': attr.fgcolor});
                }
                if (attr.bgcolor) {
                    $( '.noUis-background', '#' + attr.id + '_slider').css({'background-color': attr.bgcolor});
                }
                if (attr.handlecolor) {
                    $( '.noUis-handle', '#' + attr.id + '_slider').css({'background-color': attr.handlecolor});
                }
                el.on('change slide set', function(){
                    var el_val = (el.val()) ? parseInt(el.val()) : 0;
                    var view_val = (ngModel) ? ((ngModel.$viewValue) ? parseInt(ngModel.$viewValue) : 0) : 0;
                    if (el_val != view_val) {
                        scope.$apply(function () {
                            if (ngModel) {
                                var arr = el.val();
                                if (typeof arr == 'object') {
                                    arr[0] = parseInt(arr[0]);
                                    if (arr.length == 2) {
                                        arr[1] = parseInt(arr[1]);
                                    }
                                } else {
                                    arr = parseInt(arr);
                                }
                                ngModel.$setViewValue(arr);
                            }
                        });
                    }
                });
                if (attr.onslide) {
                    var bracketsPos = attr.onslide.indexOf('(');
                    var onslideFunc = (bracketsPos > -1) ? attr.onslide.substring(0, bracketsPos) : attr.onslide;
                    if (scope[onslideFunc]) {
                        el.on('slide', scope[onslideFunc]);
                    }
                }
                if (attr.onset) {
                    var bracketsPos = attr.onset.indexOf('(');
                    var onsetFunc = (bracketsPos > -1) ? attr.onset.substring(0, bracketsPos) : attr.onset;
                    if (scope[onsetFunc]) {
                        el.on('set', scope[onsetFunc]);
                    }
                }
            }, 0);
            var updateSlider = function(value) {
                el.val(value);
            };
            scope.$watch(function () {
                return (ngModel) ? ngModel.$modelValue : 0;
            }, updateSlider);
        }
    }
}])
.directive('dfxChart', ['$timeout', function($timeout) {
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, el, attr) {
            angular.element(document).ready(function() {
                $timeout(function() {
                    scope.$apply(function() {
                        scope.config = {};
                        scope.config.legend = {};
                        scope.config.legend.position = attr.legendPosition || 'left';
                        scope.config.legend.display = (attr.legendVisible == "yes" ? true : false);
                        scope.config.title = (attr.labelVisible == "yes") ? attr.label : '';
                        scope.config.labels = (attr.labelsDataPoints == "yes" ? true : false);
                        scope.config.tooltips = (attr.tooltips == "yes" ? true : false);
                        if(attr.innerRadius){
                            scope.config.innerRadius = attr.innerRadius;
                        }
                        var assignHandler = function(fn_name, handler_name) {
                            if (fn_name) {
                                if (fn_name.indexOf('(') !== -1) {fn_name = fn_name.substring(0, fn_name.indexOf('('));}
                                scope.config[handler_name] = scope[fn_name];
                            }
                        }
                        if (attr.chartClick) {
                            assignHandler(attr.chartClick, 'click');
                        }
                        if (attr.chartMouseover) {
                            assignHandler(attr.chartMouseover, 'mouseover');
                        }
                        if (attr.chartMouseout) {
                            assignHandler(attr.chartMouseout, 'mouseout');
                        }
                    });
                }, 0);
            });
        }
    }
}])
.directive('dfxNgSrc', ['$timeout', function($timeout) {
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, el, attr) {
            console.log('attr.ngSrc: ', attr.ngSrc);
            console.log("el.attr('ng-src'): ", el.attr('ng-src'));

            //TODO: get tenantId, appName, check normal URL, check why expression is moved to External URL...

            // watch the Image ng-src changes to transform resource URL
            var ngSrcInitial = el.attr('ng-src'),
                chunks = ngSrcInitial.match(/\{\{([^{}]*)\}\}/);

            if (chunks) {
                scope.$watch(
                    chunks[1],
                    function( newValue, oldValue ) {
                        console.log('oldValue: ', oldValue);
                        console.log('newValue: ', newValue);
                        var ngSrcVal = newValue,
                            tenantId = 'Examples',
                            applicationName = '';

                        //if (ngSrcVal && ngSrcVal.indexOf('./') == 0)
                        var resourceSrc = '/resources/' + tenantId + '/' + applicationName + ngSrcVal;
                        el.attr('ng-src', resourceSrc);
                        el.attr('src', resourceSrc);
                    }
                );
            }

            // transform resource URL from Image ng-src
            angular.element(document).ready(function() {
                $timeout(function () {
                    var ngSrcVal = el.attr('ng-src'),
                        tenantId = 'Examples',
                        applicationName = '';


                    //if (ngSrcVal && ngSrcVal.indexOf('./') == 0)
                    var resourceSrc = '/resources/' + tenantId + '/' + applicationName + ngSrcVal;
                    el.attr('ng-src', resourceSrc);
                    el.attr('src', resourceSrc);


                }, 0);
            });
        }
    }
}])
.directive('bsSwitch', ['$parse', '$timeout', function ($parse, $timeout) {
    return {
        restrict: 'A',
        require: '?ngModel',
        scope: {
            checklist: '=dfxCheckToggle',
            value: '@'
        },
        link: function link(scope, element, attrs, controller) {
            var isInit = false;
            var fnChange = attrs.onswitch || '';
            /**
             * Return the true value for this specific checkbox.
             * @returns {Object} representing the true view value; if undefined, returns true.
             */
            var getTrueValue = function() {
                var trueValue = attrs.ngTrueValue;
                /*
                 if (!angular.isString(trueValue)) {
                 trueValue = true;
                 }
                 */
                return trueValue;
            };
            /*
             var getBooleanFromString = function(value) {
             return (value === true || value === 'true' || !value);
             };
             */
            /**
             * If the directive has not been initialized yet, do so.
             */
            var initMaybe = function() {
                // if it's the first initialization
                if (!isInit) {
                    var viewValue = (controller.$modelValue == getTrueValue()),
                        dsbl = !!((attrs.ngDisabled == "true"));

                    isInit = !isInit;
                    // Bootstrap the switch plugin
                    element.bootstrapSwitch({
                        state: viewValue,
                        disabled: dsbl
                    });
                }
            };

            var setActive = function(active) {
                element.bootstrapSwitch('disabled', !active);
            };

            /**
             * Listen to model changes.
             */
            var listenToModel = function () {
                // When the model changes
                scope.$parent.$watch(attrs.ngModel, function(newValue, oldValue) {
                    initMaybe();
                    if (newValue !== undefined) {
                        $timeout(function() {
                            //console.log(newValue, getTrueValue(), newValue === getTrueValue() )
                            element.bootstrapSwitch('state', newValue === getTrueValue());
                        }, 0, false);
                    } else {
                        if(element.attr('type') == 'checkbox'){
                            element.bootstrapSwitch('state', false, true);
                        }

                    }
                });

                // on switch
                element.on('switchChange.bootstrapSwitch', function (e, data) {
                    $timeout(function() {
                        if(fnChange && scope.$parent[fnChange]) {
                            scope.$parent[fnChange]();
                        }
                    }, 0);
                });
                // observers attributes
                attrs.$observe('switchOnText', function (newValue) {
                    element.bootstrapSwitch('onText', getValueOrUndefined(newValue));
                });

                attrs.$observe('switchOffText', function (newValue) {
                    element.bootstrapSwitch('offText', getValueOrUndefined(newValue));
                });

                attrs.$observe('switchOnColor', function (newValue) {
                    attrs.dataOn = newValue;
                    element.bootstrapSwitch('onColor', getValueOrUndefined(newValue));
                });

                attrs.$observe('switchOffColor', function (newValue) {
                    attrs.dataOff = newValue;
                    element.bootstrapSwitch('offColor', getValueOrUndefined(newValue));
                });

                attrs.$observe('switchAnimate', function (newValue) {
                    element.bootstrapSwitch('animate', scope.$eval(newValue || 'true'));
                });

                attrs.$observe('switchSize', function (newValue) {
                    element.bootstrapSwitch('size', newValue);
                });

                attrs.$observe('switchLabel', function (newValue) {
                    element.bootstrapSwitch('labelText', newValue ? newValue : '&nbsp;');
                });

                attrs.$observe('switchIcon', function (newValue) {
                    if (newValue) {
                        // build and set the new span
                        var spanClass = '<span class=\'' + newValue + '\'></span>';
                        element.bootstrapSwitch('labelText', spanClass);
                    }
                });

                attrs.$observe('switchWrapper', function (newValue) {
                    // Make sure that newValue is not empty, otherwise default to null
                    if (!newValue) {
                        newValue = null;
                    }
                    element.bootstrapSwitch('wrapperClass', newValue);
                });

                attrs.$observe('switchHandleWidth', function (newValue) {
                    element.bootstrapSwitch('handleWidth', getValueOrUndefined(newValue));
                });

                attrs.$observe('switchLabelWidth', function (newValue) {
                    element.bootstrapSwitch('labelWidth', getValueOrUndefined(newValue));
                });

            };

            /**
             * Listen to view changes.
             */
            var listenToView = function () {
                // When the switch is clicked, set its value into the ngModel
                element.on('switchChange.bootstrapSwitch', function (e, data) {
                    var newValue = (data) ? attrs.ngTrueValue : data;
                    //console.log(newValue)
                    scope.$apply(function() {
                        controller.$setViewValue(newValue);
                    });
                });
            };

            /**
             * Returns the value if it is truthy, or undefined.
             *
             * @param value The value to check.
             * @returns the original value if it is truthy, {@link undefined} otherwise.
             */
            var getValueOrUndefined = function (value) {
                return (value ? value : undefined);
            };

            // Listen and respond to view changes
            listenToView();

            // Listen and respond to model changes
            listenToModel();

            // On destroy, collect ya garbage
            scope.$on('$destroy', function () {
                element.bootstrapSwitch('destroy');
            });
        }
    };
}])
.directive('dfxRequired', ['$parse', '$timeout', function ($parse, $timeout) {
    return {
        require: '?ngModel',
        link: function($scope, elem, attrs, controller) {
            //var isInit = false;
            var idd = attrs.id.split('_'),
                realid = idd.length>1 ? idd[1] : '',
                checkboxes = elem.closest('div').find('input[type!="hidden"]'),
                arrFalseValues = [],
                arrTrueValues = [],
                allValues = {};
            var getValues = function(){
                var res = {};
                angular.forEach(checkboxes, function(el, key){
                    arrTrueValues.push(angular.element(el).attr('ng-true-value'));
                    arrFalseValues.push(angular.element(el).attr('ng-false-value'));
                });
                res.trueValues = arrTrueValues;
                res.falseValues = arrFalseValues;
                return res;
            }
            var validate = function(arr){
                var index, allValues = getValues(), isFalse=true;
                if(typeof arr =='object'){
                    for(var i= 0, len=arr.length; i<len; i++){
                        if(arr[i] == allValues.trueValues[i]) {
                            isFalse = false;
                            break;
                        }
                    }
                } else {
                    if(arr == allValues.trueValues[0]){
                        isFalse = false;
                    }
                }
                if(!isFalse){
                    controller.$setValidity('required', true);
                } else {
                    controller.$setValidity('required', false);
                }
            }
            $scope.$watchCollection(attrs.ngModel, function (newValue) {
                $timeout(function() {
                    validate(newValue);
                }, 0);
            });
        }
    };
}])
.directive('dfxCheckList', ['$parse', '$timeout', function ($parse, $timeout) {
    return {
        scope: {
            list: '=dfxCheckList',
            value: '@'
        },
        link: function(scope, elem, attrs) {
            if(!scope.list){
                scope.list = [];
            }
            var fnChange = attrs.ngChange || '';
            var handler = function(setup) {
                var checked = elem.prop('checked');
                var index = scope.list.indexOf(scope.value);

                if (checked && index == -1) {
                    if (setup) {
                        elem.prop('checked', false);
                    } else {
                        scope.list.push(scope.value);
                    }
                } else if (!checked && index != -1) {
                    if (setup){
                        elem.prop('checked', true);
                    } else {
                        scope.list.splice(index, 1);
                    }
                }
            };

            var setupHandler = handler.bind(null, true);
            var changeHandler = handler.bind(null, false);

            elem.bind('change', function() {
                scope.$apply(changeHandler);
                $timeout(function() {
                    if(fnChange && scope.$parent[fnChange]) {
                        scope.$parent[fnChange]();
                    }
                }, 0);
            });
            /*
            scope.$parent.$watch(attrs.ngModel, function(newValue) {
                console.log(attrs.id,'=',newValue)
            })
            */
            scope.$watch('list', function(newValue, oldValue){
                //scope['checked_'+attrs.name] = false;
                setupHandler();
            });
        }
    };
}])
.directive('dfxCarouselChange', ['$parse', '$timeout', function ($parse, $timeout) {
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function(scope, el, attr, ngModel) {
            // if 'variable' has a value, but it's not initialized in scope
            if (scope[attr.currindex] == undefined) {
                var items = el.find('div[ng-class]');
                if (items.length > 0) angular.element(items[0]).addClass('active');
            }

            var assignHandler = function(fn_name, handler_name) {
                if (fn_name) {
                    if (fn_name.indexOf('(') !== -1) {fn_name = fn_name.substring(0, fn_name.indexOf('('));}
                }
                el.on(handler_name, function(e){
                    var carouselData = $(this).data('bs.carousel');
                    e.carouselIndex = carouselData.getItemIndex(carouselData.$element.find('.item.active'));
                    if(ngModel){
                        scope.$apply(function(){
                            ngModel.$setViewValue(e.carouselIndex);
                        });
                    }
                    if (fn_name) {
                        scope[fn_name]( e );
                    }
                });
            }
            $timeout(function() {
                if(attr.onslide || attr.onslid) {
                    if(attr.onslide){
                        assignHandler(attr.onslide, 'slide.bs.carousel');
                    }
                    if(attr.onslid){
                        assignHandler(attr.onslid, 'slid.bs.carousel');
                    }
                } else {
                    assignHandler('', 'slid.bs.carousel')
                }
            }, 0);
        }
    }
}])
.directive('abnTree', [
    '$timeout', function($timeout) {
        return {
            restrict: 'E',
            template: "<ul class=\"nav nav-list nav-pills nav-stacked abn-tree\">\n  <li ng-repeat=\"row in tree_rows | filter:{visible:true} track by row.branch.uid\" ng-animate=\"'abn-tree-animate'\" ng-class=\"'level-' + {{ row.level }} + (row.branch.selected ? ' active':'')\" class=\"abn-tree-row\">\n    <a ng-click=\"user_clicks_branch(row.branch)\">\n      <i ng-class=\"row.tree_icon\" ng-click=\"row.branch.expanded = !row.branch.expanded\" class=\"indented tree-icon\"> </i>\n      <span class=\"indented tree-label\">{{ row.label }} </span>\n    </a>\n  </li>\n</ul>",
            replace: true,
            scope: {
                treeData: '=',
                onSelect: '&',
                initialSelection: '@',
                treeControl: '='
            },
            link: function(scope, element, attrs) {
                var error, expand_all_parents, expand_level, for_all_ancestors, for_each_branch, get_parent, n, on_treeData_change, select_branch, selected_branch, tree;
                error = function(s) {
                    console.log('ERROR:' + s);
                    debugger;
                    return void 0;
                };
                if (attrs.iconExpand == null) {
                    attrs.iconExpand = 'icon-plus  glyphicon glyphicon-plus  fa fa-plus';
                }
                if (attrs.iconCollapse == null) {
                    attrs.iconCollapse = 'icon-minus glyphicon glyphicon-minus fa fa-minus';
                }
                if (attrs.iconLeaf == null) {
                    attrs.iconLeaf = 'icon-file  glyphicon glyphicon-file  fa fa-file';
                }
                if (attrs.expandLevel == null) {
                    attrs.expandLevel = '3';
                }
                expand_level = parseInt(attrs.expandLevel, 10);
                if (!scope.treeData) {
                    alert('no treeData defined for the tree!');
                    return;
                }
                if (scope.treeData.length == null) {
                    if (treeData.label != null) {
                        scope.treeData = [treeData];
                    } else {
                        alert('treeData should be an array of root branches');
                        return;
                    }
                }
                for_each_branch = function(f) {
                    var do_f, root_branch, _i, _len, _ref, _results;
                    do_f = function(branch, level) {
                        var child, _i, _len, _ref, _results;
                        f(branch, level);
                        if (branch.children != null) {
                            _ref = branch.children;
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                child = _ref[_i];
                                _results.push(do_f(child, level + 1));
                            }
                            return _results;
                        }
                    };
                    _ref = scope.treeData;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        root_branch = _ref[_i];
                        _results.push(do_f(root_branch, 1));
                    }
                    return _results;
                };
                selected_branch = null;
                select_branch = function(branch) {
                    if (!branch) {
                        if (selected_branch != null) {
                            selected_branch.selected = false;
                        }
                        selected_branch = null;
                        return;
                    }
                    if (branch !== selected_branch) {
                        if (selected_branch != null) {
                            selected_branch.selected = false;
                        }
                        branch.selected = true;
                        selected_branch = branch;
                        expand_all_parents(branch);
                        if (branch.onSelect != null) {
                            return $timeout(function() {
                                return branch.onSelect(branch);
                            });
                        } else {
                            if (scope.onSelect != null) {
                                return $timeout(function() {
                                    return scope.onSelect({
                                        branch: branch
                                    });
                                });
                            }
                        }
                    }
                };
                scope.user_clicks_branch = function(branch) {
                    if (branch !== selected_branch) {
                        return select_branch(branch);
                    }
                };
                get_parent = function(child) {
                    var parent;
                    parent = void 0;
                    if (child.parent_uid) {
                        for_each_branch(function(b) {
                            if (b.uid === child.parent_uid) {
                                return parent = b;
                            }
                        });
                    }
                    return parent;
                };
                for_all_ancestors = function(child, fn) {
                    var parent;
                    parent = get_parent(child);
                    if (parent != null) {
                        fn(parent);
                        return for_all_ancestors(parent, fn);
                    }
                };
                expand_all_parents = function(child) {
                    return for_all_ancestors(child, function(b) {
                        return b.expanded = true;
                    });
                };
                scope.tree_rows = [];
                on_treeData_change = function() {
                    var add_branch_to_list, root_branch, _i, _len, _ref, _results;
                    for_each_branch(function(b, level) {
                        if (!b.uid) {
                            return b.uid = "" + Math.random();
                        }
                    });
                    //console.log('UIDs are set.');
                    for_each_branch(function(b) {
                        var child, _i, _len, _ref, _results;
                        if (angular.isArray(b.children)) {
                            _ref = b.children;
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                child = _ref[_i];
                                _results.push(child.parent_uid = b.uid);
                            }
                            return _results;
                        }
                    });
                    scope.tree_rows = [];
                    for_each_branch(function(branch) {
                        var child, f;
                        if (branch.children) {
                            if (branch.children.length > 0) {
                                f = function(e) {
                                    if (typeof e === 'string') {
                                        return {
                                            label: e,
                                            children: []
                                        };
                                    } else {
                                        return e;
                                    }
                                };
                                return branch.children = (function() {
                                    var _i, _len, _ref, _results;
                                    _ref = branch.children;
                                    _results = [];
                                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                        child = _ref[_i];
                                        _results.push(f(child));
                                    }
                                    return _results;
                                })();
                            }
                        } else {
                            return branch.children = [];
                        }
                    });
                    add_branch_to_list = function(level, branch, visible) {
                        var child, child_visible, tree_icon, _i, _len, _ref, _results;
                        if (branch.expanded == null) {
                            branch.expanded = false;
                        }
                        if (!branch.children || branch.children.length === 0) {
                            tree_icon = attrs.iconLeaf;
                        } else {
                            if (branch.expanded) {
                                tree_icon = attrs.iconCollapse;
                            } else {
                                tree_icon = attrs.iconExpand;
                            }
                        }
                        scope.tree_rows.push({
                            level: level,
                            branch: branch,
                            label: branch.label,
                            tree_icon: tree_icon,
                            visible: visible
                        });
                        if (branch.children != null) {
                            _ref = branch.children;
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                child = _ref[_i];
                                child_visible = visible && branch.expanded;
                                _results.push(add_branch_to_list(level + 1, child, child_visible));
                            }
                            return _results;
                        }
                    };
                    _ref = scope.treeData;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        root_branch = _ref[_i];
                        _results.push(add_branch_to_list(1, root_branch, true));
                    }
                    return _results;
                };
                scope.$watch('treeData', on_treeData_change, true);
                if (attrs.initialSelection != null) {
                    for_each_branch(function(b) {
                        if (b.label === attrs.initialSelection) {
                            return $timeout(function() {
                                return select_branch(b);
                            });
                        }
                    });
                }
                n = scope.treeData.length;
                //console.log('num root branches = ' + n);
                for_each_branch(function(b, level) {
                    b.level = level;
                    return b.expanded = b.level < expand_level;
                });
                if (scope.treeControl != null) {
                    if (angular.isObject(scope.treeControl)) {
                        tree = scope.treeControl;
                        tree.expand_all = function() {
                            return for_each_branch(function(b, level) {
                                return b.expanded = true;
                            });
                        };
                        tree.collapse_all = function() {
                            return for_each_branch(function(b, level) {
                                return b.expanded = false;
                            });
                        };
                        tree.get_first_branch = function() {
                            n = scope.treeData.length;
                            if (n > 0) {
                                return scope.treeData[0];
                            }
                        };
                        tree.select_first_branch = function() {
                            var b;
                            b = tree.get_first_branch();
                            return tree.select_branch(b);
                        };
                        tree.get_selected_branch = function() {
                            return selected_branch;
                        };
                        tree.get_parent_branch = function(b) {
                            return get_parent(b);
                        };
                        tree.select_branch = function(b) {
                            select_branch(b);
                            return b;
                        };
                        tree.get_children = function(b) {
                            return b.children;
                        };
                        tree.select_parent_branch = function(b) {
                            var p;
                            if (b == null) {
                                b = tree.get_selected_branch();
                            }
                            if (b != null) {
                                p = tree.get_parent_branch(b);
                                if (p != null) {
                                    tree.select_branch(p);
                                    return p;
                                }
                            }
                        };
                        tree.add_branch = function(parent, new_branch) {
                            if (parent != null) {
                                parent.children.push(new_branch);
                                parent.expanded = true;
                            } else {
                                scope.treeData.push(new_branch);
                            }
                            return new_branch;
                        };
                        tree.add_root_branch = function(new_branch) {
                            tree.add_branch(null, new_branch);
                            return new_branch;
                        };
                        tree.expand_branch = function(b) {
                            if (b == null) {
                                b = tree.get_selected_branch();
                            }
                            if (b != null) {
                                b.expanded = true;
                                return b;
                            }
                        };
                        tree.collapse_branch = function(b) {
                            if (b == null) {
                                b = selected_branch;
                            }
                            if (b != null) {
                                b.expanded = false;
                                return b;
                            }
                        };
                        tree.get_siblings = function(b) {
                            var p, siblings;
                            if (b == null) {
                                b = selected_branch;
                            }
                            if (b != null) {
                                p = tree.get_parent_branch(b);
                                if (p) {
                                    siblings = p.children;
                                } else {
                                    siblings = scope.treeData;
                                }
                                return siblings;
                            }
                        };
                        tree.get_next_sibling = function(b) {
                            var i, siblings;
                            if (b == null) {
                                b = selected_branch;
                            }
                            if (b != null) {
                                siblings = tree.get_siblings(b);
                                n = siblings.length;
                                i = siblings.indexOf(b);
                                if (i < n) {
                                    return siblings[i + 1];
                                }
                            }
                        };
                        tree.get_prev_sibling = function(b) {
                            var i, siblings;
                            if (b == null) {
                                b = selected_branch;
                            }
                            siblings = tree.get_siblings(b);
                            n = siblings.length;
                            i = siblings.indexOf(b);
                            if (i > 0) {
                                return siblings[i - 1];
                            }
                        };
                        tree.select_next_sibling = function(b) {
                            var next;
                            if (b == null) {
                                b = selected_branch;
                            }
                            if (b != null) {
                                next = tree.get_next_sibling(b);
                                if (next != null) {
                                    return tree.select_branch(next);
                                }
                            }
                        };
                        tree.select_prev_sibling = function(b) {
                            var prev;
                            if (b == null) {
                                b = selected_branch;
                            }
                            if (b != null) {
                                prev = tree.get_prev_sibling(b);
                                if (prev != null) {
                                    return tree.select_branch(prev);
                                }
                            }
                        };
                        tree.get_first_child = function(b) {
                            var _ref;
                            if (b == null) {
                                b = selected_branch;
                            }
                            if (b != null) {
                                if (((_ref = b.children) != null ? _ref.length : void 0) > 0) {
                                    return b.children[0];
                                }
                            }
                        };
                        tree.get_closest_ancestor_next_sibling = function(b) {
                            var next, parent;
                            next = tree.get_next_sibling(b);
                            if (next != null) {
                                return next;
                            } else {
                                parent = tree.get_parent_branch(b);
                                return tree.get_closest_ancestor_next_sibling(parent);
                            }
                        };
                        tree.get_next_branch = function(b) {
                            var next;
                            if (b == null) {
                                b = selected_branch;
                            }
                            if (b != null) {
                                next = tree.get_first_child(b);
                                if (next != null) {
                                    return next;
                                } else {
                                    next = tree.get_closest_ancestor_next_sibling(b);
                                    return next;
                                }
                            }
                        };
                        tree.select_next_branch = function(b) {
                            var next;
                            if (b == null) {
                                b = selected_branch;
                            }
                            if (b != null) {
                                next = tree.get_next_branch(b);
                                if (next != null) {
                                    tree.select_branch(next);
                                    return next;
                                }
                            }
                        };
                        tree.last_descendant = function(b) {
                            var last_child;
                            if (b == null) {
                                debugger;
                            }
                            n = b.children.length;
                            if (n === 0) {
                                return b;
                            } else {
                                last_child = b.children[n - 1];
                                return tree.last_descendant(last_child);
                            }
                        };
                        tree.get_prev_branch = function(b) {
                            var parent, prev_sibling;
                            if (b == null) {
                                b = selected_branch;
                            }
                            if (b != null) {
                                prev_sibling = tree.get_prev_sibling(b);
                                if (prev_sibling != null) {
                                    return tree.last_descendant(prev_sibling);
                                } else {
                                    parent = tree.get_parent_branch(b);
                                    return parent;
                                }
                            }
                        };
                        return tree.select_prev_branch = function(b) {
                            var prev;
                            if (b == null) {
                                b = selected_branch;
                            }
                            if (b != null) {
                                prev = tree.get_prev_branch(b);
                                if (prev != null) {
                                    tree.select_branch(prev);
                                    return prev;
                                }
                            }
                        };
                    }
                }
            }
        };
    }
])
.factory('DFXMobile', function () {
    var is_preview = sessionStorage.dfx_appname == '_preview';

    var openWidget = function (widget_name) {
        if (! is_preview) {
            var currentUrl = document.location.href;
            var baseUrl = currentUrl.substring(0, currentUrl.lastIndexOf('/'));
            var newUrl = baseUrl + '/' + widget_name + '.html';
            window.location.href = newUrl;
        } else {
            if (widget_name) {
                var currentWidget = $('[dfx-renderrer]').attr('name');
                var newPath = window.location.pathname.replace(currentWidget, widget_name);
                var newUrl =  window.location.href.replace(window.location.pathname, newPath);
                window.location.href = newUrl;
            }
        }
    };
    return {
        openWidget: openWidget
    };
})
.factory('DFXWeb', ['$rootScope', '$compile', function ($rootScope, $compile) {
    /**
     * Service function to be called by developer to open a dialog box in application run time.
     * Choose only one between options.html and options.widgetName parameters.
     *
     * IMPORTANT: if you open a widget in popup, it must be deployed first!
     *
     * Options top/left/width/height can take values in pixels or percentages.
     *
     * Possible options.headerColor values are: [white, green,  greenDark,  greenLight,  purple, magenta, pink, pinkDark,
     *                                  teal, blue, blueLight, blueDark, darken, yellow, orange, orangeDark, red, redLight].
     * Default options.headerColor is blueDark.
     *
     * To center dialog window, do not assign any values to options.top and options.left.
     *
     * Examples:
     * 1) Show widget wForm in the dialog window and center it in the screen:
     DFXWeb.openDialog({
        'title': 'My Dialog Form',
        'width': '50%',
        'height': '50%',
        'widgetName': 'wForm',
        'buttons': 'YES_NO_CANCEL',
        'callback': dialogCallback
     });
     2) Show HTML content in the dialog window:
     DFXWeb.openDialog({
        'title': 'My Html Content',
        'headerColor': 'orange',
        'top': '100px',
        'left': '25%',
        'width': '400px',
        'height': '200px',
        'html': '<p>Open dialog HTML content, paragraph 1</p><p>Open dialog HTML content, paragraph 2</p>',
        'buttons': 'OK_CANCEL'
     });
     *
     * @param options object, with structure
     *      {title, headerColor, top, left, width, height, html, widgetName, buttons, callback}
     *       where buttons can have values: YES_NO, YES_NO_CANCEL, OK_CANCEL, YES, NO, OK, CANCEL
     *       and where callback is a function that takes clicked button as parameter (yes, no, ok, cancel)
     */
    var openDialog = function (options) {
        var calcPosition = function () {
            var result = '';
            if ((!options.top) && (!options.left)) {// center dialog horizontally and vertically
                var getCss = function (propValue, propName) {
                    if (propValue.indexOf('px') > -1) {
                        var value = parseInt(propValue.substring(0, propValue.indexOf('px'))) / 2;
                        return propName + ': 50%; margin-' + propName + ': -' + value + 'px;';
                    } else if (propValue.indexOf('%') > -1) {
                        var value = parseInt(propValue.substring(0, propValue.indexOf('%'))) / 2;
                        return propName + ': ' + (50 - value) + '%;';
                    }
                };
                result += getCss(options.width, 'left');// 'left: 50%; margin-left: -100px;' or 'left: 25%;'
                result += getCss(options.height, 'top');// 'top: 50%; margin-top: -100px;' or 'top: 25%;'
            } else {
                result += 'top: ' + options.top + ';' + 'left: ' + options.left + ';';
            }
            return result;
        };

        var createDialogHtml = function (buttonNames, dialogBodyContent) {
            var dialogStyle =
                '<style>' +
                '.dfx_dialog_black_overlay {' +
                'display: block;' +
                'position: absolute;' +
                'top: 0%;' +
                'left: 0%;' +
                'width: 100%;' +
                'height: 100%;' +
                'z-index:1001;' +
                '}' +
                '.dfx_dialog_white_content {' +
                'display: block;' +
                'position: absolute;' +
                calcPosition() +
                'width: ' + options.width + ';' +
                'height: ' + options.height + ';' +
                'padding: 0px;' +
                'border: 1px solid black;' +
                'background-color: white;' +
                'z-index:1002;' +
                'overflow: hidden;' +
                '}' +
                '</style>';

            var closeAction =
                'document.getElementById(\'dfx_dialog_light\').style.display=\'none\';' +
                'document.getElementById(\'dfx_dialog_fade\').style.display=\'none\';' +
                '$(\'#dfx_dialog_container\').remove();';

            var buttonsHtml = '';
            for (var i = (buttonNames.length - 1); i >= 0; i--) {
                var buttonTitle = buttonNames[i].charAt(0).toUpperCase() + buttonNames[i].toLowerCase().slice(1);
                buttonsHtml += '<button id="dfx_dialog_' + buttonNames[i].toLowerCase() + '" type="button" class="btn btn-default btn-sm botTempo">' + buttonTitle + '</button>';
            }

            var dialogHeaderColor = (options.headerColor) ? 'jarviswidget-color-' + options.headerColor : 'jarviswidget-color-blueDark';
            var dialogBodyBottom = (buttonsHtml) ? '44px;' : '0px;';//buttons bar height is 45px, and we have to put 45-1=44 to hide horizontal grey line coming from bg
            var dialogHtml =
                '<div id="dfx_dialog_light" class="dfx_dialog_white_content divMessageBox animated fadeIn fast jarviswidget jarviswidget-sortable ' + dialogHeaderColor + '">' +
                '<header style="display:block; position: absolute; top: 0px; left: 0px; right: 0px; height: 34px; margin: 0px;">' +
                '<div class="row jarviswidget-ctrls" style="width:100%;">' +
                '<h2 class="pull-left" style="margin-left: 14px;">' + (options.title || '') + '</h2>' +
                '<a href = "javascript:void(0)" onclick = "' + closeAction + '" class="button-icon jarviswidget-delete-btn pull-right">' +
                '<i class="fa fa-times"></i>' +
                '</a>' +
                '</div>' +
                '</header>' +
                '<div class="row" style="position: absolute; top: 34px; bottom: ' + dialogBodyBottom + 'left: 0px; right: 0px; overflow-y: auto;">' +
                dialogBodyContent +
                '</div>';
            dialogHtml += (!buttonsHtml) ? '' :
            '<div class="row" style="position: absolute; bottom: 0px; left: 0px; right: 0px; padding:5px; margin: 0px;">' +
            '<div class="MessageBoxButtonSection">' +
            buttonsHtml +
            '</div>' +
            '</div>';
            dialogHtml +=
                '</div>' +
                '<div id="dfx_dialog_fade" class="dfx_dialog_black_overlay divMessageBox animated fadeIn fast"></div>';

            return '<div id="dfx_dialog_container">' + dialogStyle + dialogHtml + '</div>';
        };

        var createDialogButtonsHandlers = function (buttonNames) {
            for (var i = 0; i < buttonNames.length; i++) {
                var createButtonHandler = function (buttonName) {
                    $('#dfx_dialog_' + buttonName.toLowerCase()).on('click', function () {
                        document.getElementById('dfx_dialog_light').style.display = 'none';
                        document.getElementById('dfx_dialog_fade').style.display = 'none';
                        $('#dfx_dialog_container').remove();

                        if (options.callback) options.callback(buttonName.toLowerCase());
                    });
                };
                createButtonHandler(buttonNames[i]);
            }
        };

        var runDialog = function () {
            var buttonNames = (options.buttons) ? options.buttons.split('_') : [];

            // if this is preview, construct the variable to include widget template and assign it to the scope
            if ($rootScope) {
                $rootScope['widget_template_' + options.widgetName] = '/widgets/' + sessionStorage.dfx_tenantid + '/' + options.widgetName + '.html';
            }

            var dialogBodyContent = (options.widgetName)
                ? '<div ng-include="widget_template_' + options.widgetName + '" dfx-include-replace></div>'
                : options.html;

            var openDialogHtml = createDialogHtml(buttonNames, dialogBodyContent);

            var element = angular.element(openDialogHtml);
            if (options.widgetName) {
                $compile(element.contents())($rootScope);
            }
            if ($('#dfx_dialog_container').length == 0) {
                element.appendTo("body");
            }

            createDialogButtonsHandlers(buttonNames);
        };

        runDialog();
    };
    return {
        openDialog: openDialog
    };
}]);
/*
 This notice must be untouched at all times.

 DreamFace DFX
 Version: 3.0.0
 Author: Interactive Clouds

 Copyright (c) 2015 Interactive Clouds, Inc.  "DreamFace" is a trademark of Interactive Clouds, Inc.

 LICENSE: DreamFace Open License
 */

var IS_STUDIO = false,
    $user = {},
    dfx_app_conf = null;

var DreamFace = function(options) {
    $('[dfx-renderrer]').each( function(i) {
        var element_name = $(this).attr('name');
        var fct = new Function( 'return ' + element_name + '_eventHandler();' );
        fct();
    });
    
    
    $('[df-data-query]').each( function(i) {
        var df_component_type = $(this).prop( 'tagName' );
        if (df_component_type=='UL') {
            DreamFace.initGCListView( this );
        }
    });
};

DreamFace.initSession = function( options ) {
    if (options.dfx_server==null) {
        sessionStorage.dfx_server = window.location.protocol + '//' + window.location.hostname + ':' + window.location.port;
    } else {
        sessionStorage.dfx_server = options.dfx_server;
    }
    sessionStorage.dfx_tenantid = options.dfx_tenantid;
    sessionStorage.dfx_appname = options.dfx_appname;
    sessionStorage.dfx_ispreview = options.dfx_ispreview;
    sessionStorage.dfx_appcontext = {};
};

DreamFace.getSession = function(){
    return sessionStorage;
};

DreamFace.get = function( options ) {
    $.ajax({
            type: 'GET',
            url: sessionStorage.dfx_server + '/dfx/' + sessionStorage.dfx_tenantid + '/' + sessionStorage.dfx_appname + '/' + options.url,
            data: options.data,
            success: function(data) {
                options.callback( null, data );
            },
            error: function(jqXHR, textStatus, errorThrown) {
                options.callback( errorThrown );
            }
    });
};    

DreamFace.post = function( options ) {
    var ajax = {
            type: 'POST',
            url: sessionStorage.dfx_server + '/dfx/' + sessionStorage.dfx_tenantid + '/' + sessionStorage.dfx_appname + '/' + options.url,
            data: options.data,
            success: function(data) {
                options.callback( null, data );
            },
            error: function(jqXHR, textStatus, errorThrown) {
                options.callback( errorThrown );
            }
    };

    $.ajax(ajax);
};

DreamFace.setAppContext = function( options ) {
    // TODO
};

DreamFace.getAppContext = function (name) {
    // TODO
};

DreamFace.setUserDefinition = function () {
    $user = sessionStorage.dfx_user ? JSON.parse( sessionStorage.dfx_user ) : {};
    dfx_app_conf = sessionStorage.dfx_app_conf ? JSON.parse( sessionStorage.dfx_app_conf ) : null;
};

DreamFace.openDialog = function( options ) {
    $.mobile.changePage( 'dialog', {
        data: 'text=test',
        transition: 'pop',
        reverse: false,
        changeHash: false
    });
};


/*
    DreamFace Graphical Components
*/

DreamFace.initGCListView = function( comp ) {
    var name = $(comp).attr( "df-data-query" );
    var path = $(comp).attr( "df-data-query-path" );
    var load = ($(comp).attr( "df-data-query-load" )=='true') ? true : false;
    
    var data_query = new DataQuery(name);
    data_query.execute();
};

/*
     DreamFace Menus
 */

DreamFace.getMenu = function( name, caller_callback ) {
    authRequest( {
        type: 'GET',
        url: '/app/menu/' + sessionStorage.dfx_tenantid + '/' + sessionStorage.dfx_appname + '/' + name
    }).then(function(data){
        caller_callback(data)
    });
};

// former jquery plugin
(function( $ ){

    var methods = {
        init : function(options) {
            /*$("dfx-widget[wclass]").each( function(i) {
                var dfx_widget = this;
                var dfx_widget_id = $(this).attr("id");
                var wclass_value = $(dfx_widget).attr( "wclass" );
                $.get('widget.html?wclass='+wclass_value, function(data) {
                    $(dfx_widget).replaceWith( data );
                    $("a[data-role='button']").button();
                    var widget_initializer = new Function("return " + dfx_widget_id + "_eventHandler();");
                    widget_initializer();
                });
            });*/
        }
    };

    $.fn.dreamface = function(methodOrOptions) {
        if ( methods[methodOrOptions] ) {
            return methods[ methodOrOptions ].apply( this, Array.prototype.slice.call( arguments, 1 ));
        } else if ( typeof methodOrOptions === 'object' || ! methodOrOptions ) {
            // Default to "init"
            return methods.init.apply( this, arguments );
        } else {
            $.error( 'Method ' +  method + ' does not exist on jQuery.dreamface' );
        }    
    };


})( jQuery );



var dfxSystemModules = ['ngRoute', 'ngMaterial', 'dfxGControls', 'dfxAppServices', 'dfxStudioApi', 'nvd3'];
if (typeof dfxAppRuntimeModules != 'undefined')
    dfxSystemModules = dfxSystemModules.concat(dfxAppRuntimeModules);
var dfxAppRuntime = angular.module('dfxAppRuntime', dfxSystemModules);

dfxAppRuntime
    .config( function($routeProvider) {
        $routeProvider
        .when('/page.html', {
            controller: 'dfx_page_controller',
            templateUrl: 'page.html'
        })
        .otherwise({
            redirectTo: '/page.html'
        });
    })
    .config( function($mdThemingProvider) {
        $mdThemingProvider.theme('altTheme')
        .primaryPalette('blue')
        $mdThemingProvider.setDefaultTheme('altTheme');
    });

dfxAppRuntime.controller('dfx_login_controller', [ '$scope', '$rootScope', function( $scope, $rootScope) {
    $scope.uid = '';
    $scope.pwd = '';

    $scope._dfx_server = sessionStorage.dfx_server;

    sessionStorage.setItem( 'applicationToken', '' );

    $('#username').focus();

    /*$scope.login = function() {
        $http({
            method: 'POST',
            url: sessionStorage.dfx_server + '/app/login',
            data: {
                tenantid  : sessionStorage.dfx_tenantid,
                appid     : sessionStorage.dfx_appname,
                ispreview : sessionStorage.dfx_ispreview,
                userid    : $scope.uid
            }
        }).then(function successCallback(response) {

        });
    };*/
}]);

dfxAppRuntime.controller('dfx_app_controller', [ '$scope', '$rootScope', 'dfxAuthRequest', '$q', '$http', '$compile', 'dfxPages', function( $scope, $rootScope, dfxAuthRequest, $q, $http, $compile, dfxPages) {
	$scope.app_name = $('body').attr('dfx-app');
    $scope.platform = $('body').attr('dfx-platform');
    $scope.gc_types = {};
    $scope.page_name = 'Home';
    $scope.app_user = $user;

    $scope.design_devices = [
        {
            'name':     'iphone5',
            'label':    '320x568 (Apple iPhone 5)',
            'portrait' : {
                'image':  'iphone_5_320x568.png',
                'width':  '376px',
                'height': '794px',
                'padding-top': '110px',
                'padding-left': '30px',
                'padding-right': '30px',
                'padding-bottom': '120px'
            },
            'landscape': {
                'image':  'iphone_5_landscape_320x568.png',
                'width':  '794px',
                'height': '376px',
                'padding-top': '30px',
                'padding-left': '110px',
                'padding-right': '120px',
                'padding-bottom': '30px'
            }
        },
        {
            'name':     'iphone6',
            'label':    '375x667 (Apple iPhone 6)',
            'portrait' : {
                'image':  'iphone_6_375x667.png',
                'width':  '432px',
                'height': '880px',
                'padding-top': '109px',
                'padding-left': '31px',
                'padding-right': '30px',
                'padding-bottom': '30px'
            },
            'landscape': {
                'image':  'iphone_6_landscape_375x667.png',
                'width':  '880px',
                'height': '432px',
                'padding-top': '30px',
                'padding-left': '109px',
                'padding-right': '108px',
                'padding-bottom': '30px'
            }
        },
        {
            'name':     'iphone6plus',
            'label':    '414x736 (Apple iPhone 6+)',
            'portrait' : {
                'image':  'iphone_6plus_414x736.png',
                'width':  '471px',
                'height': '955px',
                'padding-top': '103px',
                'padding-left': '31px',
                'padding-right': '30px',
                'padding-bottom': '30px'
            },
            'landscape': {
                'image':  'iphone_6plus_landscape_414x736.png',
                'width':  '955px',
                'height': '471px',
                'padding-top': '30px',
                'padding-left': '103px',
                'padding-right': '120px',
                'padding-bottom': '30px'
            }
        }
    ];
    $scope.design_selected_device = $scope.design_devices[0];
    $scope.design_device_orientation = 'Portrait';

    $scope.getGCDefaultAttributes = function( type ) {
        var deferred = $q.defer();
        if ($scope.gc_types[type] != null) {
            deferred.resolve( $scope.gc_types[type] );
        } else {
            $http.get( '/gcontrols/web/' + type + '.json' ).success( function(data) {
                $scope.gc_types[type] = data;
                deferred.resolve( data );
            });
        }
        return deferred.promise;
    }

    $scope.logout = function() {
        authRequest.removeToken();

    }
}]);

dfxAppRuntime.controller('dfx_page_controller', [ '$scope', '$rootScope', 'dfxAuthRequest', '$q', '$http', '$compile', '$routeParams', '$location', 'dfxPages', function( $scope, $rootScope, dfxAuthRequest, $q, $http, $compile, $routeParams, $location, dfxPages) {

    $scope.page_preview = false;
    $scope.page_name = ($routeParams.name) ? $routeParams.name : 'Home';

    if ($location.search().preview=='true') {
        $scope.page_preview = true;
    }

    $scope.loadPageDefinition = function() {
        if ($scope.page_preview) {
            $http({
                method: 'GET',
                url: '/studio/screen/item/' + $scope.page_name + '/' + $scope.app_name + '/' + 'web'
            }).then(function successCallback(response) {
                $scope.selected_page = response.data.screen;
                $scope.loadPageTemplate(response.data.screen.template);
            });
        } else {
            $http({
                method: 'GET',
                url: 'pages/' + $scope.page_name + '.json'
            }).then(function successCallback(request) {
                $scope.selected_page = request.data;
                $scope.loadPageTemplate(request.data.template);
            });
        }
    };

    $scope.loadPageTemplate = function(template) {
        /*dfxTemplates.getOne( $scope, $scope.app_name, template )
        .then( function(template) {
            $scope.selected_template = template;
            var snippet = '<div layout="column" flex dfx-page-template="' + template.name + '"></div>';
            $('#dfx_page_content').empty();
            angular.element(document.getElementById('dfx_page_content')).append($compile(snippet)($scope));
        });*/
        if ($scope.page_preview) {
            $http({
                method: 'GET',
                url: '/studio/screentemplates/item/' + template + '/' + $scope.app_name
            }).then(function successCallback(request) {
                $scope.selected_template = request.data.screenTemplate;
                var snippet = '<div layout="column" flex dfx-page-template="' + template + '"></div>';
                $('#dfx_page_content').empty();
                angular.element(document.getElementById('dfx_page_content')).append($compile(snippet)($scope));
            });
        } else {
            $http({
                method: 'GET',
                url: 'templates/' + template + '.json'
            }).then(function successCallback(request) {
                $scope.selected_template = request.data;
                var snippet = '<div layout="column" flex dfx-page-template="' + template + '"></div>';
                $('#dfx_page_content').empty();
                angular.element(document.getElementById('dfx_page_content')).append($compile(snippet)($scope));
            });
        }
    };

    $scope.routeToPage = function(page_name) {
        $location.search( 'name', page_name );
        //$scope.$apply();
    };

    $scope.toggleLeftSide = function() {
        if ($scope.selected_template.layout.left.display=='true') {
            $scope.selected_template.layout.left.display='false';
        } else {
            $scope.selected_template.layout.left.display='true';
        }
    };

    $scope.changeDevice = function(index) {
        $scope.design_selected_device = $scope.design_devices[index];
        $scope.refreshDevice();
    };

    $scope.loadPageDefinition();
}]);

dfxAppRuntime.controller('dfx_view_controller', [ '$scope', '$rootScope', '$compile', '$timeout', '$element', function($scope, $rootScope, $compile, $timeout, $element) {
    $scope.gc_instances = ($scope.gc_instances) ? $scope.gc_instances : {};
    $scope.$parent._view_id = $element.attr('id');

    $scope.view_platform = $element.attr('dfxVePlatorm');

    

    $scope.callViewControllerFunction = function( function_name, parameters ) {
        return $scope.gc_instances[$(element).attr('id')];
    };

    $scope.getComponent = function( element ) {
        var id = $(element).attr('id');
        if ($(element).attr('dfx-gc-renderer-content')!=null) {
            var component_id = $(element).parent().attr('component-id');
            var column_id = $(element).parent().attr('column-id');
            var row_id = $(element).parent().attr('row-id');
            var component = $scope.gc_instances[component_id].attributes.columns.value[column_id].renderer;
            component.id = component_id + '_renderer_' + row_id + '_' + column_id;
            return component;
        } else {
            return $scope.gc_instances[id];
        }
    };
    
    $scope.addComponents = function( components, container_component, parent_id, card, view_id ) {
        var idx = 0;
        var ref_components = (card!=null) ? components[card] : components;
        for (idx = 0; idx < ref_components.length; idx++) {
            var component = ref_components[idx];
            $scope.registerChildren( component );
            $scope.addComponent(component, container_component, parent_id, view_id);
        }
    };

    $scope.registerChildren = function( component ) {
        var idx_child = 0;
        for (idx_child = 0; idx_child < component.children.length; idx_child++) {
            $scope.gc_instances[component.children[idx_child].id] = component.children[idx_child];
            if (component.children[idx_child].children.length>0) {
                $scope.registerChildren(component.children[idx_child]);
            }
        }
    }

    // Add a component
    $scope.addComponent = function( component, container_component, parent_id, view_id) {
        var component_instance = $scope.renderGraphicalControl(component, parent_id, view_id);
        $timeout(function() {
        	if (component.container==null) {
        		$('#' + container_component.id).append(component_instance.fragment);
        	} else {
            	$('#' + container_component.id + '_' + component.container).append(component_instance.fragment);
            }
	    }, 0);
    };

    // Render GControls
    $scope.renderGraphicalControl = function( component, parent_id, view_id ) {
        $scope.gc_instances[component.id] = component;
        var gc_instance = {};
        var flex_container_attr = (component.attributes.flex!=null) ? ' flex="{{attributes.flex.value}}"' : '';

        var panel_layout = (component.type == 'panel' && (!component.attributes.autoHeight ||  component.attributes.autoHeight.value != true)) ? ' style="height:100%;" layout="column" ' : '';

        gc_instance.fragment = $compile(
            '<div id="' + component.id +
            '" dfx-gc-web-base dfx-gc-web-' + component.type +
            ' gc-role="control" gc-parent="' + parent_id +
            '" view-id="' + view_id +
            '"' + flex_container_attr +
            panel_layout +
            '></div>')($scope);
        gc_instance.id = component.id;
        return gc_instance;
    };

    $scope.refreshDevice = function() {
        if ($scope.design_device_orientation=='Portrait') {
            $('#dfx_view_preview_container').css('width', $scope.design_selected_device.portrait['width']);
            $('#dfx_view_preview_container').css('height', $scope.design_selected_device.portrait['height']);
            $('#dfx_view_preview_container').css('padding-top', $scope.design_selected_device.portrait['padding-top']);
            $('#dfx_view_preview_container').css('padding-left', $scope.design_selected_device.portrait['padding-left']);
            $('#dfx_view_preview_container').css('padding-right', $scope.design_selected_device.portrait['padding-right']);
            $('#dfx_view_preview_container').css('padding-bottom', $scope.design_selected_device.portrait['padding-bottom']);
            $('#dfx_view_preview_container').css( 'background', 'url(/images/' + $scope.design_selected_device.portrait['image'] + ') no-repeat' );
        } else {
            $('#dfx_view_preview_container').css('width', $scope.design_selected_device.landscape['width']);
            $('#dfx_view_preview_container').css('height', $scope.design_selected_device.landscape['height']);
            $('#dfx_view_preview_container').css('padding-top', $scope.design_selected_device.landscape['padding-top']);
            $('#dfx_view_preview_container').css('padding-left', $scope.design_selected_device.landscape['padding-left']);
            $('#dfx_view_preview_container').css('padding-right', $scope.design_selected_device.landscape['padding-right']);
            $('#dfx_view_preview_container').css('padding-bottom', $scope.design_selected_device.landscape['padding-bottom']);
            $('#dfx_view_preview_container').css( 'background', 'url(/images/' + $scope.design_selected_device.landscape['image'] + ') no-repeat' );
        }
    };

    $scope.changeDevice = function(index) {
        $scope.design_selected_device = $scope.design_devices[index];
        $scope.refreshDevice();
    };

    $scope.changeDeviceOrientation = function() {
        $scope.design_device_orientation = ($scope.design_device_orientation=='Portrait') ? 'Landscape' : 'Portrait';
        $scope.refreshDevice();
    };


}]);

dfxAppRuntime.directive( 'dfxPageIncludeTemplate', function($compile) {
    return{
        restrict: 'A',
        link: function(scope, element, attributes) {
            scope.$watch('selected_template.layout.' + attributes.dfxPageIncludeTemplate + '.content.value', function(new_value) {
                element.html(new_value); 
                $compile(element.contents())(scope);
            });
        }
    }
});

dfxAppRuntime.directive('dfxPageTemplate', ['$compile', '$mdSidenav', function($compile, $mdSidenav) {
    return {
        restrict: 'A',
        link: function($scope, $element, $attrs) {
            var tpl_snippet = '';

            // Header
            tpl_snippet = '<div layout="row" ng-show="selected_template.layout.header.display==\'true\'" style="min-height:{{selected_template.layout.header.height}}"><div layout layout-align="{{selected_template.layout.header.halignment}} {{selected_template.layout.header.valignment}}" flex="100" style="height:{{selected_template.layout.header.height}};{{selected_template.layout.header.style}}" dfx-page-include-template="header"></div></div>';

            // Middle Section Start
            tpl_snippet += '<div layout="row" flex layout-fill style="overflow:auto;{{selected_template.layout.body.style}}">';
            
            // Left
            tpl_snippet += '<div id="dfxpageleft" ng-show="selected_template.layout.left.display==\'true\'" style="width:{{selected_template.layout.left.width}};{{selected_template.layout.left.style}}" class="{{selected_template.layout.left.whiteframe}}"><md-content layout layout-align="{{selected_template.layout.left.halignment}} {{selected_template.layout.left.valignment}}" style="background:inherit" dfx-page-include-template="left"></md-content></div>';

            // Body
            tpl_snippet += '<div layout="column" style="background:inherit;overflow:auto" layout-padding flex id="pagebody">';
            
            tpl_snippet += '<div layout="row" flex="{{row.autoHeight != true ? row.height : \'\'}}" style="" ng-repeat="row in selected_page.layout.rows">';
            tpl_snippet += '<div layout="column" flex="{{col.width}}" data-row="{{$parent.$index}}" data-column="{{$index}}" ng-repeat="col in row.columns" style="padding:5px">';
            tpl_snippet += '<div layout="column" flex ng-repeat="view in col.views">';
            tpl_snippet += '<div id="wrapper" dfx-view-wrapper="view.name" dfx-view-wrapper-id="view.id" flex layout="column">';
            tpl_snippet += '</div>';
            tpl_snippet += '</div>';
            tpl_snippet += '</div>';
            tpl_snippet += '</div>';

            tpl_snippet += '</div>';
            
            // Right
            tpl_snippet += '<div id="dfxpageright" ng-show="selected_template.layout.right.display==\'true\'" style="width:{{selected_template.layout.right.width}};{{selected_template.layout.right.style}}" class="{{selected_template.layout.right.whiteframe}}"><md-content layout layout-align="{{selected_template.layout.right.halignment}} {{selected_template.layout.right.valignment}}" style="background:inherit" dfx-page-include-template="right"></md-content></div>';

            // Middle Section End
            tpl_snippet += '</div>';

            // Footer
            tpl_snippet += '<div layout="row" ng-show="selected_template.layout.footer.display==\'true\'" style="min-height:{{selected_template.layout.footer.height}}"><div layout layout-align="{{selected_template.layout.footer.halignment}} {{selected_template.layout.header.valignment}}" flex="100" style="height:{{selected_template.layout.footer.height}};{{selected_template.layout.footer.style}}" dfx-page-include-template="footer"></div></div>';

            $element.append($compile(tpl_snippet)($scope));
        }
    }
}]);

dfxAppRuntime.filter("sanitize", ['$sce', function($sce) {
    return function(htmlCode){
        return $sce.trustAsHtml(htmlCode);
    }
}]);

dfxAppRuntime.directive('dfxViewPreview', function() {
	return {
    	restrict: 'A',
        controller: function($scope, $element, $attrs) {
                $scope.view_id = $attrs.id;
                $scope.$parent.dfxViewCard = $attrs.dfxViewCard;
                var widget_definition = JSON.parse(window.localStorage.getItem( 'dfx_' + $attrs.dfxViewPreview ));
                $scope.$watch('dfxViewCard', function() {
                    angular.element($('#dfx_view_preview_container')).html('');
                    $scope.addComponents( widget_definition.definition, { "id": "dfx_view_preview_container" }, '', $scope.dfxViewCard, 'dfx_view_preview_container' );
                });
        }
    }
});

dfxAppRuntime.directive('dfxViewPreviewInDialog', [ '$http', function( $http ) {
    return {
        restrict: 'A',
        controller: function($scope, $element, $attrs) {
            var view_object = $('#' + $scope.$parent._view_id)[0];
            var component_id = $('div:first',view_object).attr('id');
            var widget_definition = window.localStorage.getItem('dfx_' + $attrs.dfxViewPreviewInDialog);
            if (widget_definition) {
                $scope.addComponents( JSON.parse(widget_definition).definition, { "id": "dfx_view_preview_container_in_dialog_" + component_id  }, '', $attrs.dfxCard, 'dfx_view_preview_container_in_dialog_' + component_id  );
            } else {
                $http.get('views/' + $attrs.dfxViewPreviewInDialog + '.json').then(function (response) {
                    $scope.addComponents( JSON.parse(response.data.src).definition, { "id": "dfx_view_preview_container_in_dialog_" + component_id  }, '', $attrs.dfxCard, 'dfx_view_preview_container_in_dialog_' + component_id  );
                }, function (err) {
                    console.log("Can't get view " + $attrs.dfxViewPreviewInDialog + " defintion");
                });
            }
        }
    }
}]);

dfxAppRuntime.directive('dfxViewPreviewInSidenav', [ '$http', function( $http ) {
    return {
        restrict: 'A',
        controller: function($scope, $element, $attrs) {
            var view_object = $('#' + $scope.$parent._view_id)[0];
            var component_id = $('div:first',view_object).attr('id');
            var widget_definition = window.localStorage.getItem('dfx_' + $attrs.dfxViewPreviewInSidenav);
            if (widget_definition) {
                $scope.addComponents( JSON.parse(widget_definition).definition, { "id": "dfx_view_preview_container_in_sidenav_" + component_id }, '', $attrs.dfxCard, 'dfx_view_preview_container_in_sidenav_' + component_id );
            } else {
                $http.get('views/' + $attrs.dfxViewPreviewInSidenav + '.json').then(function (response) {
                    $scope.addComponents( JSON.parse(response.data.src).definition, { "id": "dfx_view_preview_container_in_sidenav_" + component_id }, '', $attrs.dfxCard, 'dfx_view_preview_container_in_sidenav_' + component_id );
                }, function (err) {
                    console.log("Can't get view " + $attrs.dfxViewPreviewInSidenav + " defintion");
                });
            }
        }
    }
}]);

dfxAppRuntime.directive('dfxViewPreviewInBottom', [ '$http', function( $http ) {
    return {
        restrict: 'A',
        controller: function($scope, $element, $attrs) {
            var view_object = $('#' + $scope.$parent._view_id)[0];
            var component_id = $('div:first',view_object).attr('id');
            var widget_definition = window.localStorage.getItem('dfx_' + $attrs.dfxViewPreviewInBottom);
            if (widget_definition) {
                $scope.addComponents( JSON.parse(widget_definition).definition, { "id": "dfx_view_preview_container_in_bottom_" + component_id  }, '', $attrs.dfxCard, 'dfx_view_preview_container_in_bottom_' + component_id  );
            } else {
                $http.get('views/' + $attrs.dfxViewPreviewInBottom + '.json').then(function (response) {
                    $scope.addComponents( JSON.parse(response.data.src).definition, { "id": "dfx_view_preview_container_in_bottom_" + component_id  }, '', $attrs.dfxCard, 'dfx_view_preview_container_in_bottom_' + component_id  );
                }, function (err) {
                    console.log("Can't get view " + $attrs.dfxViewPreviewInBottom + " defintion");
                });
            }
        }
    }
}]);

dfxAppRuntime.directive('dfxViewPreviewWithCard', [ '$http', function( $http ) {
    return {
        restrict: 'A',
        controller: function($scope, $element, $attrs) {
            var view_object = $('#' + $scope.$parent._view_id)[0];
            var component_id = $('div:first',view_object).attr('id');
            var widget_definition = window.localStorage.getItem('dfx_' + $attrs.dfxViewPreviewWithCard);
            if (widget_definition) {
                $scope.addComponents( JSON.parse(widget_definition).definition, { "id": "dfx_view_preview_with_card_content_" + component_id  }, '', $attrs.dfxCard, 'dfx_view_preview_with_card_content_' + component_id  );
            } else {
                $http.get('views/' + $attrs.dfxViewPreviewWithCard + '.json').then(function (response) {
                    $scope.addComponents( JSON.parse(response.data.src).definition, { "id": "dfx_view_preview_with_card_content_" + component_id  }, '', $attrs.dfxCard, 'dfx_view_preview_with_card_content_' + component_id  );
                }, function (err) {
                    console.log("Can't get view " + $attrs.dfxViewPreviewInBottom + " defintion");
                });
            }
        }
    }
}]);

dfxAppRuntime.directive('dfxViewWrapper', [ '$http', '$compile', function($http, $compile) {
    return {
        restrict: 'A',
        scope: {
          wrapper_view_name: '=dfxViewWrapper',
          wrapper_view_id: '=dfxViewWrapperId'
        },
        priority: 100000,
        link: function($scope, $element, $attrs) {
            var wrapper_snippet = '<div id="' + $scope.wrapper_view_id + '" dfx-view="' + $scope.wrapper_view_name + '" dfx-view-card="default" ng-controller="dfx_view_controller" style="width:100%" layout="column" flex></div>';
            $element.attr('ng-controller', $scope.wrapper_view_name + 'Controller');
            $element.append(wrapper_snippet);
            $element.removeAttr('dfx-view-wrapper');
            $element.attr('id', $scope.wrapper_view_id + '-wrapper');
            var page_scope = $scope.$parent.$parent.$parent.$parent;
            if (page_scope.page_preview) {
                $.getScript( '/studio/widget/script/' + page_scope.$parent.app_name + '/' + $scope.wrapper_view_name + '/' + page_scope.$parent.platform )
                    .done(function( script, textStatus ) {
                        $compile($element)($scope);
                    })
            } else {
                $compile($element)($scope);
            }
        }
    }
}]);

dfxAppRuntime.directive('dfxView', [ '$http', '$timeout', function($http, $timeout) {
	return {
    	restrict: 'A',
        controller: function($scope, $element, $attrs) {
        	$timeout( function() {
                $scope.view_id = $attrs.id;
                $scope.$parent.view_id = $attrs.id;
                $scope.$parent.dfxViewCard = $attrs.dfxViewCard;
                $scope.$watch('dfxViewCard', function() {
                    angular.element($('#' + $scope.view_id)).html('');
                    var page_scope = $scope.$parent.$parent.$parent.$parent;
                    if (page_scope && page_scope.page_preview) {
                        $http.get( '/studio/widget/item/' + page_scope.$parent.app_name + '/' + $attrs.dfxView + '/' + page_scope.$parent.platform ).success(function(response) {
                            $scope.addComponents( (JSON.parse(response.src)).definition, { "id": $scope.view_id }, '', $scope.dfxViewCard, $scope.view_id );
                        });
                    } else {
                        $http.get( 'views/' + $attrs.dfxView + '.json' ).success(function(response) {
                            $scope.addComponents( (JSON.parse(response.src)).definition, { "id": $scope.view_id }, '', $scope.dfxViewCard, $scope.view_id );
                        });
                    }
                });
            }, 0);
        }
    }
}]);

dfxAppRuntime.directive('dfxGcWeb', ['$compile', function($compile) {
    return {
        restrict: 'A',
        link: function($scope, $element, $attrs) {
            var component = $scope.gc_instances[$attrs.id];

            if ( component.attributes.repeat_title && component.attributes.repeat_title.value ) {
                var inherited = {
                    "halignment": $scope.$parent.col.halignment.value,
                    "orientation": $scope.$parent.col.orientation.value,
                    "valignment": $scope.$parent.col.valignment.value,
                    "width": $scope.$parent.col.width.value
                };
                var panel_height = (component.type == 'panel' && (!component.attributes.autoHeight ||  component.attributes.autoHeight.value != true)) ? ' height:100%;' : '';
                var ifLayout = ( $scope.$parent.col.orientation.value === 'row' ) ? ' layout="row" style="flex-wrap: wrap;' : ' style="width:100%;max-height:100%;flex-direction: column;display: flex;';
                ifLayout = ifLayout + panel_height + '"';
                var angular_snippet = $compile(
                    '<div id="'+$attrs.id+
                    '" dfx-gc-web-base dfx-gc-web-'+$attrs.dfxGcWeb+
                    ' gc-role="control" gc-parent="'+$attrs.gcParent+
                    '" view-id="'+$attrs.viewId+
                    '" flex="100"' +
                    ifLayout +
                    '" layout-align="' + inherited.halignment + ' ' + inherited.valignment +
                    '"></div>')($scope);
            } else {
                var flex_container_attr = (component.attributes.flex!=null) ? ' flex="{{attributes.flex.value}}"' : '';
                var panel_layout = (component.type == 'panel' && (!component.attributes.autoHeight ||  component.attributes.autoHeight.value != true)) ? ' style="height:100%;" ' : '';
                var angular_snippet = $compile('<div id="'+$attrs.id+'" dfx-gc-web-base dfx-gc-web-'+$attrs.dfxGcWeb+' gc-role="control" gc-parent="'+$attrs.gcParent+'" view-id="'+$attrs.viewId+'"' + flex_container_attr + panel_layout + '></div>')($scope);
            }
            $element.replaceWith(angular_snippet);
        }
    }
}]);

dfxAppRuntime.directive('dfxGcRenderer', ['$compile', function($compile) {
    return {
        restrict: 'A',
        link: function($scope, $element, $attrs) {
            var viewId = $('#'+$attrs.componentId).attr('view-id');
            var angular_snippet = $compile('<div id="'+$attrs.componentId+'_renderer_'+$attrs.rowId+'_'+$attrs.columnId+'" dfx-gc-web-base dfx-gc-web-'+$attrs.dfxGcRenderer+' dfx-gc-renderer-content="'+$attrs.componentId+'" view-id="' + viewId + '"></div>')($scope);
            $element.append(angular_snippet);
        }
    }
}]);

dfxAppRuntime.directive('dfxRepeatablePanel', [ function() {
    return {
        restrict: 'A',
        scope: true,
        controller: function($scope, $element, $attrs) {
            $scope.$dfx_index = $scope.$index;
            $scope.$dfx_first = $scope.$first;
            $scope.$dfx_odd = $scope.$odd;
            $scope.$dfx_even = $scope.$even;
            $scope.$dfx_last = $scope.$last;
            $scope.$dfxGetParentIndex = function() {
                var parent_elem = $($element).parents('div[dfx-repeatable-panel]:first');
                if (parent_elem) {
                    return parseInt($(parent_elem).attr('dfx-repeatable-panel'));
                } else {
                    return null;
                }
            };
            $scope.$dfxGetParentIndexes = function() {
                var parent_indexes = [];
                var parent_elements = $($element).parents('div[dfx-repeatable-panel]');
                for (var i=0; i<parent_elements.length; i++) {
                    parent_indexes.push( parseInt($(parent_elements[i]).attr('dfx-repeatable-panel')) );
                }
                return parent_indexes;
            };
        }
    }
}]);

dfxAppRuntime.directive('dfxDatatable', [ function() {
    return {
        restrict: 'A',
        scope: true,
        controller: function($scope, $element, $attrs) {
            $scope.$dfx_index = $scope.$index;
            $scope.$dfx_first = $scope.$first;
            $scope.$dfx_odd = $scope.$odd;
            $scope.$dfx_even = $scope.$even;
            $scope.$dfx_last = $scope.$last;
            $scope.$dfxGetParentIndex = function() {
                var parent_elem = $($element).parents('div[dfx-repeatable-panel]:first');
                if (parent_elem) {
                    return parseInt($(parent_elem).attr('dfx-repeatable-panel'));
                } else {
                    return null;
                }
            };
            $scope.$dfxGetParentIndexes = function() {
                var parent_indexes = [];
                var parent_elements = $($element).parents('div[dfx-repeatable-panel]');
                for (var i=0; i<parent_elements.length; i++) {
                    parent_indexes.push( parseInt($(parent_elements[i]).attr('dfx-repeatable-panel')) );
                }
                return parent_indexes;
            };
        }
    }
}]);

dfxAppRuntime.directive('dfxGcCompiled', [ '$rootScope', '$compile', function($rootScope, $compile) {
    return {
        restrict: 'A',
        priority:1500,
        terminal:true,
        link: function($scope, $element, $attrs) {
            if ($scope.attributes == null) {
                var unregister = $rootScope.$on($scope.component_id + '_attributes_loaded', function(event, attributes) {
                    try {
                        var gc_attributes = attributes; //(attributes.columns!=null && $attrs.dfxGcCompiled!='parent-renderer') ? attributes.columns.value[$scope.$index].renderer.attributes : attributes;
                        var regexp = /(^\')(.*)(\'$)/gm;
                        for (var attribute in $attrs) {
                            if (attribute.startsWith('dfxNg')) {
                                var attribute_value = $attrs[attribute];
                                var attribute_instance = attribute_value.split(',');
                                $element.removeAttr('dfx-'+attribute_instance[0]);
                                if (gc_attributes[attribute_instance[1]].value !='') {
                                    var expression = regexp.exec( gc_attributes[attribute_instance[1]].value );
                                    if ( expression!=null && ( gc_attributes[attribute_instance[1]].value.indexOf('+') >= 0 ) ) {
                                        expression = null;
                                    }
                                    if (expression!=null) {
                                        if (attribute_instance[0]=='ng-bind') {
                                            $element.attr( attribute_instance[0], gc_attributes[attribute_instance[1]].value );
                                        } else {
                                            $element.attr( attribute_instance[0], gc_attributes[attribute_instance[1]].value.substr( 1, gc_attributes[attribute_instance[1]].value.length-2 ) );
                                        }
                                    } else if (attribute_instance[0]=='ng-src') {
                                        $element.attr( attribute_instance[0], '{{' + gc_attributes[attribute_instance[1]].value + '}}' );
                                    } else {
                                        $element.attr( attribute_instance[0], gc_attributes[attribute_instance[1]].value );
                                    }
                                }
                            }
                        }
                        if ($('[dfx-gc-compiled-child]',$element).size() >0) {
                            $('[dfx-gc-compiled-child]',$element).each( function(i, child_element) {
                                var regexp_child = /(^\')(.*)(\'$)/gm;
                                $.each(this.attributes, function(j, attrib) {
                                    if (attrib!=null && attrib.name.startsWith('dfx-ng')) {
                                        var attribute_instance = attrib.value.split(',');
                                        $(child_element).removeAttr(attrib.name);
                                        if (gc_attributes[attribute_instance[1]].value !='') {
                                            var expression = regexp_child.exec( gc_attributes[attribute_instance[1]].value );

                                            if ( expression && ( gc_attributes[attribute_instance[1]].value.indexOf('+') >= 0 ) ) {
                                                expression = null;
                                            }
                                            if (expression!=null) {
                                                if (attribute_instance[0]=='ng-bind') {
                                                    $(child_element).attr( attribute_instance[0], gc_attributes[attribute_instance[1]].value );
                                                } else {
                                                    $(child_element).attr( attribute_instance[0], gc_attributes[attribute_instance[1]].value.substr( 1, gc_attributes[attribute_instance[1]].value.length-2 ) );
                                                }
                                            } else if (attribute_instance[0]=='ng-src') {
                                                $(child_element).attr( attribute_instance[0], '{{' + gc_attributes[attribute_instance[1]].value + '}}' );
                                            } else {
                                                $(child_element).attr( attribute_instance[0], gc_attributes[attribute_instance[1]].value );
                                            }
                                        }
                                    }
                                });
                                $(child_element).removeAttr('dfx-gc-compiled-child');
                            });
                        }
                        $element.removeAttr('dfx-gc-compiled');
                        $compile($element)($scope);
                        unregister();
                    } catch (e) {
                        console.log(e);
                    }
                });
            } else {
                var gc_attributes = ($scope.attributes.columns!=null) ? $scope.attributes.columns.value[$scope.$index].renderer.attributes : $scope.attributes;
                for (var attribute in $attrs) {
                    if (attribute.startsWith('dfxNg')) {
                        var attribute_value = $attrs[attribute];
                        var attribute_instance = attribute_value.split(',');
                        $element.removeAttr('dfx-'+attribute_instance[0]);
                        if (gc_attributes[attribute_instance[1]].value !='') {
                            $element.attr( attribute_instance[0], gc_attributes[attribute_instance[1]].value );
                        }
                    }
                }
                $element.removeAttr('dfx-gc-compiled');
                $compile($element)($scope);
            }
        }
    }
}]);


function routeToPage(page_name) {
    var element = document.getElementById('dfx_page_content');
    if (element != null) {
        var $scope = angular.element(element).scope()
        $scope.routeToPage(page_name);
    } else {
        alert( 'routeToPage() can\'t be called from preview mode' );
    }
};
var dfxAppServices = angular.module('dfxAppServices',[]);

dfxAppServices.factory('dfxAuthRequest', function() {

    var aut_request = {};

    aut_request.send = function( config, callback) {
        authRequest( config ).then( function(data) {
            callback(data);
        });
    };
    
    return aut_request;
});

dfxAppServices.factory('dfxDialog', [ '$mdDialog', '$mdToast', function($mdDialog, $mdToast) {

    var dialog = {};

    dialog.showMessage = function (message) {
        $mdToast.show(
          $mdToast.simple()
            .textContent(message)
            .theme('success-toast')
            .position('top right')
            .hideDelay(3000)
        );
    };

    dialog.showWarning = function (message) {
        $mdToast.show(
          $mdToast.simple()
            .textContent(message)
            .theme('warn-toast')
            .position('top right')
            .hideDelay(3000)
        );
    };

    dialog.showError = function (message) {
        $mdToast.show(
          $mdToast.simple()
            .textContent(message)
            .theme('error-toast')
            .position('top right')
            .hideDelay(3000)
        );
    };

    dialog.showWaitingMessage = function( data ) {
        var content = (data.type && data.type === 'progress') ? '<md-progress-linear md-mode="indeterminate"></md-progress-linear>'
            : '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i>';
        if (!data.message) data.message = '';
        var template = '<md-dialog aria-label="textarea" ng-cloak flex="' + data.flexWidth +'">'
            + '<md-dialog-content style="padding:10px 10px; height: ' + data.height +';">'
            + '<h2 align="center">'  + data.message  + '</h2>'
            +  '<div align="center">' + content + '</div>'
            + '</md-dialog-content>'
            + '</md-dialog>';

        $mdDialog.show({
            parent : angular.element(document.body),
            clickOutsideToClose: false,
            escapeToClose: false,
            template: template
        });
        return $mdDialog;
    };

    dialog.showHTML = function( data ) {
        var generateButtonsContent = function() {
            var content = "";
            data.buttons.forEach(function(button) {
                content += '<md-button class="md-primary" ng-click="' + button.action + '">' + button.name + '</md-button>';
            });
            return content;
        }
            var template = '<md-dialog aria-label="textarea" ng-cloak flex="' + data.flexWidth +'">'
                    + '<form>'
                    + '<md-toolbar><div class="md-toolbar-tools">'
                    + '<h2>' + data.title +'</h2>'
                    + '</div></md-toolbar>'
                    + '<md-dialog-content style="padding:10px 10px; height: ' + data.height +';">'
                    +  data.html
                    + '</md-dialog-content>'
                    + '<div class="md-actions">'
                    + generateButtonsContent()
                    + '</div>'
                    + '</form>'
                    + '</md-dialog>';


            $mdDialog.show({
                parent : angular.element(document.body),
                clickOutsideToClose: true,
                escapeToClose: true,
                scope : data.scope,
                preserveScope : true,
                template: template
            });
        return $mdDialog;
    };

    dialog.showView = function( data ) {
        var view_object = $('#' + data.scope._view_id)[0];
        var component_id = $('div:first',view_object).attr('id');

        var generateButtonsContent = function() {
            var content = "";
            data.buttons.forEach(function(button) {
                content += '<md-button class="md-primary" ng-click="' + button.action + '">' + button.name + '</md-button>';
            });
            return content;
        }
        var template = '<md-dialog aria-label="textarea" ng-cloak flex="' + data.flexWidth +'">'
            + '<form>'
            + '<md-toolbar><div class="md-toolbar-tools">'
            + '<h2>' + data.title +'</h2>'
            + '</div></md-toolbar>'
            + '<md-dialog-content style="padding:10px 10px; height: ' + data.height +';">'
            + '<div dfx-view-preview-in-dialog="' + data.viewName +'" dfx-card = "' + data.cardName +'" id="' + data.scope._view_id +'" ng-controller="dfx_view_controller">'
            + '<div id="dfx_view_preview_container_in_dialog_' + component_id + '"></div>'
            + '</div>'
            + '</md-dialog-content>'
            + '<div class="md-actions">'
            + generateButtonsContent()
            + '</div>'
            + '</form>'
            + '</md-dialog>';


        $mdDialog.show({
            parent : angular.element(document.body),
            clickOutsideToClose: true,
            escapeToClose: true,
            scope : data.scope,
            preserveScope : true,
            template: template
        });
        return $mdDialog;
    }

    return dialog;
}]);

dfxAppServices.factory('dfxSidenav', [ '$mdSidenav', '$compile', '$timeout', function( $mdSidenav, $compile, $timeout) {

    var sideNav = {};

    sideNav.showView = function(data) {
        var view_object = $('#' + data.scope._view_id)[0];
        var component_id = $('div:first',view_object).attr('id');


        var side_nav_id = component_id + "-" + ((data.position == 'left') ? 'sidenav-left' : 'sidenav-right');
        var side_nav_width = data.width ? data.width : '300px';
        $( "md-sidenav[md-component-id='" + component_id + "-sidenav-left']" ).html("");
        $( "md-sidenav[md-component-id='" + component_id + "-sidenav-right']" ).html("");

        var template = '<md-content layout-padding style="padding:0px;">'
            + '<div dfx-view-preview-in-sidenav="' + data.viewName +'" dfx-card = "' + data.cardName +'" ng-controller="dfx_view_controller" id="' + data.scope._view_id +'" style="padding:0px;">'
            + '<div id="dfx_view_preview_container_in_sidenav_' + component_id +'" style="padding:0px;"></div>'
            + '</div>'
            + '</md-content>';

        var compiled = $compile(template)(data.scope);

        $( "md-sidenav[md-component-id='" + side_nav_id + "']").html(compiled);
        $( "md-sidenav[md-component-id='" + side_nav_id + "']").css({'min-width': side_nav_width, 'max-width': side_nav_width , 'width': side_nav_width});



        var sideNavInstance = $mdSidenav(side_nav_id);
        sideNavInstance.toggle();
        return sideNavInstance;

    }

    sideNav.showHTML = function(data) {
        var view_object = $('#' + data.scope._view_id)[0];
        var component_id = $('div:first',view_object).attr('id');

        var side_nav_id = component_id + "-" + ((data.position == 'left') ? 'sidenav-left' : 'sidenav-right');
        var side_nav_width = data.width ? data.width : '300px';
        $( "md-sidenav[md-component-id='" + component_id + "-sidenav-left']" ).html("");
        $( "md-sidenav[md-component-id='" + component_id + "-sidenav-right']" ).html("");

        var template = '<md-content layout-padding>'
            + data.html
            + '</md-content>';

        var compiled = $compile(template)(data.scope);
        var sideNavInstance = $mdSidenav(side_nav_id);
        $timeout(function(){
            $( "md-sidenav[md-component-id='" + side_nav_id + "']").html(compiled);
            $( "md-sidenav[md-component-id='" + side_nav_id + "']").css({'min-width': side_nav_width, 'max-width': side_nav_width , 'width': side_nav_width});
            sideNavInstance.toggle();
        },false);



        return sideNavInstance;


    }

    return sideNav;
}]);

dfxAppServices.directive('dfxSidenavAndBottomsheet', [ '$compile', '$timeout', function( $compile, $timeout) {
    return {
        restrict: 'A',
        controller: function($scope, $element, $attrs) {
            $timeout(function(){
                var component_id = $attrs.dfxSidenavAndBottomsheet;
                var content = '<md-sidenav md-component-id="' + component_id +'-sidenav-left"  class="md-sidenav-left" > </md-sidenav>'
                    + '<md-sidenav md-component-id="' + component_id +'-sidenav-right"  class="md-sidenav-right" > </md-sidenav>'
                    + '<div id="' + component_id +'-bottom-sheet"> </div>';
                var compiled_content = $compile(content)($scope);
                $element.append(compiled_content);
            },1000);
        }
    }
}]);

dfxAppServices.factory('dfxBottomSheet', [ '$mdBottomSheet', function($mdBottomSheet) {

    var bottomSheet = {};

    bottomSheet.showHTML = function( data ) {
        var view_object = $('#' + data.scope._view_id)[0];
        var component_id = $('div:first',view_object).attr('id');

        $("#" + component_id + "-bottom-sheet").html("");
        var template = '<md-bottom-sheet style="bottom:80px;" ng-cloak>'
            + data.html
            + '</md-bottom-sheet>';
        $mdBottomSheet.show({
            clickOutsideToClose: true,
            escapeToClose: true,
            scope : data.scope,
            preserveScope : true,
            template: template,
            parent : angular.element($("#" + component_id + "-bottom-sheet"))
        });
        return $mdBottomSheet;
    };

    bottomSheet.showView = function( data ) {
        var view_object = $('#' + data.scope._view_id)[0];
        var component_id = $('div:first',view_object).attr('id');

        $("#" + component_id + "-bottom-sheet").html("");
        var template = '<md-bottom-sheet style="padding:0px; bottom:80px;" ng-cloak>'
            + '<div dfx-view-preview-in-bottom="' + data.viewName +'" dfx-card = "' + data.cardName +'" ng-controller="dfx_view_controller" id = "' + data.scope._view_id +'" style="padding:0px;">'
            + '<div id="dfx_view_preview_container_in_bottom_' + component_id + '" style="padding:0px;"></div>'
            + '</div>'
            + '</md-bottom-sheet>';


        $mdBottomSheet.show({
            clickOutsideToClose: true,
            escapeToClose: true,
            scope : data.scope,
            preserveScope : true,
            template: template,
            parent : angular.element($("#" + component_id + "-bottom-sheet"))
        });
        return $mdBottomSheet;
    }

    return bottomSheet;
}]);

// Deprecated, replaced by dfxApiServices
dfxAppServices.factory('dfxApiRoutes', [ 'dfxUtil', function(dfxUtil) {

    var api_route = {};

    api_route.get = function( scope, route, req_data, callback, object_path, assigned_variable ) {
        requestAPIRoute({
            url:route,
            type:'get',
            data:req_data || {}
        })
            .then(function(res){
                if (object_path!=null) {
                    var arr_props = (object_path=='') ? [] : object_path.split('.');
                    var ref_prop = res.data;
                    for (var i=0; i<arr_props.length; i++) {
                        ref_prop = ref_prop[arr_props[i]];
                    }
                    try {
                        scope.$apply( function() {
                            dfxUtil.arrayAppend( assigned_variable, ref_prop );
                        });
                    } catch(err) {
                        console.log( 'API Route Call: Bad assigned variable or object path');
                    }
                }
                callback(res.data);
            })
    };

    api_route.post = function( scope, route, req_params, req_body, callback ) {
        requestAPIRoute({
            url:route,
            type:'post',
            data:{
                params : req_params || {},
                body : req_body || {}
            }
        })
            .then(function(res){
                callback(res.data);
            })
    };
    return api_route;
}]);

dfxAppServices.factory('dfxApiServices', [ 'dfxApiServiceObjects',  function( dfxApiServiceObjects ) {

    var api_services = {};

    api_services.get = function( scope, route, req_data, cache) {
        if (cache) req_data.cache = cache;
        return requestAPIRoute({
            url:route,
            type:'get',
            data: {
                data  : req_data || {},
                cache : cache ? cache : null
            }
        });
    };

    api_services.post = function( scope, route, req_params, req_body, cache) {
        return requestAPIRoute({
            url:route,
            type:'post',
            data:{
                params : req_params || {},
                body : req_body || {},
                cache : cache ? cache : null
            }
        });
    };

    api_services.clearCache = function(o) {
        var obj = {
            type : o.type,
            application : o.application,
            name : o.name
        };
        return dfxApiServiceObjects.clearCache(obj);
    }

    return api_services;
}]);

dfxAppServices.factory('dfxChangeCard', [ '$compile', '$timeout',  function( $compile, $timeout ) {
    var obj = {};
    obj.showCard = function( data ) {
        $timeout(function(){
            data.scope.dfxViewCard = data.cardName;
        },0);
    }
    return obj;
}]);

dfxAppServices.factory('dfxUtil', [ function() {

    var api_util = {};

    api_util.arrayAppend = function( array_one, array_two ) {
        if (array_one == null) {
            array_one = [];
        } else {
            array_one.splice( 0, array_one.length );
        }
        for (var i=0; i<array_two.length; i++) {
            array_one.push(array_two[i]);
        }
    };

    return api_util;
}]);
var dfxGControls = angular.module('dfxGControls',['ngMaterial', 'ngMdIcons', 'ngMessages', 'ngSanitize', 'ngAnimate', 'nvd3', 'ngQuill', 'jkAngularCarousel', 'ui.knob']);dfxGControls.factory('dfxGCUtil', [ function() {    var gc_util_services = {};    gc_util_services.renderHtml = function( el, attrs ) {        return '/gcontrols/web/image.html';    };    return gc_util_services;}]);dfxGControls.directive('dfxGcDesign', function() {    return {        restrict: 'A',        controller: function($scope, $element, $attrs) {            var element_id = $element.attr('id');            var parent_id = $('#'+element_id).parent().attr('id');            if ($attrs.dfxGcRendererContent==null) {                $element.addClass( 'dfx-ve-gc-handle-container' );                $element.bind( 'mouseenter', function(event) {                    var rect = $element[0].getBoundingClientRect();                    $('.dfx_visual_editor_highlighted_box').css('left', rect.left);                    $('.dfx_visual_editor_highlighted_box').css('top', rect.top-121);                    $('.dfx_visual_editor_highlighted_box').width(rect.width);                    $('.dfx_visual_editor_highlighted_box').height(rect.height);                    $('.dfx_visual_editor_highlighted_box').css('display', 'block');                });                $element.bind( 'mouseout', function(event) {                    $('.dfx_visual_editor_highlighted_box').css('display', 'none');                });                $element.bind( 'click', function(event) {                    event.stopImmediatePropagation();                    var rect = $element[0].getBoundingClientRect();                    $('.dfx-ve-gc-handle-selected').css('display','none');                    $('#'+element_id+'_handle_select').css('display','block');                    $('.dfx_visual_editor_highlighted_box').css('display', 'none');                    /*$('.dfx_visual_editor_selected_box').css('left', rect.left);                     $('.dfx_visual_editor_selected_box').css('top', rect.top-121);                     $('.dfx_visual_editor_selected_box').width(rect.width);                     $('.dfx_visual_editor_selected_box').height(rect.height);                     $('.dfx_visual_editor_selected_box').css('display', 'block');*/                    $scope.loadPropertyPanel(element_id);                });            }            $scope.initContainers();        }    }});dfxGControls.directive('dfxGcWebBase', ['$rootScope', '$http', '$compile', '$injector', '$mdToast', '$q', function($rootScope, $http, $compile, $injector, $mdToast, $q) {    return {        controller: function($element) {            var base = this;            var storeGcTemplate = function (gc_type, gc_template) {                sessionStorage.setItem('dfx_' + gc_type, JSON.stringify(gc_template));            };            var mergeArrayTypeAttribute = function (default_array_attribute, updated_array_attribute) {                for (var i = 0; i < updated_array_attribute.length; i++) {                    if (i > 0) {// default_attributes array contains only one, first array element, so, clone it first                        default_array_attribute.push(angular.copy(default_array_attribute[0]));                    }                    mergeWithOverriddenAttributes(default_array_attribute[i], updated_array_attribute[i]);                }            };            var mergeWithOverriddenAttributes = function (default_attributes, updated_attributes) {                for (var updated_attribute in updated_attributes) {                    if (updated_attributes.hasOwnProperty(updated_attribute)) {                        if (updated_attribute != 'value' && updated_attribute != 'status' &&                            (default_attributes[updated_attribute] || default_attributes[updated_attribute] === ''))                        {                            if ( Array.isArray(updated_attributes[updated_attribute]) ) {                                //mergeArrayTypeAttribute(default_attributes[updated_attribute], updated_attributes[updated_attribute]);                                default_attributes[updated_attribute] = updated_attributes[updated_attribute];// this is an array, without 'value'                            } else {                                if (updated_attributes[updated_attribute] !== null && typeof updated_attributes[updated_attribute] === 'object') {                                    mergeWithOverriddenAttributes(default_attributes[updated_attribute], updated_attributes[updated_attribute]);                                }                                if (updated_attribute) {                                    if (updated_attributes[updated_attribute] !== null && typeof updated_attributes[updated_attribute] === 'object') {                                        default_attributes[updated_attribute].status = 'overridden';                                        default_attributes[updated_attribute].value  = updated_attributes[updated_attribute].value;                                    } else {                                        default_attributes[updated_attribute] = updated_attributes[updated_attribute];//attribute is not object, ex: style = ""                                    }                                }                            }                        }                    }                }            };            this.callViewControllerFunction = function( view_id, function_name ) {                var view_instance = document.querySelector('#'+view_id);                var view_scope = angular.element(view_instance).scope();                view_scope.$eval(function_name + '()');            };            this.evaluateViewExpression= function( view_id, expression ) {                var view_instance = document.querySelector('#'+view_id);                var view_scope = angular.element(view_instance).scope();                return view_scope.$eval(expression);            };            this.init = function(scope, element, component, attrs, type) {                if (!angular.isDefined(attrs.dfxGcEdit)) {                    return base.initAttributes(scope, element, component, attrs, type);                } else {                    return base.initExistingComponent(scope, element, component, attrs);                }            };            this.initAttributes = function(scope, element, component, attrs, type) {                var app_body = angular.element(document.querySelector('body'));                var app_scope = angular.element(app_body).scope();                return app_scope.getGCDefaultAttributes( type ).then( function(default_attributes) {                    var isExistingAttributes = (component.attributes==null) ? false : true;                    var component_default_attributes = angular.copy(default_attributes);                    storeGcTemplate(type, default_attributes);                    if (isExistingAttributes) {                        mergeWithOverriddenAttributes(component_default_attributes, component.attributes);                    }                    component.attributes = component_default_attributes;                    if (isExistingAttributes && component.attributes.children!=null) {                        component.children =  component.attributes.children.slice(0);                        delete component.attributes.children;                        base.initChildIDs(component.children);                    } else {                        if (component.children==null) {                            component.children =  [];                        }                    }                    if (!isExistingAttributes) {                        scope.$parent.setComponent(component);                    }                    $rootScope.$emit(attrs.id + '_attributes_loaded', component.attributes);                    base.initExistingComponent(scope, element, component, attrs);                });            };            this.initChildIDs = function(child_elements) {                var idx=0;                for (idx=0; idx<child_elements.length; idx++) {                    var uuid = Math.floor(Math.random() * 100000);                    child_elements[idx].id = uuid;                    if (child_elements[idx].children.length>0) {                        base.initChildIDs(child_elements[idx].children);                    }                }            };            this.initExistingComponent = function(scope, element, component, attrs) {                scope.component_id = component.id;                scope.attributes = component.attributes;                scope.children = {};                scope.view_id = attrs.viewId;                scope.parent_id = attrs.gcParent;                scope.rendering_children = {};                if (!angular.isDefined(attrs.dfxGcEdit)) {                    angular.element(document).ready(function() {                        if (angular.isDefined(attrs.dfxGcDesign)) {                            var handle = '<div id="' + scope.component_id + '_handle" class="dfx-ve-gc-handle"><i class="fa fa-arrows"></i></div>';                            var handle_remove = '<a id="' + scope.component_id + '_handle_remove" href="#" onclick="DfxVisualBuilder.removeComponent(\'' + scope.component_id +'\')" class="dfx-ve-gc-handle-remove"><i class="fa fa-trash"></i></a>';                            var handle_duplicate = '<a id="' + scope.component_id + '_handle_duplicate" href="#" onclick="DfxVisualBuilder.duplicateComponent(\'' + scope.component_id +'\', \'' + scope.view_card_selected +'\')" class="dfx-ve-gc-handle-duplicate"><i class="fa fa-files-o"></i></a>';                            //var handle_select = '<div id="' + scope.component_id + '_handle_select" class="dfx-ve-gc-handle-selected"><i class="fa fa-wrench"></i></div>';                            //$("#"+scope.component_id).prepend(handle_select);                            $("#"+scope.component_id).prepend(handle_remove);                            $("#"+scope.component_id).prepend(handle);                            $("#"+scope.component_id).prepend(handle_duplicate);                        }                        $rootScope.$on(scope.component_id + '_child_rendered', function(event, child_id) {                            delete scope.rendering_children[child_id];                            var count = 0;                            for (key in scope.rendering_children) {                                count++;                            }                            if (count==0) {                                $rootScope.$emit(scope.component_id + '_rendering_completed');                            }                        });                        if (angular.isDefined(attrs.dfxGcDesign)) {                            if (component.children.length >0) {                                for (var i=0; i<component.children.length; i++) {                                    scope.rendering_children[component.children[i].id] = { 'rendered': false };                                }                                scope.$parent.addComponents(component.children, component, null, scope.component_id, attrs.viewId);                            }                        } else {                            if (scope.parent_id!=null && scope.parent_id!='') {                                $rootScope.$emit(scope.parent_id + '_child_rendered', scope.component_id);                            }                        }                    });                }                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    // adding children to their respective container                    for (var idx_child=0; idx_child<component.children.length; idx_child++) {                        if (scope.children[component.children[idx_child].container]==null) {                            scope.children[component.children[idx_child].container] = [];                        }                        scope.children[component.children[idx_child].container].push(component.children[idx_child]);                    }                    if (attrs.dfxGcRendererContent!=null) {                        scope.$parent_scope = scope.$parent;                    } else {                        scope.$parent_scope = angular.element(document.getElementById(scope.view_id)).scope().$parent;                    }                    if (component.attributes.ext_directives!=null) {                        for (var idx=0; idx<component.attributes.ext_directives.length; idx++) {                            var ext_directive = component.attributes.ext_directives[idx];                            var directive_link = $injector.get(ext_directive.directive+'Directive')[0];                            attrs[ext_directive.directive] = ext_directive.value;                            directive_link.link(scope, element, attrs);                        }                    }                }                return $q.when(component.id);            };            this.bindScopeVariable = function( scope, scope_variable_name ) {                scope.$watch( scope_variable_name, function(newValue, oldValue) {                    scope.$parent_scope[scope_variable_name] = newValue;                });                scope.$parent_scope.$watch( scope_variable_name, function(newValue, oldValue) {                    scope[scope_variable_name] = newValue;                });            };        }    }}]);dfxGControls.directive('dfxGcProperty', [function() {    return {        restrict: 'A',        controller: function($scope, $element, $attrs) {            var component = $scope.$parent.gc_selected;            if (component.attributes[$attrs.dfxGcProperty]['protected']) {                $element.css('display', 'none');            }        }    };}]);dfxGControls.directive('dfxGcWebPanel', ['$timeout', '$compile', function($timeout, $compile) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        transclude : true,        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/panel_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/panel_design.html';            } else {                return '/gcontrols/web/panel.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            basectrl.init(scope, element, component, attrs, 'panel').then(function(){                scope.attributes.flex.status = "overridden";                scope.attributes.layoutType = { "value": "panel" };                scope.attributes.isMainPanel = { "value": false };                scope.attributes.initialized = { "value": true };                scope.attributes.toolbar.leftMenu.equalButtonSize = { "value": false };                scope.attributes.toolbar.leftMenu.initialClick = { "value": false };                scope.attributes.toolbar.leftMenu.dynamicPresent = { "value": false };                scope.attributes.toolbar.rightMenu.equalButtonSize = { "value": false };                scope.attributes.toolbar.rightMenu.initialClick = { "value": false };                scope.attributes.toolbar.rightMenu.dynamicPresent = { "value": false };                if(scope.attributes.hasOwnProperty('collapsible')){delete scope.attributes.collapsible;}                if(scope.attributes.toolbar.leftMenu.hasOwnProperty('iconBarClass')){delete scope.attributes.toolbar.leftMenu.iconBarClass;}                if(scope.attributes.toolbar.rightMenu.hasOwnProperty('iconBarClass')){delete scope.attributes.toolbar.rightMenu.iconBarClass;}                            var parentId = ($('#' + scope.component_id).parent()).attr('id');                if(parentId === 'dfx_visual_editor_workspace_' + scope.view_card_selected){                    scope.attributes.isMainPanel.value = true;                }                if(scope.attributes.isMainPanel.value){                    $timeout(function(){                        $('#' + scope.component_id + '_handle_duplicate').remove();                    },0);                }                scope.moveUpRow = function(index){                    if(index>0){                        /*var curCols = $('#' + scope.component_id + '_layout_0' + '_row_' + index).children() ;                        var nextCols = $('#' + scope.component_id + '_layout_0' + '_row_' + (index-1)).children() ;                        var curColsContent = [] ;                        var nextColsContent = [] ;                        for(var i =0; i < curCols.length; i++){                            curColsContent.push($(curCols[i]).html()) ;                        }                        for(var i =0; i < nextCols.length; i++){                            nextColsContent.push($(nextCols[i]).html()) ;                        }*/                        scope.attributes.layout.rows.splice(index - 1, 2, scope.attributes.layout.rows[index], scope.attributes.layout.rows[index-1]) ;                        scope.swapContainerUp(scope.component_id, index, 0);                        /*$timeout(function(){                            var movedDownCols = $('#' + scope.component_id + '_layout_0' + '_row_' + (index - 1)).children() ;                            for(var j =0; j < movedDownCols.length; j++){                                $(movedDownCols[j]).html(curColsContent[j]) ;                                $compile($(movedDownCols[j]).contents())(scope);                            }                            var movedUpCols =  $('#' + scope.component_id + '_layout_0' + '_row_' + (index)).children() ;                            for(var k =0; k < movedUpCols.length; k++){                                $(movedUpCols[k]).html(nextColsContent[k]) ;                                $compile($(movedUpCols[k]).contents())(scope);                            }                        },0);*/                    }                };                scope.moveLeftCol = function(rowIndex, index){                    if(index > 0){                        /*var curCol = $('#' + scope.component_id + '_layout_0' + '_row_' + rowIndex + '_column_' + index) ;                        var leftCol = $('#' + scope.component_id + '_layout_0' + '_row_' + rowIndex + '_column_' + (index-1)) ;                        var curColHtml = curCol.html() ;                        var leftColHtml = leftCol.html() ;*/                        scope.attributes.layout.rows[rowIndex].cols.splice(index-1, 2, scope.attributes.layout.rows[rowIndex].cols[index], scope.attributes.layout.rows[rowIndex].cols[index-1]);                        scope.swapContainerLeft(scope.component_id, index, rowIndex, 0);                        /*$timeout(function(){                            curCol.html(leftColHtml);                            $compile(curCol.contents())(scope);                            leftCol.html(curColHtml);                            $compile(leftCol.contents())(scope);                        },0);*/                    }                };                scope.moveDownRow = function(index){                    if(index < scope.attributes.layout.rows.length-1){                        /*var curCols = $('#' + scope.component_id + '_layout_0' + '_row_' + index).children() ;                        var nextCols = $('#' + scope.component_id + '_layout_0' + '_row_' + (index+1)).children() ;                        var curColsContent = [] ;                        var nextColsContent = [] ;                        for(var i =0; i < curCols.length; i++){                            curColsContent.push($(curCols[i]).html()) ;                        }                        for(var i =0; i < nextCols.length; i++){                            nextColsContent.push($(nextCols[i]).html()) ;                        }*/                        scope.attributes.layout.rows.splice(index, 2, scope.attributes.layout.rows[index+1], scope.attributes.layout.rows[index]) ;                        scope.swapContainerDown(scope.component_id, index, 0);                        /*$timeout(function(){                            var movedDownCols = $('#' + scope.component_id + '_layout_0' + '_row_' + (index + 1)).children() ;                            for(var j =0; j < movedDownCols.length; j++){                                $(movedDownCols[j]).html(curColsContent[j]) ;                                $compile($(movedDownCols[j]).contents())(scope);                            }                            var movedUpCols =  $('#' + scope.component_id + '_layout_0' + '_row_' + (index)).children() ;                            for(var k =0; k < movedUpCols.length; k++){                                $(movedUpCols[k]).html(nextColsContent[k]) ;                                $compile($(movedUpCols[k]).contents())(scope);                            }                        },0);*/                    }                };                scope.moveRightCol = function(rowIndex, index){                    if(index < scope.attributes.layout.rows[rowIndex].cols.length-1){                        /*var curCol = $('#' + scope.component_id + '_layout_0' + '_row_' + rowIndex + '_column_' + index) ;                        var rightCol = $('#' + scope.component_id + '_layout_0' + '_row_' + rowIndex + '_column_' + (index+1)) ;                        var curColHtml = curCol.html() ;                        var rightColHtml = rightCol.html() ;*/                        scope.attributes.layout.rows[rowIndex].cols.splice(index, 2, scope.attributes.layout.rows[rowIndex].cols[index+1], scope.attributes.layout.rows[rowIndex].cols[index]);                        scope.swapContainerRight(scope.component_id, index, rowIndex, 0);                        /*$timeout(function(){                            curCol.html(rightColHtml);                            $compile(curCol.contents())(scope);                            rightCol.html(curColHtml);                            $compile(rightCol.contents())(scope);                        },0);*/                    }                };                scope.changeWidth = function(){                    if ( !angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit) ) {                        if ( !scope.attributes.repeat_title.value ) {                            $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                        }                    } else {                        $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                    }                };                if (!angular.isDefined(attrs.dfxGcEdit)) {                    scope.changeWidth();                }                scope.collapsePanelBody = function(isCollapsed, index) {                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        if ( scope.attributes.repeat_title.value ) {                            basectrl.bindScopeVariable( scope, component.attributes.repeat_in.value );                        } else {                            basectrl.bindScopeVariable( scope, component.attributes.toolbar.collapsed.value );                        }                        if ( scope.attributes.toolbar.collapsed.value == 'true' || scope.attributes.toolbar.collapsed.value == 'false' ) {                            if ( isCollapsed ) {                                scope.attributes.toolbar.collapsed.value = 'false';                            } else {                                scope.attributes.toolbar.collapsed.value = 'true';                            }                        } else {                            if ( scope.attributes.repeat_title.value ) {                                var collapsedEl = scope.attributes.toolbar.collapsed.value.replace("$dfx_item.", "");                                if ( isCollapsed ) {                                    scope[scope.attributes.repeat_in.value][index][collapsedEl] = false;                                } else {                                    scope[scope.attributes.repeat_in.value][index][collapsedEl] = true;                                }                            } else {                                if ( isCollapsed ) {                                    scope.$parent_scope[scope.attributes.toolbar.collapsed.value] = false;                                } else {                                    scope.$parent_scope[scope.attributes.toolbar.collapsed.value] = true;                                }                            }                        }                    } else {                        if ( scope.attributes.toolbar.collapsed.value == 'false' ) {                            scope.attributes.toolbar.collapsed.designValue = true;                            scope.attributes.toolbar.collapsed.value = 'true';                        } else if ( scope.attributes.toolbar.collapsed.value == 'true' ) {                            scope.attributes.toolbar.collapsed.designValue = false;                            scope.attributes.toolbar.collapsed.value = 'false';                        } else {                            if ( !scope.attributes.toolbar.collapsed.designValue || scope.attributes.toolbar.collapsed.designValue == false ) {                                scope.attributes.toolbar.collapsed.designValue = true;                            } else {                                scope.attributes.toolbar.collapsed.designValue = false;                            }                        }                    }                }                scope.checkPanelBody = function() {                    if ( scope.attributes.toolbar.collapsed.value == 'true' ) {                        scope.attributes.toolbar.collapsed.designValue = true;                    } else {                        scope.attributes.toolbar.collapsed.designValue = false;                    }                }                scope.checkCollapses = function() {                    if ( !scope.attributes.toolbar.hasOwnProperty('collapsed') ) {                        var addCollapsed = { "collapsed": { "value": "false" }};                        scope.attributes.toolbar.collapsed = addCollapsed.collapsed;                    }                    if ( !scope.attributes.toolbar.hasOwnProperty('collapsible') ) {                        var addCollapsible = { "collapsible": { "value": "false" }};                        scope.attributes.toolbar.collapsible = addCollapsible.collapsible;                    }                    if ( !scope.attributes.hasOwnProperty('repeat_title') ) {                        var addRepeatTitle = { "repeat_title": { "value": false }};                        scope.attributes.repeat_title = addRepeatTitle.repeat_title;                    }                }                scope.checkCollapses();                if (angular.isDefined(attrs.dfxGcDesign)) {                    $timeout(function(){                        scope.checkPanelBody();                    }, 0);                }                if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) {                    scope.$watch('attributes.autoHeight.value', function (newValue) {                        var selected_panel_border = (scope.gc_selected != null) ? 'border: 2px solid rgb(0, 0, 0);' : '';                        if (newValue === true || newValue === 'true') {                            $('#' + scope.component_id).attr('style', 'width: 100%;' + selected_panel_border);                            $('#' + scope.component_id).removeAttr('layout');                        } else {                            $('#' + scope.component_id).attr('style', 'height: 100%;' + selected_panel_border);                            $('#' + scope.component_id).attr('layout', 'column');                        }                    });                }            });        }    }}]);dfxGControls.directive('dfxGcWebInput', ['$timeout', function($timeout) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/input_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/input_design.html';            } else {                return '/gcontrols/web/input.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.$parent.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'input').then(function(){                scope.attributes.binding.status = 'overridden';                if ( !scope.attributes.hasOwnProperty('flex') ) { scope.attributes.flex = { "value": 50 }; }                scope.attributes.flex.status = "overridden";                scope.attributes.minlength.value = parseInt(scope.attributes.minlength.value);                scope.attributes.maxlength.value = parseInt(scope.attributes.maxlength.value);                scope.attributes.minNumber.value = parseInt(scope.attributes.minNumber.value);                scope.attributes.maxNumber.value = parseInt(scope.attributes.maxNumber.value);                scope.$watch("$gcscope[attributes.binding.value]", function(newValue){                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        if(scope.attributes.binding.value !== "" && !scope.attributes.binding.repeatable){                            var bindingString = scope.attributes.binding.value;                            eval("scope." + bindingString + "= newValue ;");                        }                    }                });                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    if(scope.attributes.binding.value.substring(0, 6) === '$item.' || scope.attributes.binding.value.substring(0, 6) === '$item['){                        scope.attributes.binding.repeatable = true ;                        if(scope.attributes.binding.value.charAt(5) === '.'){                            scope.attributes.binding.$itemValue = scope.attributes.binding.value.substr(6);                        }else{                            scope.attributes.binding.$itemValue = scope.attributes.binding.value.substr(6, scope.attributes.binding.value.length - 7);                        }                    }else{                        basectrl.bindScopeVariable( scope, component.attributes.binding.value );                    }                }                if ( typeof scope.attributes.icon === 'string' ) {                     var tempIcon = scope.attributes.icon;                    scope.attributes.icon = {                        "value": tempIcon,                         "type": scope.attributes.hasOwnProperty('iconType') ? scope.attributes.iconType : 'fa-icon'                    }                }                if ( !scope.attributes.icon.hasOwnProperty('size') ) { scope.attributes.icon.size = 21; }                 scope.ifShowIconTypes = function( icon ) {                    var regexp = /(^\')(.*)(\'$)/gm, filtered = regexp.exec( icon );                    if ( icon && ( icon.indexOf('+') >= 0 ) ) { filtered = false; }                    if ( icon === '' ) { filtered = true; }                    if ( icon.indexOf("'") === 0 && icon.indexOf('+') === -1 && icon.charAt(icon.length-1) === "'" ) {                         icon.indexOf("'fa-") === 0 ? scope.attributes.icon.type = 'fa-icon' : scope.attributes.icon.type = 'svg-icon';                     }                    scope.showIconTypes = filtered ? false : true;                }                scope.ifShowIconTypes(scope.attributes.icon.value);                scope.changeWidth = function(){                    $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                };                if (!angular.isDefined(attrs.dfxGcEdit)) {                    scope.changeWidth();                }            });        }    }}]);dfxGControls.directive('dfxGcWebTextarea', ['$timeout', function($timeout) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/textarea_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/textarea_design.html';            } else {                return '/gcontrols/web/textarea.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.$parent.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'textarea').then(function(){                if ( !scope.attributes.hasOwnProperty('flex') ) { scope.attributes.flex = { "value": 50 }; }                scope.attributes.flex.status = "overridden" ;                scope.attributes.icon.status = "overridden" ;                scope.$watch('attributes.rowsNumber.value', function(newValue){                    scope.attributes.rowsNumber.value = parseInt(newValue);                });                scope.$watch("$gcscope[attributes.binding.value]", function(newValue){                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        if(scope.attributes.binding.value !== ""){                            var bindingString = scope.attributes.binding.value;                            eval("scope." + bindingString + "= newValue ;");                        }                    }                });                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    basectrl.bindScopeVariable( scope, component.attributes.binding.value );                }                if ( typeof scope.attributes.icon === 'string' ) {                     var tempIcon = scope.attributes.icon;                    scope.attributes.icon = {                        "value": tempIcon,                         "type": scope.attributes.hasOwnProperty('iconType') ? scope.attributes.iconType : 'fa-icon'                    }                }                if ( !scope.attributes.icon.hasOwnProperty('size') ) { scope.attributes.icon.size = 21; }                 scope.ifShowIconTypes = function( icon ) {                    var regexp = /(^\')(.*)(\'$)/gm, filtered = regexp.exec( icon );                    if ( icon && ( icon.indexOf('+') >= 0 ) ) { filtered = false; }                    if ( icon === '' ) { filtered = true; }                    if ( icon.indexOf("'") === 0 && icon.indexOf('+') === -1 && icon.charAt(icon.length-1) === "'" ) {                         icon.indexOf("'fa-") === 0 ? scope.attributes.icon.type = 'fa-icon' : scope.attributes.icon.type = 'svg-icon';                     }                    scope.showIconTypes = filtered ? false : true;                }                scope.ifShowIconTypes(scope.attributes.icon.value);                scope.changeWidth = function(){                    $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                };                if (!angular.isDefined(attrs.dfxGcEdit)) {                    scope.changeWidth();                }            });        }    }}]);dfxGControls.directive('dfxGcWebStatictext', ['$timeout', function($timeout) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/statictext_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/statictext_design.html';            } else {                return '/gcontrols/web/statictext.html';            }        },        link: {            pre: function(scope, element, attrs, basectrl) {                var component = scope.$parent.getComponent(element);                scope.component_id = component.id;                scope.attributes = null;                basectrl.init(scope, element, component, attrs, 'statictext').then(function(){                    $timeout(function(){                        $('#' + scope.component_id + '_handle').css('margin-left', '-10px');                        $('#' + scope.component_id + '_handle').css('margin-top', '-12px');                        $('#' + scope.component_id + '_handle_duplicate').css('margin-right', '-10px');                        $('#' + scope.component_id + '_handle_duplicate').css('margin-top', '-12px');                        $('#' + scope.component_id + '_handle_remove').css('margin-right', '-10px');                        $('#' + scope.component_id + '_handle_remove').css('margin-bottom', '-12px');                    },0);                });            }        }    }}]);dfxGControls.directive('dfxGcWebChips', ['$timeout', function($timeout) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/chips_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/chips_design.html';            } else {                return '/gcontrols/web/chips.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.$parent.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'chips').then(function(){                if(!scope.attributes.hasOwnProperty('isBindEmpty')){scope.attributes.isBindEmpty = { "value": true };}                if(scope.attributes.hasOwnProperty('property1')){delete scope.attributes.property1;}                if(scope.attributes.hasOwnProperty('property2')){delete scope.attributes.property2;}                if(scope.attributes.hasOwnProperty('customItems')){delete scope.attributes.customItems;}                scope.attributes.flex.status = "overridden" ;                scope.attributes.binding.status = "overridden" ;                scope.attributes.isBindEmpty.status = "overridden" ;                scope.attributes.selectedInput.status = "overridden" ;                scope.attributes.newItem = function(chip) {                    return { name: chip, type: 'unknown' };                };                scope.$watch('attributes.binding.value', function(binding){                    binding ? scope.attributes.isBindEmpty.value = false : scope.attributes.isBindEmpty.value = true;                });                scope.$watch('attributes.selectedInput.value', function(newValue){                        $timeout(function () {                            try{                                scope.chips = '#' + scope.component_id + '> div > md-chips > md-chips-wrap';                                $(scope.chips).css("padding-top", "8px");                            }catch(e){                                /*console.log(e.message);*/                            }                        },0);                    scope.attributes.isBindEmpty.status = "overridden" ;                });                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    basectrl.bindScopeVariable(scope, component.attributes.binding.value);                }                scope.changeWidth = function(){                    $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                };                if (!angular.isDefined(attrs.dfxGcEdit)) { scope.changeWidth(); }            });        }    }}]);dfxGControls.directive('dfxGcWebRadio', ['$timeout', '$mdDialog', function($timeout, $mdDialog) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/radio_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/radio_design.html';            } else {                return '/gcontrols/web/radio.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.$parent.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'radio').then(function(){                if(!scope.attributes.hasOwnProperty('counterRadioOptions')){scope.attributes.counterRadioOptions = {"value": ""};}                if(!scope.attributes.hasOwnProperty('isBindingPresent')){scope.attributes.isBindingPresent = {"value": "init"};}                if(!scope.attributes.hasOwnProperty('dynamicPresent')){scope.attributes.dynamicPresent = {"value": false};}                if(!scope.attributes.hasOwnProperty('currentIndex')){scope.attributes.currentIndex = {"value": 0};}                if (!scope.attributes.hasOwnProperty('optionsType')){scope.attributes.optionsType = {"value": "static"};}                scope.attributes.optionsType.status = 'overridden';                scope.attributes.binding.status = "overridden";                scope.attributes.source.status = "overridden";                scope.attributes.currentIndex.status = "overridden";                scope.attributes.currentItem.status = "overridden";                scope.attributes.counterRadioOptions.status = "overridden";                scope.attributes.buttonClass.value = scope.attributes.buttonClass.value.replace("md-primary", "");                if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    scope.attributes.currentItem = scope.attributes.radioItems.value[scope.attributes.currentIndex.value];                    if(scope.$gcscope[scope.attributes.source.value]){                        scope.attributes.empty.value = scope.$gcscope[scope.attributes.source.value][0][scope.attributes.bindingProperty.value];                    }                }                if(scope.attributes.counterRadioOptions.value === ""){                    scope.attributes.isBindingPresent.value = false;                    scope.attributes.counterRadioOptions.value = 2;                    scope.attributes.currentItem = scope.attributes.radioItems.value[0];                }                scope.switchDirection = function(direction){                    $timeout(function () {                        try{                            scope.radiogroup = '#' + scope.component_id + '> div > md-radio-group';                            scope.radiogroup_buttons = $(scope.radiogroup).children() ;                            if(direction === 'row'){                                $(scope.radiogroup).css("display", "inline-block");                                for(var i = 0; i < scope.radiogroup_buttons.length; i++){                                    $(scope.radiogroup_buttons[i]).css("display", "inline-block");                                }                                scope.$apply(function(){                                });                            }else{                                $(scope.radiogroup).css("display", "block");                                for(var i = 0; i < scope.radiogroup_buttons.length; i++){                                    $(scope.radiogroup_buttons[i]).css("display", "block");                                }                            }                        }catch(e){                            /*console.log(e.message);*/                        }                    },0);                };                scope.showOptionsEditor = function(ev) {                    $mdDialog.show({                        scope: scope.$new(),                        parent: angular.element(document.body),                        targetEvent: ev,                        clickOutsideToClose:true,                        ariaLabel: 'options-editor',                        templateUrl: '/gcontrols/web/radio_options_editor.html',                        onComplete: function() {                            scope.attributes.radioItems.status = "overridden";                            $('.menu-structure li').eq(scope.attributes.currentIndex.value).addClass('active');                        },                        controller: function() {                            scope.closeDialog = function() {                                $mdDialog.hide();                            }                        }                    });                }                scope.activeOption = function() {                    $('.menu-structure li').removeClass('active');                    $('.menu-structure li').eq( scope.attributes.currentIndex.value ).addClass('active');                }                scope.selectOptionItem = function( index ) {                    scope.attributes.currentIndex.value = index;                    scope.attributes.currentItem = scope.attributes.radioItems.value[scope.attributes.currentIndex.value];                    scope.activeOption();                }                scope.addItem = function(){                    scope.attributes.radioItems.status = "overridden";                    scope.attributes.counterRadioOptions.value++;                    var optval = "option value " + scope.attributes.counterRadioOptions.value;                    var optdis = "'option display " + scope.attributes.counterRadioOptions.value + "'";                    scope.attributes.currentIndex.value = scope.attributes.currentIndex.value + 1;                    scope.attributes.radioItems.value.splice(scope.attributes.currentIndex.value, 0, {"display":optdis, "value":optval});                    scope.attributes.currentItem = scope.attributes.radioItems.value[scope.attributes.currentIndex.value];                    scope.switchDirection(scope.attributes.direction.value);                    $timeout(function() { scope.activeOption(); }, 0);                };                scope.moveOptionUp = function() {                    if ( scope.attributes.currentIndex.value > 0 ) {                        var movedOption = scope.attributes.currentItem,                            fromIndex = scope.attributes.currentIndex.value,                            toIndex = scope.attributes.currentIndex.value - 1;                        scope.attributes.radioItems.value.splice(fromIndex, 1);                        scope.attributes.radioItems.value.splice(toIndex, 0, movedOption);                        --scope.attributes.currentIndex.value;                        scope.attributes.currentItem = scope.attributes.radioItems.value[scope.attributes.currentIndex.value];                        scope.activeOption();                    }                }                scope.moveOptionDown = function() {                    if ( scope.attributes.currentIndex.value < ( scope.attributes.radioItems.value.length - 1 )) {                        var movedOption = scope.attributes.currentItem,                            fromIndex = scope.attributes.currentIndex.value,                            toIndex = scope.attributes.currentIndex.value + 1;                        scope.attributes.radioItems.value.splice(fromIndex, 1);                        scope.attributes.radioItems.value.splice(toIndex, 0, movedOption);                        ++scope.attributes.currentIndex.value;                        scope.attributes.currentItem = scope.attributes.radioItems.value[scope.attributes.currentIndex.value];                        scope.activeOption();                    }                }                scope.$watch('attributes.currentItem', function(newValue, oldvalue){                    for(var i =0; i < scope.attributes.radioItems.value.length; i++){                        if(newValue.value === scope.attributes.radioItems.value[i].value && newValue.display === scope.attributes.radioItems.value[i].display){                            scope.attributes.currentIndex.value = i;                            break;                        }                    }                    scope.attributes.currentItem = scope.attributes.radioItems.value[scope.attributes.currentIndex.value];                });                scope.$watch('attributes.binding.value', function(newValue){                    if(newValue){                        scope.attributes.isBindingPresent.value = true;                    }else{                        scope.attributes.isBindingPresent.value = false;                    }                });                scope.$watch('attributes.source.value', function(newValue){                    var sourceExp = /^[-a-z0-9_]+$/gi,                        sourceRes = sourceExp.test( newValue),                        startString = isNaN( newValue.charAt(0) );                    if( newValue && sourceRes && startString ){                        scope.attributes.dynamicPresent.value = true;                    }else{                        scope.attributes.dynamicPresent.value = false;                    }                });                scope.removeOption = function(){                    scope.attributes.radioItems.status = "overridden";                    if(scope.attributes.radioItems.value.length === 1){                        /*console.log('The last option can not be deleted');*/                        scope.attributes.currentIndex.value = 0;                        scope.attributes.currentItem = scope.attributes.radioItems.value[0];                    }else{                        var temp = scope.attributes.currentIndex.value;                        scope.attributes.radioItems.value.splice(temp, 1);                        if(temp === 0){                            scope.attributes.currentIndex.value = 0;                            scope.attributes.currentItem = scope.attributes.radioItems.value[0];                        }else{                            scope.attributes.currentIndex.value = temp - 1;                            scope.attributes.currentItem = scope.attributes.radioItems.value[scope.attributes.currentIndex.value];                        }                    }                    scope.activeOption();                };                scope.$watch('attributes.direction.value', function(newValue){                    scope.switchDirection(newValue);                });                scope.$watch('$gcscope[attributes.binding.value]', function (newVal) {                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        if(scope.attributes.isBindingPresent.value){                            var bindingString = scope.attributes.binding.value;                            if ( scope.attributes.dynamicPresent.value ) {                                eval("scope." + bindingString + "= newVal ;");                            } else {                                var bindingType = typeof newVal;                                if ( bindingType === 'boolean' || bindingType === 'number' ) {                                    scope.attributes.empty.value = '' + newVal;                                } else if ( bindingType === 'string' ) {                                    for( var i =0; i < scope.attributes.radioItems.value.length; i++ ){                                        var checkRadioItem = scope.attributes.radioItems.value[i].value;                                        if ( checkRadioItem.substring(1, checkRadioItem.length-1) === newVal ) {                                            scope.attributes.empty.value = "'" + newVal + "'";                                        }                                    }                                }                            }                        }                    }                });                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    basectrl.bindScopeVariable(scope, component.attributes.binding.value);                    basectrl.bindScopeVariable(scope, component.attributes.source.value);                    for (var i = 0; i < scope.attributes.radioItems.value.length; i++) {                        switch ( scope.attributes.radioItems.value[i].value ) {                            case 'true': scope.attributes.radioItems.value[i].value = true; break;                            case 'false': scope.attributes.radioItems.value[i].value = false; break;                        }                                            }                    switch ( scope.attributes.currentItem.value ) {                        case 'true': scope.attributes.currentItem.value = true; break;                        case 'false': scope.attributes.currentItem.value = false; break;                    }                }            });        }    }}]);dfxGControls.directive('dfxGcWebDatatable', ['$timeout', '$mdDialog', '$filter', '$http', function($timeout, $mdDialog, $filter, $http) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/table_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/table_design.html';            } else {                return '/gcontrols/web/table.html';            }        },        link: {            pre : function(scope, element, attrs, basectrl) {                var component = scope.getComponent(element);                scope.component_id = component.id;                scope.attributes = null;                var orderBy = $filter('orderBy');                var filterBy = $filter('filter');                scope.$gcscope = scope;                scope._selectedAllRows=false;                scope._selectedRows=[];                scope.dynamicPresent = false;                basectrl.init(scope, element, component, attrs, 'table').then(function(){                    scope.attributes.flex = { "value": 100 };                    scope.attributes.rangeStart = { "value": 1 };                    scope.attributes.tableRows = { "value": [] };                    scope.attributes.columnIndex = { "value": "" };                    scope.attributes.newId = { "value": "" };                    if(!scope.attributes.hasOwnProperty('flex')){scope.attributes.flex = {"value": 100}}                    if(!scope.attributes.hasOwnProperty('modulo')){scope.attributes.modulo = {"value":""}}                    scope.attributes.bindingClone.status = 'overridden';                    if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)){                        scope.attributes.bindingClone.value = [];//scope.$gcscope[scope.attributes.binding.value];                        scope.attributes.columnIndex.value = parseInt(scope.attributes.columnIndex.value);                        scope.attributes.newId.value = scope.attributes.columns.value.length + 1;                        scope.attributes.rowCount.value = parseInt(scope.attributes.rowCount.value);                        scope.attributes.stepsNumber.value = 3;                        scope.attributes.stepCounter.value = 1;                        scope.attributes.rangeEnd.value = parseInt(scope.attributes.rowCount.value);                        scope.attributes.rangeStart.value = 1;                        scope.attributes.modulo.value = 0;                        var originalBindingClone = [];                        if ( !scope.attributes.hasOwnProperty('filterable') ) { scope.attributes.filterable = { "value": false } }                        if ( !scope.attributes.hasOwnProperty('filterBy') ) { scope.attributes.filterBy = { "value": "" } }                        if ( !scope.attributes.hasOwnProperty('headerVisible') ) { scope.attributes.filterBy = { "headerVisible": true } }                        if (scope.attributes.checkBinding.value!='') {                            scope.dynamicPresent = true;                            scope._selectedRows = scope.$parent_scope[scope.attributes.checkBinding.value];                            scope.$watch( '$parent_scope[attributes.checkBinding.value]', function( newValue ) {                                if ( newValue ) {                                    scope._selectedRows = newValue;                                }                                if ( newValue.length!==0 && angular.equals( newValue, scope.attributes.bindingClone.value ) ) {                                    scope._selectedAllRows = true;                                } else {                                    scope._selectedAllRows = false;                                }                            });                        } else {                            scope._selectedRows = [];                        }                        scope.$watch(scope.attributes.binding.value, function(value) {                            var val = value || null;                            if (val) {                                if (scope.attributes.bindingClone.value == null) {                                    scope.attributes.bindingClone.value = [];                                } else {                                    scope.attributes.bindingClone.value.splice( 0, scope.attributes.bindingClone.value.length );                                }                                for (var i=0; i<val.length; i++) {                                    scope.attributes.bindingClone.value.push(val[i]);                                }                                scope.attributes.stepsNumber.value = (scope.attributes.bindingClone.value.length - scope.attributes.bindingClone.value.length % scope.attributes.rowCount.value)/scope.attributes.rowCount.value;                                originalBindingClone = scope.attributes.bindingClone.value;                            }                        }, true);                    }else{                        if(scope.attributes.columns.value.length === 0){                            for (var c = 1; c < 5; c++){                                var tempNumeric = '', tempAscending = '';                                switch (c){                                    case 1: tempNumeric = 'false'; tempAscending = 'false'; break;                                    case 2: tempNumeric = 'false'; tempAscending = 'true'; break;                                    case 3: tempNumeric = 'true'; tempAscending = 'false'; break;                                    case 4: tempNumeric = 'true'; tempAscending = 'true'; break;                                }                                var tempColumn = {                                    "header": "'Column"+c+"'",                                    "value": "",                                    "name": "column"+c+"",                                    "flex": 25,                                    "columnId":""+c+"",                                    "renderer": {                                        "name": "statictext",                                        "attributes": {                                            "name": { "value": "txtText"+c+"" },                                            "text": { "value": "$dfx_item[$dfx_column.value]" }                                        },                                        "children": []                                    },                                    "isNumeric": tempNumeric,                                    "isAscending": tempAscending,                                    "style": "",                                    "classes": "",                                    "dynamicClasses": ""                                }                                scope.attributes.columns.value.push(tempColumn);                            }                        }                        scope.attributes.columns.status = "overridden";                        if(scope.attributes.columnIndex.value === "") {                            scope.attributes.columnIndex.value = 0;                            scope.attributes.newId.value = scope.attributes.columns.value.length + 1;                            //scope.attributes.titleVisible.value = true;                            //scope.attributes.paging.value = true;                            //scope.attributes.rowCount.value = 3;                            scope.attributes.stepsNumber.value = 3;                            scope.attributes.stepCounter.value = 1;                            scope.attributes.rangeEnd.value = parseInt(scope.attributes.rowCount.value);                            scope.attributes.rangeStart.value = 1;                            scope.attributes.modulo.value = 0;                        }                    }                                        scope.fillRows = function(){                        scope.attributes.tableRows.value = [];                        for (var x = 0; x < 50; x++) {                            var obj = {};                            for (var y = 0; y < scope.attributes.columns.value.length; y++) {                                var key = scope.attributes.columns.value[y].value;                                if (scope.attributes.columns.value[y].isNumeric === "true") {                                    obj[key] = (1 + x) * 10 + y + 1;                                } else {                                    obj[key] = 'value' + ((1+x)*10 + y+1);                                }                            }                            scope.attributes.tableRows.value.push(obj);                        }                        //scope.addStyles();                    };                    scope.addStyles = function(){                        /*$timeout(function () {                            try{                                scope.headers = $('#' + scope.component_id + '> md-card > div:nth-child(2) > table > thead > tr').children();                                scope.rows = $('#' + scope.component_id + '> md-card > div:nth-child(2) > table > tbody').children();                                for(var i = 0; i < scope.attributes.columns.length; i++){                                    if(scope.attributes.columns[i].isNumeric === "true"){                                        $(scope.headers.eq(i+1)).removeClass('dt_first_column dt_last_column dt_left_align dt_first_column_none');                                        $(scope.headers.eq(i+1)).addClass('dt_right_align');                                    }else{                                        $(scope.headers.eq(i+1)).removeClass('dt_first_column dt_last_column dt_right_align dt_first_column_none');                                        $(scope.headers.eq(i+1)).addClass('dt_left_align');                                    }                                    if(i === scope.attributes.columns.length-1){                                        $(scope.headers.eq(i+1)).addClass('dt_last_column');                                    }                                }                                if(scope.attributes.checkOption.value !== 'none'){                                    $(scope.headers[1]).addClass('dt_first_column');                                }else{                                    $(scope.headers[0]).removeClass('dt_first_column');                                    $(scope.headers[0]).addClass('dt_first_column_none');                                }                                for(var j=0; j < scope.rows.length; j++){                                    var row = $(scope.rows[j]).children();                                    for(var k = 1; k < row.length; k++){                                        if(scope.attributes.columns[k-1].isNumeric === "true"){                                            $(row[k]).removeClass('dt_first_column dt_last_column dt_left_align dt_first_column_none dt_bold_html');                                            $(row[k]).addClass('dt_right_align');                                        }else{                                            $(row[k]).removeClass('dt_first_column dt_last_column dt_right_align dt_first_column_none dt_bold_html');                                            $(row[k]).addClass('dt_left_align');                                            if(scope.attributes.columns[k-1].type === "html"){                                                $(row[k]).addClass('dt_bold_html');                                            }                                        }                                        if(k === scope.attributes.columns.length){                                            $(row[k]).addClass('dt_last_column');                                        }                                    }                                    if(scope.attributes.checkOption.value !== 'none'){                                        $(row[1]).addClass('dt_first_column');                                    }else{                                        $(row[0]).removeClass('dt_first_column');                                        $(row[0]).addClass('dt_first_column_none');                                    }                                }                            }catch(e){                                console.log(e.message);                            }                        },0);*/                    };                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        scope.addStyles();                    }else{                        scope.fillRows();                    }                    scope.showColumnsEditor = function(ev) {                        $mdDialog.show({                            scope: scope.$new(),                            parent: angular.element(document.body),                            targetEvent: ev,                            clickOutsideToClose:true,                            ariaLabel: 'options-editor',                            templateUrl: '/gcontrols/web/table_columns_editor.html',                            onComplete: function() {                                scope.attributes.currentColumn = scope.attributes.columns.value[scope.attributes.columnIndex.value];                                $('.menu-structure li').eq(scope.attributes.columnIndex.value).addClass('active');                            },                            controller: function() {                                scope.closeDialog = function() {                                    $mdDialog.hide();                                }                            }                        });                    }                    scope.activeOption = function() {                        $timeout(function(){                            $('.menu-structure li').removeClass('active');                            $('.menu-structure li').eq( scope.attributes.columnIndex.value ).addClass('active');                        }, 0);                    }                    scope.selectOptionItem = function( index ) {                        scope.attributes.columnIndex.value = index;                        scope.attributes.currentColumn = scope.attributes.columns.value[scope.attributes.columnIndex.value];                        scope.activeOption();                    }                    scope.insertColumn = function(column){                        var temp = {                            "header": "'New Column'",                            "value": "property1",                            "name": "column1",                            "columnId":"",                            "renderer": {                              "name": "statictext",                              "attributes": {                                "name": { "value": "txtText1" },                                "text": { "value": "$dfx_item[$dfx_column.value]" }                              },                              "children": []                            }                        };                        var newId = scope.attributes.newId.value++;                        temp.columnId = newId;                        temp.value = 'property' + newId;                        temp.name = 'column' + newId;                        if ( scope.attributes.columns.value.length > 0 ) {                            scope.attributes.columnIndex.value = parseInt(scope.attributes.columnIndex.value)+1;                        } else {                            scope.attributes.columnIndex.value = 0;                        }                        scope.attributes.columns.value.splice(parseInt(scope.attributes.columnIndex.value)+1, 0, temp);                        scope.attributes.currentColumn = scope.attributes.columns.value[scope.attributes.columnIndex.value];                        scope.attributes.sortedBy.value = scope.attributes.columns.value[scope.attributes.columnIndex.value].value;                        scope.fillRows();                        scope.activeOption();                    };                    scope.moveColumnUp = function() {                        if ( scope.attributes.columnIndex.value > 0 ) {                            var movedColumn = scope.attributes.currentColumn,                                fromIndex = scope.attributes.columnIndex.value,                                toIndex = scope.attributes.columnIndex.value - 1;                            scope.attributes.columns.value.splice(fromIndex, 1);                            scope.attributes.columns.value.splice(toIndex, 0, movedColumn);                            --scope.attributes.columnIndex.value;                            scope.attributes.currentColumn = scope.attributes.columns.value[scope.attributes.columnIndex.value];                            scope.activeOption();                            $timeout(function(){                                scope.fillRows();                            }, 0);                        }                    }                    scope.moveColumnDown = function() {                        if ( scope.attributes.columnIndex.value < ( scope.attributes.columns.value.length - 1 )) {                            var movedColumn = scope.attributes.currentColumn,                                fromIndex = scope.attributes.columnIndex.value,                                toIndex = scope.attributes.columnIndex.value + 1;                            scope.attributes.columns.value.splice(fromIndex, 1);                            scope.attributes.columns.value.splice(toIndex, 0, movedColumn);                            ++scope.attributes.columnIndex.value;                            scope.attributes.currentColumn = scope.attributes.columns.value[scope.attributes.columnIndex.value];                            scope.activeOption();                            $timeout(function(){                                scope.fillRows();                            }, 0);                        }                    }                    scope.removeColumn = function(){                        if(scope.attributes.columns.value.length > 0){                            var temp = scope.attributes.columnIndex.value;                            if(scope.attributes.columnIndex.value > 0){                                scope.attributes.columnIndex.value = scope.attributes.columnIndex.value - 1;                            }                            scope.attributes.columns.value.splice(temp, 1);                            if ( scope.attributes.columns.value.length > 1 ) {                                scope.attributes.sortedBy.value = scope.attributes.columns.value[scope.attributes.columnIndex.value].value;                            } else {                                scope.attributes.sortedBy.value = '';                            }                            scope.attributes.currentColumn = scope.attributes.columns.value[scope.attributes.columnIndex.value];                            scope.fillRows();                            scope.activeOption();                        }                    };                    scope.updateSteps = function(){                        scope.attributes.rangeStart.value = 1;                        scope.attributes.rangeEnd.value = parseInt(scope.attributes.rowCount.value);                    }                    scope.plusStep = function(){                        if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                            if(scope.attributes.stepCounter.value <= scope.attributes.stepsNumber.value){                                scope.attributes.stepCounter.value++;                                if(scope.attributes.stepCounter.value === scope.attributes.stepsNumber.value+1){                                    scope.attributes.rangeEnd.value = scope.attributes.bindingClone.value.length;                                    scope.attributes.modulo.value = scope.attributes.bindingClone.value.length % scope.attributes.rowCount.value ;                                    if(scope.attributes.modulo.value!==0){                                        scope.attributes.rangeStart.value = scope.attributes.rangeEnd.value - scope.attributes.modulo.value + 1;                                    }else{                                        return;                                    }                                }else{                                    scope.attributes.modulo.value = 0;                                    scope.attributes.rangeEnd.value = scope.attributes.rowCount.value * scope.attributes.stepCounter.value;                                    scope.attributes.rangeStart.value = scope.attributes.rangeEnd.value - scope.attributes.rowCount.value + 1;                                }                            }                        }else{                            if(scope.attributes.stepCounter.value <= scope.attributes.stepsNumber.value){                                scope.attributes.stepCounter.value++;                                if(scope.attributes.stepCounter.value === scope.attributes.stepsNumber.value+1){                                    scope.attributes.rangeEnd.value = scope.attributes.tableRows.value.length;                                    scope.attributes.modulo.value = scope.attributes.tableRows.value.length % scope.attributes.rowCount.value ;                                    if(scope.attributes.modulo.value!==0){                                        scope.attributes.rangeStart.value = scope.attributes.rangeEnd.value - scope.attributes.modulo.value + 1;                                    }else{                                        return;                                    }                                }else{                                    scope.attributes.modulo.value = 0;                                    scope.attributes.rangeEnd.value = scope.attributes.rowCount.value * scope.attributes.stepCounter.value;                                    scope.attributes.rangeStart.value = scope.attributes.rangeEnd.value - scope.attributes.rowCount.value + 1;                                }                            }                        }                        scope.addStyles();                    };                    scope.minusStep = function(){                        if(scope.attributes.stepCounter.value > 1){                            scope.attributes.stepCounter.value-- ;                            scope.attributes.rangeEnd.value = scope.attributes.rowCount.value * scope.attributes.stepCounter.value;                            scope.attributes.rangeStart.value = scope.attributes.rangeEnd.value - scope.attributes.rowCount.value + 1;                        }                        scope.addStyles();                    };                    scope.sortOn = function (arr, prop, reverse, numeric) {                         if (!prop || !arr) {                            return arr                         }                         if(arr.constructor !== Array){                            arr = [].slice.call(arr) ;                         }                         var sort_by = function (field, rev, primer) {                            return function (a, b) {                             a = primer(a[field]), b = primer(b[field]);                             return ((a < b) ? -1 : ((a > b) ? 1 : 0)) * (rev ? -1 : 1);                            }                         }                         if (numeric) {                                 arr.sort(sort_by(prop, reverse, function (a) {                                 return parseFloat(String(a).replace(/[^0-9.-]+/g, ''));                             }));                         } else {                             arr.sort(sort_by(prop, reverse, function (a) {                             return String(a).toUpperCase();                             }));                         }                     };                    scope.changeIndexAndSortDir = function(index){                        if(scope.attributes.columns.value[index].value === scope.attributes.sortedBy.value){                            if(scope.attributes.columns.value[index].isAscending === "true"){                                scope.attributes.columns.value[index].isAscending = "false";                            } else{                                scope.attributes.columns.value[index].isAscending = "true";                            }                        }                        scope.attributes.columnIndex.value = index;                        scope.attributes.sortedBy.value = scope.attributes.columns.value[index].value;                        if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                            scope.attributes.bindingClone.value = orderBy(scope.attributes.bindingClone.value, scope.attributes.sortedBy.value, scope.attributes.columns.value[index].isAscending === "true");                            originalBindingClone = scope.attributes.bindingClone.value;                        }                        scope.addStyles();                    };                    scope.isSelectedRows = function() {                        return scope._selectedAllRows;                    };                    scope.isSelectedRow = function(item) {                        return (scope._selectedRows.indexOf(item)>-1);                    };                    scope.toggleSelectRows = function() {                        scope._selectedAllRows = !scope._selectedAllRows;                        var nb_rows = (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) ? scope.attributes.bindingClone.value.length : scope.attributes.tableRows.value.length;                        scope._selectedRows.splice(0, scope._selectedRows.length);                        if (scope._selectedAllRows) {                            for (var i=0; i<nb_rows; i++) {                                scope._selectedRows.push(scope.attributes.bindingClone.value[i]);                            }                        }                    };                    scope.toggleSelectRow = function(item) {                        if (scope._selectedAllRows) {                            scope._selectedAllRows = false;                        }                        var pos_index = scope._selectedRows.indexOf(item);                        if (pos_index == -1) {                            scope._selectedRows.push(item);                        } else {                            scope._selectedRows.splice(pos_index, 1);                        }                        if ( !angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit) && scope.dynamicPresent ) {                            scope.$parent_scope[scope.attributes.checkBinding.value] = scope._selectedRows;                        }                    };                    scope.$watch('attributes.rowCount.value', function(newValue, oldValue){                        if (newValue!=null) {                            // if (newValue !== oldValue) {                                scope.attributes.rowCount.status = 'overridden';                                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                                    scope.attributes.stepsNumber.value = (scope.attributes.bindingClone.value.length - scope.attributes.bindingClone.value.length % newValue)/newValue;                                    scope.attributes.stepCounter.value = 1;                                    scope.attributes.rangeEnd.value = newValue;                                    scope.attributes.rangeStart.value = 1;                                    scope.addStyles();                                } else {                                    scope.attributes.stepsNumber.value = (scope.attributes.tableRows.value.length - scope.attributes.tableRows.value.length % newValue)/newValue;                                    scope.attributes.stepCounter.value = 1;                                    scope.attributes.rangeEnd.value = newValue;                                    scope.attributes.rangeStart.value = 1;                                    scope.addStyles();                                }                            // }                        }                    });                    scope.filterTableData = function( filterQuery ) {                        if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)){                            if ( filterQuery !== '' ) {                                scope.attributes.bindingClone.value = filterBy(originalBindingClone, filterQuery, 'strict');                            } else {                                scope.attributes.bindingClone.value = originalBindingClone;                            }                            $timeout(function(){                                scope.attributes.rangeStart.value = 1;                                scope.attributes.stepCounter.value = 1;                                scope.attributes.rangeEnd.value = parseInt(scope.attributes.rowCount.value);                            }, 0);                        }                    }                    scope.changeRenderer = function(index) {                        var attributes = null;                        var elementIndex = index ? index : scope.attributes.columnIndex.value;                        $http.get( '/gcontrols/web/'+scope.attributes.columns.value[elementIndex].renderer.name+'.json' ).success( function (data) {                            attributes = data;                        }).then( function() {                            scope.attributes.columns.value[elementIndex].renderer.attributes = attributes;                        });                    };                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        basectrl.bindScopeVariable(scope, component.attributes.binding.value);                    }                    scope.changeWidth = function(){                        $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                    };                    if (!angular.isDefined(attrs.dfxGcEdit)) {                        scope.changeWidth();                    }                });            }        }    }}]);dfxGControls.directive('dfxGcWebDatepicker', ['$timeout', function($timeout) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/datepicker_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/datepicker_design.html';            } else {                return '/gcontrols/web/datepicker.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.$parent.getComponent(element);            scope.dp_input;            basectrl.init(scope, element, component, attrs, 'datepicker').then(function(){                if ( !scope.attributes.hasOwnProperty('flex') ) { scope.attributes.flex = { "value": 20 }; }                                scope.attributes.bindingDate.status = "overridden";                scope.attributes.ranged.status = "overridden";                scope.attributes.designDate.value = new Date();                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    if(scope.attributes.bindingExpression.value === ""){                        scope.attributes.bindingDate.value = new Date();                    }else{                        try{                            scope.attributes.bindingDate.value = eval(scope.attributes.bindingExpression.value);                        }catch(e){                            scope.attributes.bindingDate.value = eval('scope.' + scope.attributes.bindingExpression.value);                            scope.attributes.bindingDate.value = new Date(scope.attributes.bindingDate.value);                        }                    }                }else{                    scope.minDate = new Date(                        scope.attributes.designDate.value.getFullYear(),                        scope.attributes.designDate.value.getMonth() - scope.attributes.ranged.monthsBefore,                        scope.attributes.designDate.value.getDate());                    scope.maxDate = new Date(                        scope.attributes.designDate.value.getFullYear(),                        scope.attributes.designDate.value.getMonth() + scope.attributes.ranged.monthsAfter,                        scope.attributes.designDate.value.getDate());                }                if(!scope.attributes.labelClass){                    scope.attributes.labelClass = 'dp-label-focus-off';                }                scope.$watch('attributes.ranged.monthsBefore', function(monthsBefore){                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        scope.minDate = new Date(                            eval(scope.attributes.bindingDate.value).getFullYear(),                            eval(scope.attributes.bindingDate.value).getMonth() - monthsBefore,                            eval(scope.attributes.bindingDate.value).getDate());                    }else{                        scope.minDate = new Date(                            eval(scope.attributes.designDate.value).getFullYear(),                            eval(scope.attributes.designDate.value).getMonth() - monthsBefore,                            eval(scope.attributes.designDate.value).getDate());                    }                });                scope.$watch('attributes.ranged.monthsAfter', function(monthsAfter){                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        scope.maxDate = new Date(                            eval(scope.attributes.bindingDate.value).getFullYear(),                            eval(scope.attributes.bindingDate.value).getMonth() + monthsAfter,                            eval(scope.attributes.bindingDate.value).getDate());                    }else{                        scope.maxDate = new Date(                            eval(scope.attributes.designDate.value).getFullYear(),                            eval(scope.attributes.designDate.value).getMonth() + monthsAfter,                            eval(scope.attributes.designDate.value).getDate());                    }                    scope.attributes.alignment.status = "overridden" ;                });                scope.$watch('attributes.alignment.value', function(newValue){                    $timeout(function(){                            if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                            var preview_wrapper = '#' + scope.component_id;                            $(preview_wrapper).addClass('flex-'+ scope.attributes.flex.value) ;                        }                    },0);                    scope.setAlignment(newValue);                });                scope.setAlignment = function(alignment){                    $timeout(function(){                        var dp_input = '#' + scope.component_id + '> form > div > div > md-datepicker > div.md-datepicker-input-container > input' ;                        $(dp_input).css('text-align', alignment);                    },0)                };                $timeout(function () {                    try{                        scope.dp_input = '#' + scope.component_id + '> form > div > div > md-datepicker > div.md-datepicker-input-container > input';                        $(scope.dp_input).focus(function(){                            scope.attributes.labelClass = 'dp-label-focus-on';                            scope.$apply(function(){                            });                        });                        $(scope.dp_input).blur(function(){                            scope.attributes.labelClass = 'dp-label-focus-off';                            scope.$apply(function(){                            });                        });                    }catch(e){                        /*console.log(e.message);*/                    }                },0);                scope.changeWidth = function(){                    $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                };                if (!angular.isDefined(attrs.dfxGcEdit)) {                    scope.changeWidth();                }            });        }    }}]);dfxGControls.directive('dfxGcWebButton', ['$timeout', '$compile', '$filter', function($timeout, $compile, $filter) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/button_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/button_design.html';            } else {                return '/gcontrols/web/button.html';            }        },        link: {            pre: function(scope, element, attrs, basectrl) {                var component = scope.getComponent(element);                scope.component_id = component.id;                scope.attributes = null;                basectrl.init(scope, element, component, attrs, 'button').then(function() {                    scope.attributes.dynamicPresent = { "value": false, "status": "overridden" },                    scope.attributes.dynamic.status = "overridden";                    scope.attributes.icon.status = "overridden";                    scope.attributes.layoutType = { "value": "none" };                    scope.component_class = attrs.id;                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        if(scope.attributes.dynamicPresent.value){                            scope.dynamicItems = eval('scope.' + scope.attributes.dynamic.value);                            try{                                if(scope.dynamicItems.constructor === Array ){                                    if(scope.dynamicItems.length > 0){                                        scope.attributes.dynamicPresent.value = true;                                    }else{                                        scope.attributes.dynamicPresent.value = false;                                    }                                }else{                                    scope.attributes.dynamicPresent.value = false;                                }                            }catch(e){                                scope.attributes.dynamicPresent.value = false;                            }                        }else{                            scope.attributes.dynamicPresent.value = false;                        }                    }                    if ( typeof scope.attributes.icon === 'string' ) {                         var tempIcon = scope.attributes.icon;                        scope.attributes.icon = {                            "value": tempIcon,                             "type": scope.attributes.hasOwnProperty('iconType') ? scope.attributes.iconType : 'fa-icon'                        }                    }                    if ( !scope.attributes.icon.hasOwnProperty('size') ) { scope.attributes.icon.size = 21; }                      $timeout(function(){                        if (scope.attributes.icon.value.indexOf("'") === -1 && scope.attributes.icon.value !== '' && scope.attributes.icon.type === 'fa-icon' ) {                            if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) {                                $('#' + component.id).find('md-icon').attr('class','fa fa-home');                            }                        }                    }, 0);                    if ( !scope.attributes.icon.hasOwnProperty('position') ) {                        scope.attributes.icon.position = scope.attributes.position ? scope.attributes.position.value : 'left';                        scope.attributes.icon.style = "";                        scope.attributes.icon.class = "";                        scope.attributes.singleMenu = {"button": { "style": "", "class": "" }, "icon": { "size": 16, "style": "", "class": ""}}                        delete scope.attributes.position;                    }                    if ( scope.attributes.classes.value.indexOf('md-raised') > -1 ) { scope.attributes.classes.value = scope.attributes.classes.value.replace('md-raised', ""); }                    if ( scope.attributes.classes.value.indexOf('md-primary') > -1 ) { scope.attributes.classes.value = scope.attributes.classes.value.replace('md-primary', ""); }                    scope.ifShowIconTypes = function( icon, type ) {                                            var regexp = /(^\')(.*)(\'$)/gm, filtered = regexp.exec( icon );                        if ( icon && ( icon.indexOf('+') >= 0 ) ) { filtered = false; }                        if ( icon === '' ) { filtered = true; }                        if ( icon.indexOf("'") === 0 && icon.indexOf('+') === -1 && icon.charAt(icon.length-1) === "'" && !type ) {                             icon.indexOf("'fa-") === 0 ? scope.attributes.icon.type = 'fa-icon' : scope.attributes.icon.type = 'svg-icon';                         } else if ( icon.indexOf("'") === 0 && icon.indexOf('+') === -1 && icon.charAt(icon.length-1) === "'" && type !== '' ) {                            switch ( type ) {                                case 'checked': icon.indexOf("'fa-") === 0 ? scope.attributes.state.checkedIcon.type = 'fa-icon' : scope.attributes.state.checkedIcon.type = 'svg-icon'; break;                                case 'unchecked': icon.indexOf("'fa-") === 0 ? scope.attributes.state.uncheckedIcon.type = 'fa-icon' : scope.attributes.state.uncheckedIcon.type = 'svg-icon'; break;                                case 'waiting': icon.indexOf("'fa-") === 0 ? scope.attributes.waiting.icon.type = 'fa-icon' : scope.attributes.waiting.icon.type = 'svg-icon'; break;                            }                        }                        if ( !type ) {                            scope.showIconTypes = filtered ? false : true;                            } else if ( type !== '' ) {                            switch ( type ) {                                case 'checked': scope.showCheckedIconTypes = filtered ? false : true; break;                                case 'unchecked': scope.showUncheckedIconTypes = filtered ? false : true; break;                                case 'waiting': scope.showWaitingIconTypes = filtered ? false : true; break;                            }                        }                                            }                    scope.ifShowIconTypes(scope.attributes.icon.value);                    var singleMenuItem = '<md-button ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" ng-click="{{itemClick}}" class="dfx-menu-button {{attributes.singleMenu.class}}" style="{{attributes.singleMenu.style}}" aria-label="iconbar-button" >'+                            '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-menu-button-icon {{attributes.singleMenu.icon.class}}" style="font-size:{{attributes.singleMenu.icon.size}}px; {{attributes.singleMenu.icon.style}}"></md-icon>'+                            '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.singleMenu.icon.size}}" class="dfx-menu-button-icon {{attributes.singleMenu.icon.class}}" style="{{attributes.singleMenu.icon.style}}"></ng-md-icon>'+                            '<span>{{itemLabel}}</span>'+                            '<span class="md-alt-text">{{itemShortcut}}</span>'+                            '<small ng-if="{{ifItemNotification}}">{{itemNotification}}</small>'+                        '</md-button>',                        iconbarMenuItem =   '<md-menu-item ng-if="{{itemDisplay}}">';                    var buildNextLevel = function (nextLevel) {                        for (var i = 0; i < nextLevel.length; i++) {                            if ( nextLevel[i].hasOwnProperty('icon') && typeof nextLevel[i].icon === 'string' ) {                                 var tempIcon = nextLevel[i].icon;                                nextLevel[i].icon = {                                    "value": tempIcon,                                     "type": nextLevel[i].hasOwnProperty('iconType') ? nextLevel[i].iconType : 'fa-icon'                                }                            }                            if ( nextLevel[i].menuItems.value.length > 0 ) {                                next = nextLevel[i].menuItems.value;                                if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) {                                    var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', true);                                } else {                                    var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display);                                }                                scope.iconBar = scope.iconBar + iconbarItem + '<md-menu>';                                                            if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) {                                    var singleMenu = singleMenuItem                                        .replace('{{ifFaIcon}}', nextLevel[i].icon.value.length > 0 && nextLevel[i].icon.type === 'fa-icon' ? true : false )                                        .replace('{{ifSvgIcon}}', nextLevel[i].icon.value.length > 0 && nextLevel[i].icon.type === 'svg-icon' ? true : false )                                        .replace('{{faIcon}}', nextLevel[i].icon.value.indexOf("'") == -1 ? 'fa-home' : eval(nextLevel[i].icon.value.replace(/"/g, '\'')) )                                        .replace('{{svgIcon}}', nextLevel[i].icon.value.indexOf("'") == -1 ? 'home' : eval(nextLevel[i].icon.value.replace(/"/g, '\'')) )                                        .replace('{{itemLabel}}', $filter('checkExpression')(nextLevel[i].label.replace(/"/g, '\'')))                                        .replace('{{itemShortcut}}', nextLevel[i].shortcut.replace(/"/g, '\''))                                        .replace('{{ifItemNotification}}', nextLevel[i].notification !=='' ? true : false )                                        .replace('{{itemNotification}}', nextLevel[i].notification )                                        .replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display)                                        .replace('{{itemDisabled}}', typeof nextLevel[i].disabled === 'string' ? nextLevel[i].disabled.replace(/"/g, '\'') : nextLevel[i].disabled)                                        .replace('{{itemClick}}', '$mdOpenMenu();'+nextLevel[i].onclick.replace(/"/g, '\''));                                } else {                                    var singleMenu = singleMenuItem                                        .replace('{{ifFaIcon}}', nextLevel[i].icon.value.length > 0 && nextLevel[i].icon.type === 'fa-icon' ? true : false )                                        .replace('{{ifSvgIcon}}', nextLevel[i].icon.value.length > 0 && nextLevel[i].icon.type === 'svg-icon' ? true : false )                                        .replace('{{faIcon}}', nextLevel[i].icon.value.indexOf("'") == -1 ? '{{'+nextLevel[i].icon.value+'}}' : eval(nextLevel[i].icon.value.replace(/"/g, '\'')) )                                        .replace('{{svgIcon}}', nextLevel[i].icon.value.indexOf("'") == -1 ? '{{'+nextLevel[i].icon.value+'}}' : eval(nextLevel[i].icon.value.replace(/"/g, '\'')) )                                        .replace('{{itemLabel}}', '{{'+nextLevel[i].label.replace(/"/g, '\'')+'}}' )                                        .replace('{{itemShortcut}}', nextLevel[i].shortcut)                                        .replace('{{ifItemNotification}}', nextLevel[i].notification !=='' ? true : false )                                        .replace('{{itemNotification}}', '{{'+nextLevel[i].notification+'}}' )                                        .replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display)                                        .replace('{{itemDisabled}}', typeof nextLevel[i].disabled === 'string' ? nextLevel[i].disabled.replace(/"/g, '\'') : nextLevel[i].disabled)                                        .replace('{{itemClick}}', '$mdOpenMenu();'+nextLevel[i].onclick.replace(/"/g, '\''));                                }                                scope.iconBar = scope.iconBar + singleMenu +'<md-menu-content width="4">';                                buildNextLevel(next);                                scope.iconBar = scope.iconBar + '</md-menu-content></md-menu></md-menu-item>';                            } else {                                if ( nextLevel[i].divider === true ) {                                    scope.iconBar = scope.iconBar + '<md-menu-divider></md-menu-divider>';                                } else {                                    if ( !nextLevel[i].hasOwnProperty('iconType') && !nextLevel[i].divider && !nextLevel[i].title) { nextLevel[i].iconType = 'fa-icon'; }                                    if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) {                                        var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', true);                                    } else {                                        var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display);                                    }                                    scope.iconBar = scope.iconBar + iconbarItem;                                    if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) {                                        var singleMenu = singleMenuItem                                            .replace('{{ifFaIcon}}', nextLevel[i].icon.value.length > 0 && nextLevel[i].icon.type === 'fa-icon' ? true : false )                                            .replace('{{ifSvgIcon}}', nextLevel[i].icon.value.length > 0 && nextLevel[i].icon.type === 'svg-icon' ? true : false )                                            .replace('{{faIcon}}', nextLevel[i].icon.value.indexOf("'") == -1 ? 'fa-home' : eval(nextLevel[i].icon.value.replace(/"/g, '\'')) )                                            .replace('{{svgIcon}}', nextLevel[i].icon.value.indexOf("'") == -1 ? 'home' : eval(nextLevel[i].icon.value.replace(/"/g, '\'')) )                                            .replace('{{itemLabel}}', $filter('checkExpression')(nextLevel[i].label.replace(/"/g, '\'')))                                            .replace('{{itemShortcut}}', nextLevel[i].shortcut.replace(/"/g, '\''))                                            .replace('{{ifItemNotification}}', nextLevel[i].notification !=='' ? true : false )                                            .replace('{{itemNotification}}', nextLevel[i].notification )                                            .replace('{{itemDisplay}}', true)                                            .replace('{{itemDisabled}}', typeof nextLevel[i].disabled === 'string' ? nextLevel[i].disabled.replace(/"/g, '\'') : nextLevel[i].disabled)                                            .replace('{{itemClick}}', nextLevel[i].onclick.replace(/"/g, '\''));                                    } else {                                        var singleMenu = singleMenuItem                                            .replace('{{ifFaIcon}}', nextLevel[i].icon.value.length > 0 && nextLevel[i].icon.type === 'fa-icon' ? true : false )                                            .replace('{{ifSvgIcon}}', nextLevel[i].icon.value.length > 0 && nextLevel[i].icon.type === 'svg-icon' ? true : false )                                            .replace('{{faIcon}}', nextLevel[i].icon.value.indexOf("'") == -1 ? '{{'+nextLevel[i].icon.value+'}}' : eval(nextLevel[i].icon.value.replace(/"/g, '\'')) )                                            .replace('{{svgIcon}}', nextLevel[i].icon.value.indexOf("'") == -1 ? '{{'+nextLevel[i].icon.value+'}}' : eval(nextLevel[i].icon.value.replace(/"/g, '\'')) )                                            .replace('{{itemLabel}}', '{{'+nextLevel[i].label.replace(/"/g, '\'')+'}}' )                                            .replace('{{itemShortcut}}', nextLevel[i].shortcut.replace(/"/g, '\''))                                            .replace('{{ifItemNotification}}', nextLevel[i].notification !=='' ? true : false )                                            .replace('{{itemNotification}}', '{{'+nextLevel[i].notification+'}}' )                                            .replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display)                                            .replace('{{itemDisabled}}', typeof nextLevel[i].disabled === 'string' ? nextLevel[i].disabled.replace(/"/g, '\'') : nextLevel[i].disabled)                                            .replace('{{itemClick}}', nextLevel[i].onclick.replace(/"/g, '\''));                                    }                                    scope.iconBar = scope.iconBar + singleMenu + '</md-menu-item>';                                }                            }                        };                        scope.iconBarMenu = scope.iconBar;                    }                    scope.buttonMenuBuilder = function() {                        if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign)) {                                if(scope.attributes.dynamicPresent.value){                                    scope.iconbarArray = scope.dynamicItems;                                    scope.attributes.menuItems.value = scope.iconbarArray;                                }else{                                    scope.iconbarArray = scope.attributes.menuItems.value;                                    scope.attributes.menuItems.value = scope.iconbarArray;                                }                            }else{                                scope.iconbarArray = scope.attributes.menuItems.value;                            }                        if ( scope.iconbarArray.length > 0 ) {                            scope.iconBar = '';                            buildNextLevel(scope.iconbarArray);                            $timeout(function() {                                $('.' + scope.component_class + '_button_menu').empty();                                if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign)) {                                    $('.' + scope.component_class + '_button_menu').load('/gcontrols/web/button_menu.html', function(){                                        $('.' + scope.component_class + '_button_menu md-menu-content').html(scope.iconBarMenu);                                        $compile($('.' + scope.component_class + '_button_menu').contents())(scope);                                    });                                } else {                                    if ( scope.component_class.indexOf('renderer') === -1 ) {                                        $('.' + scope.component_class + '_button_menu').load('/gcontrols/web/button_menu_design.html', function(){                                            $('.' + scope.component_class + '_button_menu md-menu-content.root-content').html(scope.iconBarMenu);                                            $compile($('.' + scope.component_class + '_button_menu').contents())(scope);                                        });                                    } else {                                        $timeout(function() {                                            var tableButtons = $('.' + scope.component_class + '_button_menu');                                            $(tableButtons).each(function(index, element) {                                                tableButtons.eq(index).empty().load('/gcontrols/web/button_menu_design.html', function() {                                                    tableButtons.eq(index).find('md-menu-content.root-menu-container').html(scope.iconBarMenu);                                                    $compile(tableButtons.eq(index).contents())(scope);                                                });                                            });                                        }, 0, false);                                    }                                }                            }, 0);                        }                    }                    scope.$watch('attributes.menuItems.value', function(newVal, oldVal) {                        if ( newVal != null && !angular.equals(newVal, oldVal) ) {                            $timeout(function() {                                scope.buttonMenuBuilder();                            }, 0, false);                        }                    }, true);                    scope.$watch("attributes.dynamic.value", function(newValue){                        $timeout(function(){                            if (scope.attributes.dynamicPresent==null) {                                scope.attributes.dynamicPresent = { "value": "" };                                scope.attributes.dynamic = { "value": "" };                            }                            if(typeof newValue !== "undefined" && newValue !== null && newValue !== ""){                                scope.attributes.dynamicPresent.value = true;                            }else{                                scope.attributes.dynamicPresent.value = false;                            }                        }, 0);                    });                    scope.buttonMenuBuilder();                    if ( !scope.attributes.hasOwnProperty('waiting') ) {                        scope.attributes.waiting = {                            "value": "",                             "icon": { "value": "'fa-spinner'", "type": "fa-icon", "style": "", "class": "fa-pulse" }                        }                    }                  });            }        }    }}]);dfxGControls.directive('dfxGcWebIcon', ['$http', '$mdDialog', '$timeout', '$filter', function($http, $mdDialog, $timeout, $filter) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/icon_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/icon_design.html';            } else {                return '/gcontrols/web/icon.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'icon').then(function() {                scope.attributes.icon.status = "overridden";                scope.attributes.state.status = "overridden";                scope.attributes.waiting.status = "overridden";                if ( typeof scope.attributes.icon === 'string' ) {                     var tempIcon = scope.attributes.icon;                    scope.attributes.icon = {                        "value": tempIcon,                         "type": scope.attributes.hasOwnProperty('iconType') ? scope.attributes.iconType : 'fa-icon'                    }                }                if ( !scope.attributes.icon.hasOwnProperty('size') ) {                    if ( scope.attributes.size ) {                        scope.attributes.icon.size = scope.attributes.size.value;                         delete scope.attributes.size;                    } else {                        scope.attributes.icon.size = 36;                    }                                        }                     if ( scope.attributes.state.icon ) {                    scope.attributes.state.icon.color = ""; scope.attributes.state.checkedIcon.color = ""; scope.attributes.state.uncheckedIcon.color = "";                }                scope.ifShowIconTypes = function( icon, type ) {                                        var regexp = /(^\')(.*)(\'$)/gm, filtered = regexp.exec( icon );                    if ( icon && ( icon.indexOf('+') >= 0 ) ) { filtered = false; }                    if ( icon === '' ) { filtered = true; }                    if ( icon.indexOf("'") === 0 && icon.indexOf('+') === -1 && icon.charAt(icon.length-1) === "'" && !type ) {                         icon.indexOf("'fa-") === 0 ? scope.attributes.icon.type = 'fa-icon' : scope.attributes.icon.type = 'svg-icon';                     } else if ( icon.indexOf("'") === 0 && icon.indexOf('+') === -1 && icon.charAt(icon.length-1) === "'" && type !== '' ) {                        switch ( type ) {                            case 'checked': icon.indexOf("'fa-") === 0 ? scope.attributes.state.checkedIcon.type = 'fa-icon' : scope.attributes.state.checkedIcon.type = 'svg-icon'; break;                            case 'unchecked': icon.indexOf("'fa-") === 0 ? scope.attributes.state.uncheckedIcon.type = 'fa-icon' : scope.attributes.state.uncheckedIcon.type = 'svg-icon'; break;                            case 'waiting': icon.indexOf("'fa-") === 0 ? scope.attributes.waiting.icon.type = 'fa-icon' : scope.attributes.waiting.icon.type = 'svg-icon'; break;                        }                    }                    if ( !type ) {                        scope.showIconTypes = filtered ? false : true;                        } else if ( type !== '' ) {                        switch ( type ) {                            case 'checked': scope.showCheckedIconTypes = filtered ? false : true; break;                            case 'unchecked': scope.showUncheckedIconTypes = filtered ? false : true; break;                            case 'waiting': scope.showWaitingIconTypes = filtered ? false : true; break;                        }                    }                                    }                scope.ifShowIconTypes(scope.attributes.icon.value);                scope.checkState = function(){                    if ( scope.attributes.state.binding !== '' ) {                        if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                            if ( scope.attributes.state.binding === 'true' || scope.attributes.state.binding === 'false' ) {                                switch ( scope.attributes.state.binding ) {                                    case 'true': scope.attributes.state.binding = 'false'; scope.attributes.state.icon = scope.attributes.state.uncheckedIcon; break;                                    case 'false': scope.attributes.state.binding = 'true'; scope.attributes.state.icon = scope.attributes.state.checkedIcon; break;                                }                            } else {                                if ( scope.$gcscope[scope.attributes.state.binding] || !scope.$gcscope[scope.attributes.state.binding] ) {                                    if ( scope.$gcscope[scope.attributes.state.binding] === 'true' ) {                                        scope.$gcscope[scope.attributes.state.binding] = 'false'; scope.attributes.state.icon = scope.attributes.state.uncheckedIcon;                                    } else if ( scope.$gcscope[scope.attributes.state.binding] === true ) {                                        scope.$gcscope[scope.attributes.state.binding] = false; scope.attributes.state.icon = scope.attributes.state.uncheckedIcon;                                    } else if ( scope.$gcscope[scope.attributes.state.binding] === 'false' ) {                                        scope.$gcscope[scope.attributes.state.binding] = 'true'; scope.attributes.state.icon = scope.attributes.state.checkedIcon;                                    } else if ( !scope.$gcscope[scope.attributes.state.binding] ) {                                        scope.$gcscope[scope.attributes.state.binding] = true; scope.attributes.state.icon = scope.attributes.state.checkedIcon;                                    }                                }                             }                        } else {                            switch ( scope.attributes.state.binding ) {                                case 'true': scope.attributes.state.binding = 'false'; scope.attributes.state.icon = scope.attributes.state.uncheckedIcon; break;                                case 'false': scope.attributes.state.binding = 'true'; scope.attributes.state.icon = scope.attributes.state.checkedIcon; break;                            }                        }                    }                 }                if ( !scope.attributes.hasOwnProperty('waiting') ) {                    scope.attributes.waiting = {                        "value": "",                         "autoDisabled": false,                        "icon": { "value": "'fa-spinner'", "type": "fa-icon", "style": "", "class": "fa-pulse" }                    }                }                                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    if ( scope.attributes.state.binding !== '' && scope.attributes.state.binding !== 'true' && scope.attributes.state.binding !== 'false' ) {                        basectrl.bindScopeVariable(scope, component.attributes.state.binding);                        if ( scope.$gcscope[scope.attributes.state.binding] === true || scope.$gcscope[scope.attributes.state.binding] === 'true' ) {                            scope.attributes.state.icon = scope.attributes.state.checkedIcon;                        } else if ( scope.$gcscope[scope.attributes.state.binding] === 'false' || !scope.$gcscope[scope.attributes.state.binding] ) {                            scope.attributes.state.icon = scope.attributes.state.uncheckedIcon;                        }                    } else {                        if ( scope.attributes.state.binding === 'true' || scope.attributes.state.binding === 'false' ) {                            switch ( scope.attributes.state.binding ) {                                case 'true': scope.attributes.state.icon = scope.attributes.state.checkedIcon; break;                                case 'false': scope.attributes.state.icon = scope.attributes.state.uncheckedIcon; break;                            }                        }                    }                                    } else {                    scope.attributes.state.icon = scope.attributes.state.checkedIcon;                }            });        }    }}]);dfxGControls.directive('dfxGcWebProgressbar', function() {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/progress_bar_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/progress_bar_design.html';            } else {                return '/gcontrols/web/progress_bar.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'progressbar').then(function() {                scope.attributes.flex.status = "overridden";                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    basectrl.bindScopeVariable( scope, component.attributes.binding.value );                }            });        }    }});dfxGControls.directive('dfxGcWebGooglemap',['$timeout', function( $timeout ) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/google_map_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/google_map_design.html';            } else {                return '/gcontrols/web/google_map.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'googlemap').then(function() {                scope.attributes.flex.status = "overridden";                var map_id = 'map' + attrs.id;                    $timeout(function () {                        if ($('#'+map_id).is(':empty')) {                            (function initMap() {                                if (typeof google != 'undefined') {                                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                                        basectrl.bindScopeVariable( scope, component.attributes.binding.value );                                        var locations = scope.$gcscope[scope.attributes.binding.value];                                        var map = new google.maps.Map(document.getElementById(map_id), {                                            center: {lat: -34.397, lng: 150.644},                                            zoom: 8                                        });                                        if (typeof locations != 'undefined') {                                            var infowindow = new google.maps.InfoWindow;                                            var marker, i;                                            var bounds = new google.maps.LatLngBounds();                                            for (i = 0; i < locations.length; i++) {                                                marker = new google.maps.Marker({                                                    position: new google.maps.LatLng(locations[i].latitude, locations[i].longitude),                                                    icon: locations[i].icon,                                                    map: map                                                });                                                google.maps.event.addListener(marker, 'click', (function (marker, i) {                                                    return function () {                                                        infowindow.setContent(locations[i].description);                                                        infowindow.open(map, marker);                                                    }                                                })(marker, i));                                                bounds.extend(new google.maps.LatLng(locations[i].latitude, locations[i].longitude));                                            }                                            map.setCenter(bounds.getCenter());                                            map.fitBounds(bounds);                                            map.setZoom(map.getZoom() - 1);                                        }                                    } else {                                        var map = new google.maps.Map(document.getElementById(map_id), {                                            center: {lat: -34.397, lng: 150.644},                                            draggable: false,                                            zoomControl: false,                                            scrollwheel: false,                                            disableDoubleClickZoom: true,                                            zoom: 8                                        });                                    }                                }                            }());                        }                    }, 0);            });        }    }}]);dfxGControls.directive('dfxGcWebIconbar', ['$mdMenu', '$timeout', '$compile', '$filter', function($mdMenu, $timeout, $compile, $filter) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/iconbar_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/iconbar_design.html';            } else {                return '/gcontrols/web/iconbar.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'iconbar').then(function(){                scope.attributes.dynamicPresent = { "value": false };                scope.attributes.dynamicPresent.status = "overridden";                if (scope.attributes.dynamic.value.length>0){scope.attributes.dynamic.status = "overridden";}                scope.attributes.layoutType = { "value": "none" };                scope.attributes.statable = true;                scope.attributes.menuItemsType.status = "overridden";                scope.attributes.menuItemNames.status = "overridden";                scope.itemNames = scope.attributes.menuItemNames.value;                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    if(scope.attributes.dynamicPresent.value){                        scope.dynamicItems = eval('scope.' + scope.attributes.dynamic.value);                        try{                            if(scope.dynamicItems.constructor === Array ){                                if(scope.dynamicItems.length > 0){                                    scope.attributes.dynamicPresent.value = true;                                }else{                                    scope.attributes.dynamicPresent.value = false;                                }                            }else{                                scope.attributes.dynamicPresent.value = false;                            }                        }catch(e){                            scope.attributes.dynamicPresent.value = false;                        }                    }else{                        scope.attributes.dynamicPresent.value = false;                    }                }                if ( !scope.attributes.hasOwnProperty('rootMenu') ) {                    scope.attributes.rootMenu = {                        "button": { "style": scope.attributes.buttonStyle.value, "class": "" },                        "icon": { "size": 24, "style": scope.attributes.iconStyle.value, "class": "" }                    }                    scope.attributes.singleMenu = {                         "button": { "style": "", "class": "" },                        "icon": { "size": 16, "style": "", "class": "" }                    }                    delete scope.attributes.buttonStyle;                    delete scope.attributes.iconStyle;                }                var rootMenuItem = '<button ng-click="{{itemClick}}" ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" menu-index="{{itemIndex}}" aria-label="md-icon-button" style="{{attributes.rootMenu.button.style}}" class="dfx-core-gc-iconbar-button md-icon-button {{attributes.rootMenu.button.class}}">'+                    '<i ng-if="{{notState}}">'+                        '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} {{attributes.rootMenu.icon.class}}" style="font-size:{{attributes.rootMenu.icon.size}}px; {{attributes.rootMenu.icon.style}}"></md-icon>'+                        '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.rootMenu.icon.size}}" style="{{attributes.rootMenu.icon.style}}" class="{{attributes.rootMenu.icon.class}}"></ng-md-icon>'+                    '</i>'+                    '<i ng-if="{{isState}}">'+                        '<i ng-if="{{trueState}}">'+                            '<md-icon ng-if="{{ifTrueStateFaIcon}}" class="fa {{trueStateFaIcon}} {{attributes.rootMenu.icon.class}} {{trueStateFaIconClass}}" style="font-size:{{attributes.rootMenu.icon.size}}px; {{attributes.rootMenu.icon.style}} {{trueStateFaIconStyle}}"></md-icon>'+                            '<ng-md-icon ng-if="{{ifTrueStateSvgIcon}}" icon="{{trueStateSvgIcon}}" size="{{attributes.rootMenu.icon.size}}" style="{{attributes.rootMenu.icon.style}} {{trueStateSvgIconStyle}}" class="{{attributes.rootMenu.icon.class}} {{trueStateSvgIconClass}}"></ng-md-icon>'+                        '</i>'+                        '<i ng-if="!{{falseState}}">'+                            '<md-icon ng-if="{{ifFalseStateFaIcon}}" class="fa {{falseStateFaIcon}} {{attributes.rootMenu.icon.class}} {{falseStateFaIconClass}}" style="font-size:{{attributes.rootMenu.icon.size}}px; {{attributes.rootMenu.icon.style}} {{falseStateFaIconStyle}}"></md-icon>'+                            '<ng-md-icon ng-if="{{ifFalseStateSvgIcon}}" icon="{{falseStateSvgIcon}}" size="{{attributes.rootMenu.icon.size}}" style="{{attributes.rootMenu.icon.style}} {{falseStateSvgIconStyle}}" class="{{attributes.rootMenu.icon.class}} {{falseStateSvgIconClass}}"></ng-md-icon>'+                        '</i>'+                    '</i>'+                '</button>',                singleMenuItem = '<md-button ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" ng-click="{{itemClick}}" menu-index="{{itemIndex}}" class="dfx-menu-button {{attributes.singleMenu.button.class}}" aria-label="iconbar-button" style="{{attributes.singleMenu.button.style}}">'+                    '<i ng-if="{{notState}}">'+                        '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-menu-button-icon {{attributes.singleMenu.icon.class}}" style="font-size:{{attributes.singleMenu.icon.size}}px; {{attributes.singleMenu.icon.style}}"></md-icon>'+                        '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.singleMenu.icon.size}}" class="dfx-menu-button-icon {{attributes.singleMenu.icon.class}}" style="{{attributes.singleMenu.icon.style}}"></ng-md-icon>'+                    '</i>'+                    '<i ng-if="{{isState}}">'+                        '<i ng-if="{{trueState}}">'+                            '<md-icon ng-if="{{ifTrueStateFaIcon}}" class="fa {{trueStateFaIcon}} dfx-menu-button-icon {{attributes.singleMenu.icon.class}} {{trueStateFaIconClass}}" style="font-size:{{attributes.singleMenu.icon.size}}px; {{attributes.singleMenu.icon.style}} {{trueStateFaIconStyle}}"></md-icon>'+                            '<ng-md-icon ng-if="{{ifTrueStateSvgIcon}}" icon="{{trueStateSvgIcon}}" size="{{attributes.singleMenu.icon.size}}" class="dfx-menu-button-icon {{attributes.singleMenu.icon.class}} {{trueStateSvgIconClass}}" style="{{attributes.singleMenu.icon.style}} {{trueStateSvgIconStyle}}"></ng-md-icon></i>'+                        '</i>'+                        '<i ng-if="!{{falseState}}">'+                            '<md-icon ng-if="{{ifFalseStateFaIcon}}" class="fa {{falseStateFaIcon}} dfx-menu-button-icon {{attributes.singleMenu.icon.class}} {{falseStateFaIconClass}}" style="font-size:{{attributes.singleMenu.icon.size}}px; {{attributes.singleMenu.icon.style}} {{falseStateFaIconStyle}}"></md-icon>'+                            '<ng-md-icon ng-if="{{ifFalseStateSvgIcon}}" icon="{{falseStateSvgIcon}}" size="{{attributes.singleMenu.icon.size}}" class="dfx-menu-button-icon {{attributes.singleMenu.icon.class}} {{falseStateSvgIconClass}}" style="{{attributes.singleMenu.icon.style}} {{falseStateSvgIconStyle}}"></ng-md-icon></i>'+                        '</i>'+                    '</i>'+                    '<span>{{itemLabel}}</span>'+                    '<span class="md-alt-text">{{itemShortcut}}</span>'+                    '<small ng-if="{{ifItemNotification}}">{{itemNotification}}</small>'+                '</md-button>',                iconbarMenuItem =   '<md-menu-item ng-if="{{itemDisplay}}">';                                scope.changeState = function( itemIndexes, ev, optionsType ) {                    var levels = JSON.parse('['+itemIndexes+']');                    var bridge = optionsType === 'static' ? '.menuItems.value' : '.'+scope.itemNames.main.scopeItems,                         stateElement = '',                         stateObject = {};                    for ( var i = 0; i < levels.length; i++ ) {                        if ( i === 0 ) {                            stateElement = stateElement + '['+ levels[i] + ']';                        } else {                            stateElement = stateElement + bridge + '['+ levels[i] + ']';                            }                                        }                    if ( optionsType === 'dynamic' ) {                        stateObject = eval('scope.$parent_scope.'+scope.itemNames.main.source+stateElement+'.'+scope.itemNames.state.name);                     } else {                        stateObject = eval('scope.attributes.menuItems.value'+stateElement).state;                     }                    if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign) && stateObject.binding !== '') {                        if (optionsType==='static') {                            if ( stateObject.binding === 'true' || stateObject.binding === 'false' ) {                                stateObject.binding = stateObject.binding === 'true' ? 'false' : 'true';                                                        } else {                                if ( scope.$gcscope[stateObject.binding] === 'true' || scope.$gcscope[stateObject.binding] === 'false' ) {                                    scope.$gcscope[stateObject.binding] = scope.$gcscope[stateObject.binding] === 'true' ? 'false' : 'true';                                                                                            } else if ( typeof scope.$gcscope[stateObject.binding] === 'boolean' ) {                                    scope.$gcscope[stateObject.binding] = scope.$gcscope[stateObject.binding] ? false : true;                                }                            }                                                             } else {                                                    scope.$parent_scope[stateObject[scope.itemNames.state.binding]] = scope.$parent_scope[stateObject[scope.itemNames.state.binding]] ? false : true;                                                }                    }                }                                var buildNextLevel = function ( nextLevel, road, optionsType ) {                    if(optionsType==='static'){                                                for ( var i = 0; i < nextLevel.length; i++ ) {                            if ( nextLevel[i].menuItems.value.length > 0 ) {                                if ( angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign) ) {                                    var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', true);                                } else {                                    var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display);                                }                                scope.iconBar = scope.iconBar + iconbarItem + '<md-menu>';                                                            createDfxMenuItem( nextLevel[i], 'singleMenuItem', road, i, optionsType );                                buildNextLevel( nextLevel[i].menuItems.value, road + ',' + i, optionsType );                                scope.iconBar = scope.iconBar + '</md-menu-content></md-menu></md-menu-item>';                            } else {                                if ( nextLevel[i].divider === true ) {                                    scope.iconBar = scope.iconBar + '<md-menu-divider></md-menu-divider>';                                } else if ( nextLevel[i].title === true ) {                                    scope.iconBar = scope.iconBar + '<md-menu-item class="tree-menu-title"><div>'+'{{'+nextLevel[i].label+'}}'+'</div></md-menu-item>';                                } else {                                    if ( angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign) ) {                                        var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', true);                                    } else {                                        var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display);                                    }                                    scope.iconBar = scope.iconBar + iconbarItem;                                    createDfxMenuItem( nextLevel[i], 'singleMenuItem', road, i, optionsType );                                }                            }                        }                    } else {                        if ( angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign) ) {                            for ( var i = 0; i < nextLevel.length; i++ ) {                                if ( nextLevel[i].menuItems.value.length > 0 ) {                                    var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', true);                                    scope.iconBar = scope.iconBar + iconbarItem + '<md-menu>';                                                                createDfxMenuItem( nextLevel[i], 'singleMenuItem', road, i, optionsType );                                    buildNextLevel( nextLevel[i].menuItems.value, road + ',' + i, optionsType );                                    scope.iconBar = scope.iconBar + '</md-menu-content></md-menu></md-menu-item>';                                } else {                                    if ( nextLevel[i].divider === true ) {                                        scope.iconBar = scope.iconBar + '<md-menu-divider></md-menu-divider>';                                    } else if ( nextLevel[i].title === true ) {                                        scope.iconBar = scope.iconBar + '<md-menu-item class="tree-menu-title"><div>'+'{{'+nextLevel[i].label+'}}'+'</div></md-menu-item>';                                    } else {                                        var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', true);                                                                                scope.iconBar = scope.iconBar + iconbarItem;                                        createDfxMenuItem( nextLevel[i], 'singleMenuItem', road, i, optionsType );                                    }                                }                            }                            } else {                            for ( var i = 0; i < nextLevel.length; i++ ) {                                if ( nextLevel[i][scope.itemNames.main.scopeItems] && nextLevel[i][scope.itemNames.main.scopeItems].length > 0 ) {                                    var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', true);                                    scope.iconBar = scope.iconBar + iconbarItem + '<md-menu>';                                                                createDfxMenuItem( nextLevel[i], 'singleMenuItem', road, i, optionsType );                                    buildNextLevel( nextLevel[i][scope.itemNames.main.scopeItems], road + ',' + i, optionsType );                                    scope.iconBar = scope.iconBar + '</md-menu-content></md-menu></md-menu-item>';                                } else {                                    if ( nextLevel[i][scope.itemNames.main.type] === 'divider' ) {                                        scope.iconBar = scope.iconBar + '<md-menu-divider></md-menu-divider>';                                    } else if ( nextLevel[i][scope.itemNames.main.type] === 'title' ) {                                        scope.iconBar = scope.iconBar + '<md-menu-item class="tree-menu-title"><div>'+'{{'+nextLevel[i][scope.itemNames.main.label]+'}}'+'</div></md-menu-item>';                                    } else {                                        var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', true);                                                                                scope.iconBar = scope.iconBar + iconbarItem;                                        createDfxMenuItem( nextLevel[i], 'singleMenuItem', road, i, optionsType );                                    }                                }                            }                        }                    }                }                var createDfxMenuItem = function( dfxMenuItem, type, level, index, optionsType ) {                    if(optionsType==='static') {                        var tempPropObject = {};                                            if ( typeof dfxMenuItem.icon === 'string' ) {                             var tempIcon = dfxMenuItem.icon;                            dfxMenuItem.icon = {                                 "value": tempIcon,                                 "type":  dfxMenuItem.hasOwnProperty('iconType') ? dfxMenuItem.iconType : 'fa-icon'                             }                        }                        if ( !dfxMenuItem.hasOwnProperty('state') ) {                            dfxMenuItem.state = {                                "value":           false,                                "binding":         "true",                                "checkedIcon":   { "value": "'thumb_up'", "type": "svg-icon", "style": "", "class": "" },                                "uncheckedIcon": { "value": "'thumb_down'", "type": "svg-icon", "style": "", "class": "" }                            };                        }                         tempPropObject.isState =                    dfxMenuItem.state.value;                        tempPropObject.notState =                   !dfxMenuItem.state.value;                                               tempPropObject.ifFaIcon =                   dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'fa-icon' && !dfxMenuItem.state.value ? true : false;                        tempPropObject.ifSvgIcon =                  dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'svg-icon' && !dfxMenuItem.state.value ? true : false;                        tempPropObject.ifTrueStateFaIcon =          dfxMenuItem.state.checkedIcon.value.length > 0 && dfxMenuItem.state.checkedIcon.type === 'fa-icon' && dfxMenuItem.state.value ? true : false;                        tempPropObject.ifFalseStateFaIcon =         dfxMenuItem.state.uncheckedIcon.value.length > 0 && dfxMenuItem.state.uncheckedIcon.type === 'fa-icon' && dfxMenuItem.state.value ? true : false;                        tempPropObject.ifTrueStateSvgIcon =         dfxMenuItem.state.checkedIcon.value.length > 0 && dfxMenuItem.state.checkedIcon.type === 'svg-icon' && dfxMenuItem.state.value ? true : false;                        tempPropObject.ifFalseStateSvgIcon =        dfxMenuItem.state.uncheckedIcon.value.length > 0 && dfxMenuItem.state.uncheckedIcon.type === 'svg-icon' && dfxMenuItem.state.value ? true : false;                        tempPropObject.itemIndex =                  level || level >= 0 ? level + ',' + index : index;                        tempPropObject.itemDisabled =               dfxMenuItem.disabled;                                            tempPropObject.trueStateFaIconStyle =       dfxMenuItem.state.checkedIcon.style;                        tempPropObject.falseStateFaIconStyle =      dfxMenuItem.state.uncheckedIcon.style;                        tempPropObject.trueStateSvgIconStyle =      dfxMenuItem.state.checkedIcon.style;                        tempPropObject.falseStateSvgIconStyle =     dfxMenuItem.state.uncheckedIcon.style;                        tempPropObject.trueStateFaIconClass =       dfxMenuItem.state.checkedIcon.class;                        tempPropObject.falseStateFaIconClass =      dfxMenuItem.state.uncheckedIcon.class;                        tempPropObject.trueStateSvgIconClass =      dfxMenuItem.state.checkedIcon.class;                        tempPropObject.falseStateSvgIconClass =     dfxMenuItem.state.uncheckedIcon.class;                        if ( angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign) ) {                            tempPropObject.faIcon =                 dfxMenuItem.icon.value.indexOf("'") == -1 ? 'fa-home' : eval(dfxMenuItem.icon.value);                            tempPropObject.svgIcon =                dfxMenuItem.icon.value.indexOf("'") == -1 ? 'home' : eval(dfxMenuItem.icon.value);                            tempPropObject.trueState =              true;                            tempPropObject.falseState =             true;                            tempPropObject.trueStateFaIcon =        dfxMenuItem.state.checkedIcon.value.indexOf("'") == -1 ? 'fa-thumbs-up' : eval(dfxMenuItem.state.checkedIcon.value);                            tempPropObject.falseStateFaIcon =       dfxMenuItem.state.uncheckedIcon.value.indexOf("'") == -1 ? 'fa-thumbs-up' : eval(dfxMenuItem.state.uncheckedIcon.value);                            tempPropObject.trueStateSvgIcon =       dfxMenuItem.state.checkedIcon.value.indexOf("'") == -1 ? 'thumb_up' : eval(dfxMenuItem.state.checkedIcon.value);                                                    tempPropObject.falseStateSvgIcon =      dfxMenuItem.state.uncheckedIcon.value.indexOf("'") == -1 ? 'thumb_up' : eval(dfxMenuItem.state.uncheckedIcon.value);                                                    tempPropObject.itemDisplay =            true;                            if ( type === 'singleMenuItem' ) {                                tempPropObject.itemLabel =          $filter('checkExpression')(dfxMenuItem.label);                                tempPropObject.itemShortcut =       dfxMenuItem.shortcut;                                tempPropObject.ifItemNotification = dfxMenuItem.notification.length > 0 ? true : false;                                tempPropObject.itemNotification =   dfxMenuItem.notification;                                                        }                            if ( dfxMenuItem.menuItems.value.length > 0 ) {                                tempPropObject.itemClick = '$mdOpenMenu();'+dfxMenuItem[scope.itemNames.main.onclick];                            } else {                                tempPropObject.itemClick = dfxMenuItem[scope.itemNames.main.onclick];                                                    }                            } else {                            tempPropObject.faIcon =                 dfxMenuItem.icon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.icon.value+'}}' : eval(dfxMenuItem.icon.value);                            tempPropObject.svgIcon =                dfxMenuItem.icon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.icon.value+'}}' : eval(dfxMenuItem.icon.value);                            tempPropObject.trueState =              dfxMenuItem.state.binding;                            tempPropObject.falseState =             dfxMenuItem.state.binding;                            tempPropObject.trueStateFaIcon =        dfxMenuItem.state.checkedIcon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.state.checkedIcon.value+'}}' : '{{'+dfxMenuItem.state.checkedIcon.value+'}}';                            tempPropObject.falseStateFaIcon =       dfxMenuItem.state.uncheckedIcon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.state.uncheckedIcon.value+'}}' : '{{'+dfxMenuItem.state.uncheckedIcon.value+'}}';                            tempPropObject.trueStateSvgIcon =       dfxMenuItem.state.checkedIcon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.state.checkedIcon.value+'}}' : '{{'+dfxMenuItem.state.checkedIcon.value+'}}';                                                    tempPropObject.falseStateSvgIcon =      dfxMenuItem.state.uncheckedIcon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.state.uncheckedIcon.value+'}}' : '{{'+dfxMenuItem.state.uncheckedIcon.value+'}}';                                                    tempPropObject.itemDisplay =            typeof dfxMenuItem.display === 'string' ? dfxMenuItem.display.replace(/"/g, '\'') : dfxMenuItem.display;                                                    if ( type === 'singleMenuItem' ) {                                tempPropObject.itemLabel =          '{{'+dfxMenuItem.label+'}}';                                tempPropObject.itemShortcut =       dfxMenuItem.shortcut;                                tempPropObject.ifItemNotification = dfxMenuItem.notification !=='' ? true : false;                                tempPropObject.itemNotification =   '{{'+dfxMenuItem.notification+'}}';                            }                             if ( dfxMenuItem.menuItems.value.length > 0 ) {                                tempPropObject.itemClick = dfxMenuItem.state.value ? '$mdOpenMenu();changeState('+"'"+tempPropObject.itemIndex+"'"+', $event, '+"'"+optionsType+"'"+');'+dfxMenuItem.onclick : '$mdOpenMenu();'+dfxMenuItem.onclick;                            } else {                                tempPropObject.itemClick = dfxMenuItem.state.value ? 'changeState('+"'"+tempPropObject.itemIndex+"'"+', $event, '+"'"+optionsType+"'"+');'+dfxMenuItem.onclick : dfxMenuItem.onclick;                                                    }                        }                    } else {                             var tempPropObject = {};                                                               tempPropObject.itemIndex =                  level || level >= 0 ? level + ',' + index : index;                        if ( angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign) ) {                            tempPropObject.faIcon =                 dfxMenuItem.icon.value.indexOf("'") == -1 ? 'fa-home' : eval(dfxMenuItem.icon.value);                            tempPropObject.svgIcon =                dfxMenuItem.icon.value.indexOf("'") == -1 ? 'home' : eval(dfxMenuItem.icon.value);                            tempPropObject.trueStateFaIcon =        dfxMenuItem.state.checkedIcon.value.indexOf("'") == -1 ? 'fa-thumbs-up' : eval(dfxMenuItem.state.checkedIcon.value);                            tempPropObject.falseStateFaIcon =       dfxMenuItem.state.uncheckedIcon.value.indexOf("'") == -1 ? 'fa-thumbs-up' : eval(dfxMenuItem.state.uncheckedIcon.value);                            tempPropObject.trueStateSvgIcon =       dfxMenuItem.state.checkedIcon.value.indexOf("'") == -1 ? 'thumb_up' : eval(dfxMenuItem.state.checkedIcon.value);                                                    tempPropObject.falseStateSvgIcon =      dfxMenuItem.state.uncheckedIcon.value.indexOf("'") == -1 ? 'thumb_up' : eval(dfxMenuItem.state.uncheckedIcon.value);                                                    tempPropObject.itemDisplay =            true;                            if ( type === 'singleMenuItem' ) {                                tempPropObject.itemLabel =          $filter('checkExpression')(dfxMenuItem.label);                                tempPropObject.itemShortcut =       dfxMenuItem.shortcut;                                tempPropObject.ifItemNotification = dfxMenuItem.notification.length > 0 ? true : false;                                tempPropObject.itemNotification =   dfxMenuItem.notification;                                                        }                            } else {                            tempPropObject.ifFaIcon =               dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name].length > 0 && dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.type] === 'fa-icon' ? true : false;                            tempPropObject.ifSvgIcon =              dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name].length > 0 && dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.type] === 'svg-icon' ? true : false;                            tempPropObject.faIcon =                 dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name].indexOf("'") == -1 ? '{{'+dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name]+'}}' : eval(dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name]);                            tempPropObject.itemDisplay =            dfxMenuItem[scope.itemNames.main.display];                            tempPropObject.itemDisabled =           dfxMenuItem[scope.itemNames.main.disabled];                                                tempPropObject.svgIcon =                dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name].indexOf("'") == -1 ? '{{'+dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name]+'}}' : eval(dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name]);                            if ( dfxMenuItem.hasOwnProperty(scope.itemNames.state.name) ) {                                tempPropObject.isState =                    true;                                tempPropObject.notState =                   false;                                tempPropObject.trueState =                  dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.binding];                                tempPropObject.falseState =                 dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.binding];                                tempPropObject.ifTrueStateFaIcon =          dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.name].length > 0 && dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.type] === 'fa-icon' ? true : false;                                tempPropObject.ifFalseStateFaIcon =         dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.name].length > 0 && dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.type ]=== 'fa-icon' ? true : false;                                tempPropObject.ifTrueStateSvgIcon =         dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.name].length > 0 && dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.type] === 'svg-icon' ? true : false;                                tempPropObject.trueStateFaIcon =            '{{'+dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.name]+'}}';                                tempPropObject.falseStateFaIcon =           '{{'+dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.name]+'}}';                                tempPropObject.trueStateSvgIcon =           '{{'+dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.name]+'}}';                                tempPropObject.falseStateSvgIcon =          '{{'+dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.name]+'}}';                                tempPropObject.ifFalseStateSvgIcon =        dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.name].length > 0 && dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.type ]=== 'svg-icon' ? true : false;                                tempPropObject.trueStateFaIconStyle =       dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.style];                                tempPropObject.falseStateFaIconStyle =      dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.style];                                tempPropObject.trueStateSvgIconStyle =      dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.style];                                tempPropObject.falseStateSvgIconStyle =     dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.style];                                tempPropObject.trueStateFaIconClass =       dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.class];                                tempPropObject.falseStateFaIconClass =      dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.class];                                tempPropObject.trueStateSvgIconClass =      dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.class];                                tempPropObject.falseStateSvgIconClass =     dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.class];                                if ( dfxMenuItem[scope.itemNames.main.scopeItems].length > 0 ) {                                    tempPropObject.itemClick = dfxMenuItem[scope.itemNames.state.value] !=='' ? '$mdOpenMenu();changeState('+"'"+tempPropObject.itemIndex+"'"+', $event, '+"'"+optionsType+"'"+');'+dfxMenuItem[scope.itemNames.main.onclick] : '$mdOpenMenu();'+dfxMenuItem[scope.itemNames.main.onclick];                                } else {                                    tempPropObject.itemClick = dfxMenuItem[scope.itemNames.state.value] !=='' ? 'changeState('+"'"+tempPropObject.itemIndex+"'"+', $event, '+"'"+optionsType+"'"+');'+dfxMenuItem[scope.itemNames.main.onclick] : dfxMenuItem[scope.itemNames.main.onclick];                                                        }                            } else {                                tempPropObject.isState = false;                                tempPropObject.notState = true;                                if ( dfxMenuItem[scope.itemNames.main.scopeItems].length > 0 ) {                                    tempPropObject.itemClick = '$mdOpenMenu();'+dfxMenuItem[scope.itemNames.main.onclick];                                } else {                                    tempPropObject.itemClick = dfxMenuItem[scope.itemNames.main.onclick];                                                        }                            }                            if ( type === 'singleMenuItem' ) {                                tempPropObject.itemLabel =          '{{'+dfxMenuItem[scope.itemNames.main.label]+'}}';                                tempPropObject.itemShortcut =       dfxMenuItem[scope.itemNames.main.shortcut];                                tempPropObject.ifItemNotification = dfxMenuItem[scope.itemNames.main.notification] !=='' ? true : false;                                tempPropObject.itemNotification =   '{{'+dfxMenuItem[scope.itemNames.main.notification]+'}}';                            }                         }                    }                    var tempMenu = '';                    if ( type === 'singleMenuItem' ) {                        tempMenu = singleMenuItem                            .replace('{{isState}}',                 tempPropObject.isState )                            .replace('{{notState}}',                tempPropObject.notState )                            .replace('{{trueState}}',               tempPropObject.trueState )                            .replace('{{falseState}}',              tempPropObject.falseState )                            .replace('{{ifFaIcon}}',                tempPropObject.ifFaIcon )                            .replace('{{ifSvgIcon}}',               tempPropObject.ifSvgIcon )                            .replace('{{ifTrueStateFaIcon}}',       tempPropObject.ifTrueStateFaIcon )                            .replace('{{ifFalseStateFaIcon}}',      tempPropObject.ifFalseStateFaIcon )                            .replace('{{ifTrueStateSvgIcon}}',      tempPropObject.ifTrueStateSvgIcon )                            .replace('{{ifFalseStateSvgIcon}}',     tempPropObject.ifFalseStateSvgIcon )                            .replace('{{faIcon}}',                  tempPropObject.faIcon )                            .replace('{{svgIcon}}',                 tempPropObject.svgIcon )                            .replace('{{trueStateFaIcon}}',         tempPropObject.trueStateFaIcon )                            .replace('{{falseStateFaIcon}}',        tempPropObject.falseStateFaIcon )                            .replace('{{trueStateSvgIcon}}',        tempPropObject.trueStateSvgIcon )                            .replace('{{falseStateSvgIcon}}',       tempPropObject.falseStateSvgIcon )                            .replace('{{trueStateFaIconStyle}}',    tempPropObject.trueStateFaIconStyle )                            .replace('{{falseStateFaIconStyle}}',   tempPropObject.falseStateFaIconStyle )                            .replace('{{trueStateSvgIconStyle}}',   tempPropObject.trueStateSvgIconStyle )                            .replace('{{falseStateSvgIconStyle}}',  tempPropObject.falseStateSvgIconStyle )                            .replace('{{trueStateFaIconClass}}',    tempPropObject.trueStateFaIconClass )                            .replace('{{falseStateFaIconClass}}',   tempPropObject.falseStateFaIconClass )                            .replace('{{trueStateSvgIconClass}}',   tempPropObject.trueStateSvgIconClass )                            .replace('{{falseStateSvgIconClass}}',  tempPropObject.falseStateSvgIconClass )                            .replace('{{itemLabel}}',               tempPropObject.itemLabel )                            .replace('{{itemShortcut}}',            tempPropObject.itemShortcut )                            .replace('{{ifItemNotification}}',      tempPropObject.ifItemNotification )                            .replace('{{itemNotification}}',        tempPropObject.itemNotification )                            .replace('{{itemIndex}}',               tempPropObject.itemIndex )                            .replace('{{itemDisplay}}',             tempPropObject.itemDisplay )                            .replace('{{itemDisabled}}',            tempPropObject.itemDisabled )                            .replace('{{itemClick}}',               tempPropObject.itemClick );                    } else {                        tempMenu = rootMenuItem                            .replace('{{isState}}',                 tempPropObject.isState )                            .replace('{{notState}}',                tempPropObject.notState )                            .replace('{{trueState}}',               tempPropObject.trueState )                            .replace('{{falseState}}',              tempPropObject.falseState )                            .replace('{{ifFaIcon}}',                tempPropObject.ifFaIcon )                            .replace('{{ifSvgIcon}}',               tempPropObject.ifSvgIcon )                            .replace('{{ifTrueStateFaIcon}}',       tempPropObject.ifTrueStateFaIcon )                            .replace('{{ifFalseStateFaIcon}}',      tempPropObject.ifFalseStateFaIcon )                            .replace('{{ifTrueStateSvgIcon}}',      tempPropObject.ifTrueStateSvgIcon )                            .replace('{{ifFalseStateSvgIcon}}',     tempPropObject.ifFalseStateSvgIcon )                            .replace('{{faIcon}}',                  tempPropObject.faIcon )                            .replace('{{svgIcon}}',                 tempPropObject.svgIcon )                            .replace('{{trueStateFaIcon}}',         tempPropObject.trueStateFaIcon )                            .replace('{{falseStateFaIcon}}',        tempPropObject.falseStateFaIcon )                            .replace('{{trueStateSvgIcon}}',        tempPropObject.trueStateSvgIcon )                            .replace('{{falseStateSvgIcon}}',       tempPropObject.falseStateSvgIcon )                            .replace('{{trueStateFaIconStyle}}',    tempPropObject.trueStateFaIconStyle )                            .replace('{{falseStateFaIconStyle}}',   tempPropObject.falseStateFaIconStyle )                            .replace('{{trueStateSvgIconStyle}}',   tempPropObject.trueStateSvgIconStyle )                            .replace('{{falseStateSvgIconStyle}}',  tempPropObject.falseStateSvgIconStyle )                            .replace('{{trueStateFaIconClass}}',    tempPropObject.trueStateFaIconClass )                            .replace('{{falseStateFaIconClass}}',   tempPropObject.falseStateFaIconClass )                            .replace('{{trueStateSvgIconClass}}',   tempPropObject.trueStateSvgIconClass )                            .replace('{{falseStateSvgIconClass}}',  tempPropObject.falseStateSvgIconClass )                            .replace('{{itemIndex}}',               tempPropObject.itemIndex )                            .replace('{{itemDisplay}}',             tempPropObject.itemDisplay )                            .replace('{{itemDisabled}}',            tempPropObject.itemDisabled )                            .replace('{{itemClick}}',               tempPropObject.itemClick );                    }                    if(optionsType==='static') {                                                if ( dfxMenuItem.menuItems.value.length > 0 ) {                            scope.iconBar = scope.iconBar + tempMenu +'<md-menu-content width="4">';                        } else {                            if ( type === 'singleMenuItem' ) {                                scope.iconBar = scope.iconBar + tempMenu + '</md-menu-item>';                            } else {                                scope.iconBar = scope.iconBar + tempMenu + '<md-menu-content width="4"></md-menu-content>';                            }                        }                     }else{                        if ( !angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign) ){                            if ( dfxMenuItem[scope.itemNames.main.scopeItems].length > 0 ) {                                scope.iconBar = scope.iconBar + tempMenu +'<md-menu-content width="4">';                            } else {                                if ( type === 'singleMenuItem' ) {                                    scope.iconBar = scope.iconBar + tempMenu + '</md-menu-item>';                                } else {                                    scope.iconBar = scope.iconBar + tempMenu + '<md-menu-content width="4"></md-menu-content>';                                }                            }                        } else {                                                            if ( dfxMenuItem.menuItems.value.length > 0 ) {                                scope.iconBar = scope.iconBar + tempMenu +'<md-menu-content width="4">';                            } else {                                if ( type === 'singleMenuItem' ) {                                    scope.iconBar = scope.iconBar + tempMenu + '</md-menu-item>';                                } else {                                    scope.iconBar = scope.iconBar + tempMenu + '<md-menu-content width="4"></md-menu-content>';                                }                            }                         }                    }                }                scope.iconbarBuilder = function() {                    scope.iconBar = '<md-menu-bar>';                    if ( !angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign) ) {                        if ( scope.attributes.menuItemsType.value === 'dynamic' ){                            scope.iconbarArray = scope.$parent_scope[scope.itemNames.main.source];                            // scope.attributes.menuItems.value = scope.iconbarArray;                            for ( var item = 0; item < scope.iconbarArray.length; item++ ) {                                scope.iconBar = scope.iconBar + '<md-menu>';                                if ( scope.iconbarArray[item][scope.itemNames.main.scopeItems].length > 0 ) {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, 'dynamic' );                                    buildNextLevel( scope.iconbarArray[item][scope.itemNames.main.scopeItems], item, 'dynamic');                                    scope.iconBar = scope.iconBar + '</md-menu-content>';                                } else {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, 'dynamic' );                                }                                scope.iconBar = scope.iconBar + '</md-menu>';                            };                        } else {                            scope.iconbarArray = scope.attributes.menuItems.value;                            // scope.attributes.menuItems.value = scope.iconbarArray;                            for ( var item = 0; item < scope.iconbarArray.length; item++ ) {                                scope.iconBar = scope.iconBar + '<md-menu>';                                if ( scope.iconbarArray[item].menuItems.value.length > 0 ) {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, 'static' );                                    buildNextLevel( scope.iconbarArray[item].menuItems.value, item, 'static');                                    scope.iconBar = scope.iconBar + '</md-menu-content>';                                } else {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, 'static' );                                }                                scope.iconBar = scope.iconBar + '</md-menu>';                            };                        }                    } else {                        scope.iconbarArray = scope.attributes.menuItems.value;                        for ( var item = 0; item < scope.iconbarArray.length; item++ ) {                            scope.iconBar = scope.iconBar + '<md-menu>';                            if ( scope.iconbarArray[item].menuItems.value.length > 0 ) {                                createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, 'static' );                                buildNextLevel( scope.iconbarArray[item].menuItems.value, item, 'static');                                scope.iconBar = scope.iconBar + '</md-menu-content>';                            } else {                                createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, 'static' );                            }                            scope.iconBar = scope.iconBar + '</md-menu>';                        };                    }                    scope.iconBar = scope.iconBar + '</md-menu-bar>';                    scope.iconBarMenu = scope.iconBar;                    $timeout(function() {                        $('#' + component.id + '_menu_bar').html(scope.iconBarMenu);                        $compile($('#' + component.id + '_menu_bar').contents())(scope);                    }, 0);                }                scope.$watch('attributes.menuItems.value', function(newVal, oldVal) {                    if ( newVal != null && !angular.equals(newVal, oldVal) ) {                        $timeout(function() {                            scope.iconbarBuilder();                        }, 0);                    }                }, true);                scope.$watch("attributes.dynamic.value", function(newValue){                    $timeout(function(){                        if (scope.attributes.dynamicPresent==null) {                            scope.attributes.dynamicPresent = { "value": "" };                            scope.attributes.dynamic = { "value": "" };                        }                        if (typeof newValue !== "undefined" && newValue !== null && newValue !== "") {                            scope.attributes.dynamicPresent.value = true;                        } else {                            scope.attributes.dynamicPresent.value = false;                        }                    }, 0);                });                scope.iconbarBuilder();            });        }    }}]);dfxGControls.directive('dfxGcWebFab', ['$timeout', function($timeout) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/fab_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/fab_design.html';            } else {                return '/gcontrols/web/fab.html';            }        },        link: {            pre : function(scope, element, attrs, basectrl) {                var component = scope.getComponent(element);                scope.component_id = component.id;                scope.attributes = null;                basectrl.init(scope, element, component, attrs, 'fab').then(function() {                    scope.attributes.dynamicPresent.status = "overridden";                    scope.attributes.dynamic.status = "overridden";                    scope.attributes.icon.status = "overridden";                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        if(scope.attributes.dynamicPresent.value){                            scope.dynamicItems = eval('scope.' + scope.attributes.dynamic.value);                            try{                                if(scope.dynamicItems.constructor === Array ){                                    if(scope.dynamicItems.length > 0){                                        scope.attributes.dynamicPresent.value = true;                                    }else{                                        scope.attributes.dynamicPresent.value = false;                                    }                                }else{                                    scope.attributes.dynamicPresent.value = false;                                }                            }catch(e){                                scope.attributes.dynamicPresent.value = false;                            }                        }else{                            scope.attributes.dynamicPresent.value = false;                        }                    }                    scope.cleanFabClasses = function( fab ){                        if ( fab.class.indexOf('md-fab') > -1 ) { fab.class = fab.class.replace('md-fab', ""); }                        if ( fab.class.indexOf('md-raised') > -1 ) { fab.class = fab.class.replace('md-raised', ""); }                        if ( fab.class.indexOf('md-mini') > -1 ) { fab.class = fab.class.replace('md-mini', ""); }                    }                    scope.cleanFabClasses(scope.attributes.triggerButton);                    scope.cleanFabClasses(scope.attributes.actionButton);                    if ( !scope.attributes.hasOwnProperty('label') ) {scope.attributes.label = {"value":""}}                    if ( !scope.attributes.triggerButton.hasOwnProperty('tooltip') ) {scope.attributes.triggerButton.tooltip = { "direction": "top", "style": "", "classes": "" }}                    if ( !scope.attributes.actionButton.hasOwnProperty('tooltip') ) {scope.attributes.actionButton.tooltip = { "direction": "top", "style": "", "classes": "" }}                    if ( !scope.attributes.icon.hasOwnProperty('size') ) { scope.attributes.icon.size = 24; }                    if ( !scope.attributes.actionButton.icon.hasOwnProperty('size') ) { scope.attributes.actionButton.icon.size = 20; }                    if ( !scope.attributes.icon.hasOwnProperty('type') ) { scope.attributes.icon.type = 'fa-icon'; }                    scope.ifShowIconTypes = function( icon ) {                        var regexp = /(^\')(.*)(\'$)/gm, filtered = regexp.exec( icon );                        if ( icon && ( icon.indexOf('+') >= 0 ) ) { filtered = false; }                        if ( icon === '' ) { filtered = true; }                        if ( icon.indexOf("'") === 0 && icon.indexOf('+') === -1 && icon.charAt(icon.length-1) === "'" ) {                             icon.indexOf("'fa-") === 0 ? scope.attributes.icon.type = 'fa-icon' : scope.attributes.icon.type = 'svg-icon';                         }                        scope.showIconTypes = filtered ? false : true;                    }                    scope.ifShowIconTypes(scope.attributes.icon.value);                    scope.checkIconType = function( menuList ) {                        for (var i = 0; i < menuList.length; i++) {                                                    if ( typeof menuList[i].icon === 'string' ) {                                 var tempIcon = menuList[i].icon;                                menuList[i].icon = {                                    "value": tempIcon,                                     "type": menuList[i].hasOwnProperty('iconType') ? menuList[i].iconType : 'fa-icon'                                }                            }                        }                    }                    scope.checkIconType( scope.attributes.menuItems.value );                    if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign)) {                        if(scope.attributes.dynamicPresent.value){                            scope.attributes.menuItems.value = scope.dynamicItems;                        }                    }                    scope.hideTooltip = function () {                        $('body md-tooltip').remove();                    }                    scope.hideTooltip();                    scope.$watch("attributes.dynamic.value", function(newValue){                        $timeout(function(){                            if (scope.attributes.dynamicPresent==null) {                                scope.attributes.dynamicPresent = { "value": "" };                                scope.attributes.dynamic = { "value": "" };                            }                            if(typeof newValue !== "undefined" && newValue !== null && newValue !== ""){                                scope.attributes.dynamicPresent.value = true;                            }else{                                scope.attributes.dynamicPresent.value = false;                            }                        }, 0);                    });                });            }        }    }}]);dfxGControls.directive('dfxGcWebTreemenu', ['$timeout', '$compile', function($timeout, $compile) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/treemenu_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/treemenu_design.html';            } else {                return '/gcontrols/web/treemenu.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element),                PADDING = 16;            basectrl.init(scope, element, component, attrs, 'treemenu').then(function() {                element.addClass('flex-100');                scope.attributes.menuItems.status = "overridden";                scope.attributes.dynamicPresent.status = "overridden";                scope.attributes.dynamic.status = "overridden";                scope.attributes.menuItemsType.status = "overridden";                scope.attributes.menuItemNames.status = "overridden";                scope.itemNames = scope.attributes.menuItemNames.value;                scope.menuToggle = function(ev) {                    var clickedItem = ev.target,                        treeButton = $(clickedItem);                        clickedItemPadding = parseFloat($(clickedItem).css('padding-left')),                        subMenu = $(clickedItem).parent().siblings(),                        treeItem = $(clickedItem).parent();                    treeButton.toggleClass('opened');                    subMenu.toggleClass('opened');                    subMenu.slideToggle();                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        if ( subMenu.hasClass('opened') ) {                            subMenu.children().find('md-menu-item > button, md-menu-item > div').css('padding-left', clickedItemPadding + PADDING);                        } else {                            treeItem.parent().find('ul.opened').slideUp();                            treeItem.parent().find('.opened').removeClass('opened');                            subMenu.children().find('md-menu-item > button, md-menu-item > div').css('padding-left', clickedItemPadding);                        }                    } else {                        if ( !subMenu.hasClass('opened') ) {                            treeItem.parent().find('ul.opened').slideUp();                            treeItem.parent().find('.opened').removeClass('opened');                        }                    }                };                $timeout(function() {                    var btns = $('#' + component.id).find('button, div');                    btns.each(function(index, element) {                        if ( $(element).parents('.tree-menu-item').length > 1 ) {                            if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                                var buttonPadding = PADDING * $(element).parents('.tree-menu-item').length - PADDING + 'px';                                $(element).css('padding-left', buttonPadding);                            } else {                                var buttonPadding = PADDING * $(element).parents('.tree-menu-item').length + 'px';                                $(element).css('padding-left', buttonPadding);                            }                        }                    });                }, 0);                scope.checkIconType = function( menuList ) {                    for (var i = 0; i < menuList.length; i++) {                        if ( menuList[i].menuItems.value.length > 0 ) {                            scope.checkIconType( menuList[i].menuItems.value );                        }                                                if ( typeof menuList[i].icon === 'string' ) {                             var tempIcon = menuList[i].icon;                            menuList[i].icon = {                                "value": tempIcon,                                 "type": menuList[i].hasOwnProperty('iconType') ? menuList[i].iconType : 'fa-icon'                            }                        }                    }                }                if ( !angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit) ) {                    if ( scope.attributes.dynamicPresent.value ){                        scope.dynamicItems = eval('scope.' + scope.attributes.dynamic.value);                        if ( scope.dynamicItems.length > 0 ) {                            scope.checkIconType( scope.dynamicItems );                        }                        try{                            if ( scope.dynamicItems.constructor === Array ){                                if ( scope.dynamicItems.length > 0 ) {                                    scope.attributes.dynamicPresent.value = true;                                } else {                                    scope.attributes.dynamicPresent.value = false;                                }                            } else {                                scope.attributes.dynamicPresent.value = false;                            }                        } catch(e) {                            scope.attributes.dynamicPresent.value = false;                        }                    } else {                        scope.attributes.dynamicPresent.value = false;                    }                }                if ( !angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign) ) {                    if ( scope.attributes.dynamicPresent.value ){                        scope.attributes.menuItems.value = scope.dynamicItems;                    }                }                scope.$watch("attributes.dynamic.value", function(newValue){                    $timeout(function(){                        if (scope.attributes.dynamicPresent==null) {                            scope.attributes.dynamicPresent = { "value": "" };                            scope.attributes.dynamic = { "value": "" };                        }                        if ( typeof newValue !== "undefined" && newValue !== null && newValue !== "" ){                            scope.attributes.dynamicPresent.value = true;                        } else {                            scope.attributes.dynamicPresent.value = false;                        }                    }, 0);                });            });        }    }}]);dfxGControls.directive('dfxGcWebHorizontalmenu', ['$mdMenu', '$timeout', '$compile', '$filter', function($mdMenu, $timeout, $compile, $filter) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/horizontalmenu_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/horizontalmenu_design.html';            } else {                return '/gcontrols/web/horizontalmenu.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'horizontalmenu').then(function(){                scope.attributes.flex.status = "overridden";                scope.attributes.dynamicPresent.status = "overridden";                scope.attributes.dynamic.status = "overridden";                scope.attributes.menuItemsType.status = "overridden";                scope.attributes.menuItemNames.status = "overridden";                scope.itemNames = scope.attributes.menuItemNames.value;                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    if(scope.attributes.dynamicPresent.value){                        scope.dynamicItems = eval('scope.' + scope.attributes.dynamic.value);                        try{                            if(scope.dynamicItems.constructor === Array ){                                if(scope.dynamicItems.length > 0){                                    scope.attributes.dynamicPresent.value = true;                                }else{                                    scope.attributes.dynamicPresent.value = false;                                }                            }else{                                scope.attributes.dynamicPresent.value = false;                            }                        }catch(e){                            scope.attributes.dynamicPresent.value = false;                        }                    }else{                        scope.attributes.dynamicPresent.value = false;                    }                }                var rootMenuItem = '<button ng-click="{{itemClick}}" ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" aria-label="button" class="dfx-horizontalmenu-root-button">'+                        '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-horizontalmenu-root-icon"></md-icon>'+                        '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="16" class="dfx-horizontalmenu-root-icon"></ng-md-icon>'+                        '<span>{{itemLabel}}</span>'+                        '<span ng-if="{{ifItemShortcut}}" style="margin:0 8px;">{{itemShortcut}}</span>'+                        '<small ng-if="{{ifItemNotification}}">{{itemNotification}}</small>'+                        '</button>',                    singleMenuItem =    '<md-button ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" ng-click="{{itemClick}}" aria-label="iconbar-button" class="dfx-horizontalmenu-button dfx-menu-button">'+                        '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-menu-button-icon"></md-icon>'+                        '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="16" class="dfx-menu-button-icon"></ng-md-icon>'+                        '<span>{{itemLabel}}</span>'+                        '<span ng-if="{{ifItemShortcut}}" class="md-alt-text">{{itemShortcut}}</span>'+                        '<small ng-if="{{ifItemNotification}}">{{itemNotification}}</small>'+                        '</md-button>',                    iconbarMenuItem =   '<md-menu-item ng-if="{{itemDisplay}}">';                                var buildNextLevel = function (nextLevel, optionsType) {                    if(optionsType==='static'){                        for (var i = 0; i < nextLevel.length; i++) {                            if ( nextLevel[i].menuItems.value.length > 0 ) {                                // next = nextLevel[i].menuItems.value;                                if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) {                                    var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', true);                                } else {                                    var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display);                                }                                scope.iconBar = scope.iconBar + iconbarItem + '<md-menu>';                                createDfxMenuItem( nextLevel[i], 'singleMenuItem', optionsType);                                buildNextLevel( nextLevel[i].menuItems.value, optionsType );                                scope.iconBar = scope.iconBar + '</md-menu-content></md-menu></md-menu-item>';                            } else {                                if ( nextLevel[i].divider === true ) {                                    scope.iconBar = scope.iconBar + '<md-menu-divider></md-menu-divider>';                                } else if ( nextLevel[i].title === true ) {                                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                                        scope.iconBar = scope.iconBar + '<md-menu-item class="tree-menu-title"><div>'+'{{'+nextLevel[i].label+'}}</div></md-menu-item>';                                    } else {                                        scope.iconBar = scope.iconBar + '<md-menu-item class="tree-menu-title"><div>'+'{{'+nextLevel[i].label+' | checkExpression}}</div></md-menu-item>';                                    }                                } else {                                    if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) {                                        var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', true);                                    } else {                                        var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display);                                    }                                    scope.iconBar = scope.iconBar + iconbarItem;                                    createDfxMenuItem( nextLevel[i], 'singleMenuItem', optionsType );                                }                            }                        }                    } else {                        if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                            for (var i = 0; i < nextLevel.length; i++) {                                if ( nextLevel[i][scope.itemNames.main.scopeItems].length > 0 ) {                                    // next = nextLevel[i][scope.itemNames.main.scopeItems];                                    var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', nextLevel[i][scope.itemNames.main.display]);                                    scope.iconBar = scope.iconBar + iconbarItem + '<md-menu>';                                    createDfxMenuItem( nextLevel[i], 'singleMenuItem', optionsType);                                    buildNextLevel( nextLevel[i][scope.itemNames.main.scopeItems], optionsType );                                    scope.iconBar = scope.iconBar + '</md-menu-content></md-menu></md-menu-item>';                                } else {                                    if ( nextLevel[i][scope.itemNames.main.type] === 'divider' ) {                                        scope.iconBar = scope.iconBar + '<md-menu-divider></md-menu-divider>';                                    } else if ( nextLevel[i][scope.itemNames.main.type] === 'title' ) {                                        scope.iconBar = scope.iconBar + '<md-menu-item class="tree-menu-title"><div>'+'{{'+nextLevel[i][scope.itemNames.main.label]+'}}</div></md-menu-item>';                                    } else {                                        var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', [scope.itemNames.main.display]);                                        scope.iconBar = scope.iconBar + iconbarItem;                                        createDfxMenuItem( nextLevel[i], 'singleMenuItem', optionsType );                                    }                                }                            }                        }else{                            for (var i = 0; i < nextLevel.length; i++) {                                if ( nextLevel[i].menuItems.value.length > 0 ) {                                    // next = nextLevel[i].menuItems.value;                                    var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display);                                    scope.iconBar = scope.iconBar + iconbarItem + '<md-menu>';                                    createDfxMenuItem( nextLevel[i], 'singleMenuItem', optionsType);                                    buildNextLevel( nextLevel[i].menuItems.value, optionsType );                                    scope.iconBar = scope.iconBar + '</md-menu-content></md-menu></md-menu-item>';                                } else {                                    if ( nextLevel[i].divider === true ) {                                        scope.iconBar = scope.iconBar + '<md-menu-divider></md-menu-divider>';                                    } else if ( nextLevel[i].title === true ) {                                        scope.iconBar = scope.iconBar + '<md-menu-item class="tree-menu-title"><div>'+'{{'+nextLevel[i].label+'}}</div></md-menu-item>';                                    } else {                                        var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display);                                        scope.iconBar = scope.iconBar + iconbarItem;                                        createDfxMenuItem( nextLevel[i], 'singleMenuItem', optionsType );                                    }                                }                            }                        }                    }                }                var createDfxMenuItem = function( dfxMenuItem, type, optionsType ) {                    if(optionsType==='static'){                        if ( typeof dfxMenuItem.icon === 'string' ) {                             var tempIcon = dfxMenuItem.icon;                            dfxMenuItem.icon = {                                 "value": tempIcon,                                 "type":  dfxMenuItem.hasOwnProperty('iconType') ? dfxMenuItem.iconType : 'fa-icon'                             }                        }                                            var tempPropObject = {};                        tempPropObject.ifFaIcon =                   dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'fa-icon' ? true : false;                        tempPropObject.ifSvgIcon =                  dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'svg-icon' ? true : false;                        tempPropObject.ifItemShortcut =             dfxMenuItem.shortcut.length > 0 ? true : false;                        tempPropObject.itemShortcut =               dfxMenuItem.shortcut;                        tempPropObject.ifItemNotification =         dfxMenuItem.notification.length > 0 ? true : false;                        tempPropObject.itemDisabled =               dfxMenuItem.disabled;                        tempPropObject.itemClick =                  dfxMenuItem.menuItems.value.length > 0 ? '$mdOpenMenu();'+dfxMenuItem.onclick : dfxMenuItem.onclick;                        if ( angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign) ) {                            tempPropObject.faIcon =                 dfxMenuItem.icon.value.indexOf("'") == -1 ? 'fa-home' : eval(dfxMenuItem.icon.value);                            tempPropObject.svgIcon =                dfxMenuItem.icon.value.indexOf("'") == -1 ? 'home' : eval(dfxMenuItem.icon.value);                            tempPropObject.itemLabel =              $filter('checkExpression')(dfxMenuItem.label);                                                        tempPropObject.itemNotification =       dfxMenuItem.notification;                            tempPropObject.itemDisplay =            true;                        } else {                            tempPropObject.faIcon =                 dfxMenuItem.icon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.icon.value+'}}' : eval(dfxMenuItem.icon.value);                            tempPropObject.svgIcon =                dfxMenuItem.icon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.icon.value+'}}' : eval(dfxMenuItem.icon.value);                            tempPropObject.itemLabel =              '{{'+dfxMenuItem.label+'}}';                                                        tempPropObject.itemNotification =       '{{'+dfxMenuItem.notification+'}}';                            tempPropObject.itemDisplay =            typeof dfxMenuItem.display === 'string' ? dfxMenuItem.display.replace(/"/g, '\'') : dfxMenuItem.display;                                                }                    } else {                        var tempPropObject = {};                        if ( angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign) ) {                            tempPropObject.ifFaIcon =               dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'fa-icon' ? true : false;                            tempPropObject.ifSvgIcon =              dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'svg-icon' ? true : false;                            tempPropObject.ifItemShortcut =         dfxMenuItem.shortcut.length > 0 ? true : false;                            tempPropObject.itemShortcut =           dfxMenuItem.shortcut;                            tempPropObject.ifItemNotification =     dfxMenuItem.notification.length > 0 ? true : false;                            tempPropObject.itemDisabled =           dfxMenuItem.disabled;                            tempPropObject.itemClick =              dfxMenuItem.menuItems.value.length > 0 ? '$mdOpenMenu();'+dfxMenuItem.onclick : dfxMenuItem.onclick;                            tempPropObject.faIcon =                 dfxMenuItem.icon.value.indexOf("'") == -1 ? 'fa-home' : eval(dfxMenuItem.icon.value);                            tempPropObject.svgIcon =                dfxMenuItem.icon.value.indexOf("'") == -1 ? 'home' : eval(dfxMenuItem.icon.value);                            tempPropObject.itemLabel =              $filter('checkExpression')(dfxMenuItem.label);                                                        tempPropObject.itemNotification =       dfxMenuItem.notification;                            tempPropObject.itemDisplay =            true;                        } else {                            tempPropObject.ifFaIcon =               dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name].length > 0 && dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.type] === 'fa-icon' ? true : false;                            tempPropObject.ifSvgIcon =              dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name].length > 0 && dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.type] === 'svg-icon' ? true : false;                            tempPropObject.ifItemShortcut =         dfxMenuItem[scope.itemNames.main.shortcut].length > 0 ? true : false;                            tempPropObject.itemShortcut =           dfxMenuItem[scope.itemNames.main.shortcut];                            tempPropObject.ifItemNotification =     dfxMenuItem[scope.itemNames.main.notification].length > 0 ? true : false;                            tempPropObject.itemDisabled =           dfxMenuItem[scope.itemNames.main.disabled];                            tempPropObject.itemClick =              dfxMenuItem[scope.itemNames.main.scopeItems].length > 0 ? '$mdOpenMenu();'+dfxMenuItem[scope.itemNames.main.onclick] : dfxMenuItem[scope.itemNames.main.onclick];                            tempPropObject.faIcon =                 dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name].indexOf("'") == -1 ? '{{'+dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name]+'}}' : eval(dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name]);                            tempPropObject.svgIcon =                dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name].indexOf("'") == -1 ? '{{'+dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name]+'}}' : eval(dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name]);                            tempPropObject.itemLabel =              '{{'+dfxMenuItem[scope.itemNames.main.label]+'}}';                                                        tempPropObject.itemNotification =       '{{'+dfxMenuItem[scope.itemNames.main.notification]+'}}';                            tempPropObject.itemDisplay =            dfxMenuItem[scope.itemNames.main.display];                        }                    }                    var tempMenu = '';                    if ( type === 'singleMenuItem' ) {                        tempMenu = singleMenuItem                            .replace('{{ifFaIcon}}',           tempPropObject.ifFaIcon )                            .replace('{{ifSvgIcon}}',          tempPropObject.ifSvgIcon )                            .replace('{{faIcon}}',             tempPropObject.faIcon )                            .replace('{{svgIcon}}',            tempPropObject.svgIcon )                            .replace('{{itemLabel}}',          tempPropObject.itemLabel )                            .replace('{{ifItemShortcut}}',     tempPropObject.ifItemShortcut )                            .replace('{{itemShortcut}}',       tempPropObject.itemShortcut )                            .replace('{{ifItemNotification}}', tempPropObject.ifItemNotification )                            .replace('{{itemNotification}}',   tempPropObject.itemNotification )                            .replace('{{itemDisplay}}',        tempPropObject.itemDisplay )                            .replace('{{itemDisabled}}',       tempPropObject.itemDisabled )                            .replace('{{itemClick}}',          tempPropObject.itemClick );                    } else {                        tempMenu = rootMenuItem                            .replace('{{ifFaIcon}}',           tempPropObject.ifFaIcon )                            .replace('{{ifSvgIcon}}',          tempPropObject.ifSvgIcon )                            .replace('{{faIcon}}',             tempPropObject.faIcon )                            .replace('{{svgIcon}}',            tempPropObject.svgIcon )                            .replace('{{itemLabel}}',          tempPropObject.itemLabel )                            .replace('{{ifItemShortcut}}',     tempPropObject.ifItemShortcut )                            .replace('{{itemShortcut}}',       tempPropObject.itemShortcut )                            .replace('{{ifItemNotification}}', tempPropObject.ifItemNotification )                            .replace('{{itemNotification}}',   tempPropObject.itemNotification )                            .replace('{{itemDisplay}}',        tempPropObject.itemDisplay )                            .replace('{{itemDisabled}}',       tempPropObject.itemDisabled )                            .replace('{{itemClick}}',          tempPropObject.itemClick );                    }                    if(optionsType==='static'){                                                if ( dfxMenuItem.menuItems.value.length > 0 ) {                            scope.iconBar = scope.iconBar + tempMenu +'<md-menu-content width="4">';                        } else {                            if ( type === 'singleMenuItem' ) {                                scope.iconBar = scope.iconBar + tempMenu + '</md-menu-item>';                            } else {                                scope.iconBar = scope.iconBar + tempMenu + '<md-menu-content width="4"></md-menu-content>';                            }                        }                     }else{                        if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign)) {                            if ( dfxMenuItem[scope.itemNames.main.scopeItems].length > 0 ) {                                scope.iconBar = scope.iconBar + tempMenu +'<md-menu-content width="4">';                            } else {                                if ( type === 'singleMenuItem' ) {                                    scope.iconBar = scope.iconBar + tempMenu + '</md-menu-item>';                                } else {                                    scope.iconBar = scope.iconBar + tempMenu + '<md-menu-content width="4"></md-menu-content>';                                }                            }                            }else{                            if ( dfxMenuItem.menuItems.value.length > 0 ) {                                scope.iconBar = scope.iconBar + tempMenu +'<md-menu-content width="4">';                            } else {                                if ( type === 'singleMenuItem' ) {                                    scope.iconBar = scope.iconBar + tempMenu + '</md-menu-item>';                                } else {                                    scope.iconBar = scope.iconBar + tempMenu + '<md-menu-content width="4"></md-menu-content>';                                }                            }                            }                     }                }                scope.iconbarBuilder = function() {                    scope.iconBar = '<md-menu-bar>';                    if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign)) {                        if(scope.attributes.menuItemsType.value==='dynamic'){                            scope.iconbarArray = scope.$parent_scope[scope.itemNames.main.source];                            // scope.attributes.menuItems.value = scope.iconbarArray;                            for (var item = 0; item < scope.iconbarArray.length; item++) {                                scope.iconBar = scope.iconBar + '<md-menu>';                                if ( scope.iconbarArray[item][scope.itemNames.main.scopeItems].length > 0 ) {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', 'dynamic' );                                    buildNextLevel( scope.iconbarArray[item][scope.itemNames.main.scopeItems], item, 'dynamic');                                    scope.iconBar = scope.iconBar + '</md-menu-content>';                                } else {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', 'dynamic' );                                }                                scope.iconBar = scope.iconBar + '</md-menu>';                            };                        }else{                            scope.iconbarArray = scope.attributes.menuItems.value;                            for (var item = 0; item < scope.iconbarArray.length; item++) {                                scope.iconBar = scope.iconBar + '<md-menu>';                                if ( scope.iconbarArray[item].menuItems.value.length > 0 ) {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', 'static' );                                    buildNextLevel( scope.iconbarArray[item].menuItems.value, item, 'static');                                    scope.iconBar = scope.iconBar + '</md-menu-content>';                                } else {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', 'static' );                                }                                scope.iconBar = scope.iconBar + '</md-menu>';                            };                            // scope.attributes.menuItems.value = scope.iconbarArray;                        }                    }else{                        scope.iconbarArray = scope.attributes.menuItems.value;                        for (var item = 0; item < scope.iconbarArray.length; item++) {                            scope.iconBar = scope.iconBar + '<md-menu>';                            if ( scope.iconbarArray[item].menuItems.value.length > 0 ) {                                createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', 'static' );                                buildNextLevel( scope.iconbarArray[item].menuItems.value, item, 'static');                                scope.iconBar = scope.iconBar + '</md-menu-content>';                            } else {                                createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', 'static' );                            }                            scope.iconBar = scope.iconBar + '</md-menu>';                        };                    }                    scope.iconBar = scope.iconBar + '</md-menu-bar>';                    scope.iconBarMenu = scope.iconBar;                    $timeout(function() {                        $('#' + component.id + '_menu_bar').html(scope.iconBarMenu);                        $compile($('#' + component.id + '_menu_bar').contents())(scope);                                            }, 0);                }                scope.$watch('attributes.menuItems.value', function(newVal, oldVal) {                    if ( newVal != null && !angular.equals(newVal, oldVal) ) {                        $timeout(function() {                            scope.iconbarBuilder();                        }, 0);                    }                }, true);                scope.$watch("attributes.dynamic.value", function(newValue){                    $timeout(function(){                        if (scope.attributes.dynamicPresent==null) {                            scope.attributes.dynamicPresent = { "value": "" };                            scope.attributes.dynamic = { "value": "" };                        }                        if(typeof newValue !== "undefined" && newValue !== null && newValue !== ""){                            scope.attributes.dynamicPresent.value = true;                        }else{                            scope.attributes.dynamicPresent.value = false;                        }                    }, 0);                });                scope.iconbarBuilder();            });        }    }}]);dfxGControls.directive('dfxGcWebImage', [ 'dfxGCUtil', '$timeout', function(dfxGCUtil, $timeout) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/image_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/image_design.html';            } else {                return '/gcontrols/web/image.html';            }        },        link: {            pre : function(scope, element, attrs, basectrl) {                var component = scope.getComponent(element);                scope.component_id = component.id;                scope.attributes = null;                var replaceImgSrc = function (src, component_id) {                    // if src value is scope variable                    if (src.indexOf("'") == -1) {                        $('#' + component_id).find('img').attr('src', '/images/dfx_image_blank.png');                    }                    // if src value is URL within quotes                    else if (src.indexOf("'") == 0 && src.lastIndexOf("'") == (src.length - 1) && src.length > 2) {                        var srcWithoutQuotes = src.replace(/'/g, '');                        $('#' + component_id).find('img').attr('src', srcWithoutQuotes);                    }                };                basectrl.init(scope, element, component, attrs, 'image').then(function() {                    if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) { // DESIGN TIME                        $timeout(function() {                            replaceImgSrc(scope.attributes.src.value, scope.component_id);                        }, 0);                    }                });                if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) { // DESIGN TIME                    scope.$watch('attributes.src.value', function (newValue) {                        if (newValue) {                            replaceImgSrc(newValue, scope.component_id);                        }                    });                }            }        }    }}]);dfxGControls.directive('dfxGcWebSlider', ['$timeout', '$mdDialog', function($timeout, $mdDialog) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/slider_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/slider_design.html';            } else {                return '/gcontrols/web/slider.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'slider').then(function(){                if(!scope.attributes.hasOwnProperty('isBindingPresent')){scope.attributes.isBindingPresent = { "value": "" };}                if(!scope.attributes.hasOwnProperty('dynamicPresent')){scope.attributes.dynamicPresent = { "value": false };}                if(!scope.attributes.hasOwnProperty('counterCheck')){scope.attributes.counterCheck = { "value": "" };}                if(!scope.attributes.hasOwnProperty('selectedIndex')){scope.attributes.selectedIndex = { "value": "" };}                if ( !scope.attributes.hasOwnProperty('flex') ) { scope.attributes.flex = { "value": 50 }; }                scope.attributes.binding.status = "overridden";                scope.attributes.isBindingPresent.status = "overridden";                scope.attributes.flex.status = "overridden";                scope.attributes.buttonClass.value = scope.attributes.buttonClass.value.replace("md-primary", "");                if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    if(scope.attributes.isBindingPresent.value){                        if(scope.$gcscope[scope.attributes.binding.value] instanceof Array){                            for(var i = 0; i < scope.$gcscope[scope.attributes.binding.value].length; i++){                                if(!isNaN(scope.$gcscope[scope.attributes.binding.value][i][scope.attributes.displayValue.value])){                                    scope.$gcscope[scope.attributes.binding.value][i][scope.attributes.displayValue.value] = parseInt(scope.$gcscope[scope.attributes.binding.value][i][scope.attributes.displayValue.value]);                                }else{                                    /*console.log('Values should be numeric.');*/                                    break;                                }                            }                        }else{                            /*console.log('Binding data should be an array.');*/                        }                    }                }                if(scope.attributes.inputVisible.value === ""){                    scope.attributes.inputVisible.value = "true";                    scope.attributes.discrete.value = false;                    scope.attributes.selectedIndex.value = 0;                    scope.attributes.counterCheck.value = 1;                    scope.attributes.isBindingPresent.value = false;                }                scope.showOptionsEditor = function(ev) {                    $mdDialog.show({                        scope: scope.$new(),                        parent: angular.element(document.body),                        targetEvent: ev,                        clickOutsideToClose:true,                        ariaLabel: 'options-editor',                        templateUrl: '/gcontrols/web/slider_options_editor.html',                        onComplete: function() {                            $('.menu-structure li').eq(scope.attributes.selectedIndex.value).addClass('active');                        },                        controller: function() {                            scope.closeDialog = function() {                                $mdDialog.hide();                            }                        }                    });                }                scope.addSliderItem = function(){                    scope.attributes.slidersArray.status = "overridden";                    scope.attributes.counterCheck.value++;                    var par = "'parameter " + scope.attributes.counterCheck.value + ": '" ;                    var temp = Math.floor(Math.random() * (scope.attributes.maxValue.value - scope.attributes.minValue.value)) + scope.attributes.minValue.value;                    scope.attributes.slidersArray.value.push({"label": par, "value": temp});                    scope.attributes.selectedIndex.value = scope.attributes.slidersArray.value.length - 1;                    scope.attributes.currentItem = scope.attributes.slidersArray.value[scope.attributes.selectedIndex.value];                    $timeout(function() { scope.activeOption(); }, 0);                };                scope.attributes.currentItem = scope.attributes.slidersArray.value[scope.attributes.selectedIndex.value];                scope.activeOption = function() {                    $('.menu-structure li').removeClass('active');                    $('.menu-structure li').eq( scope.attributes.selectedIndex.value ).addClass('active');                }                scope.selectSliderItem = function( index ) {                    scope.attributes.slidersArray.status = "overridden";                    scope.attributes.selectedIndex.value = index;                    scope.attributes.currentItem = scope.attributes.slidersArray.value[index];                    scope.activeOption();                }                scope.moveOptionUp = function() {                    if ( scope.attributes.selectedIndex.value > 0 ) {                        var movedOption = scope.attributes.currentItem,                            fromIndex = scope.attributes.selectedIndex.value,                            toIndex = scope.attributes.selectedIndex.value - 1;                        scope.attributes.slidersArray.value.splice(fromIndex, 1);                        scope.attributes.slidersArray.value.splice(toIndex, 0, movedOption);                        --scope.attributes.selectedIndex.value;                        scope.attributes.currentItem = scope.attributes.slidersArray.value[scope.attributes.selectedIndex.value];                        scope.activeOption();                    }                }                scope.moveOptionDown = function() {                    if ( scope.attributes.selectedIndex.value < (scope.attributes.slidersArray.value.length - 1) ) {                        var movedOption = scope.attributes.currentItem,                            fromIndex = scope.attributes.selectedIndex.value,                            toIndex = scope.attributes.selectedIndex.value + 1;                        scope.attributes.slidersArray.value.splice(fromIndex, 1);                        scope.attributes.slidersArray.value.splice(toIndex, 0, movedOption);                        ++scope.attributes.selectedIndex.value;                        scope.attributes.currentItem = scope.attributes.slidersArray.value[scope.attributes.selectedIndex.value];                        scope.activeOption();                    }                }                scope.removeSliderItem = function(){                    scope.attributes.slidersArray.status = "overridden";                    scope.attributes.selectedIndex.value = parseInt(scope.attributes.selectedIndex.value);                    if(scope.attributes.slidersArray.value.length > 1){                        scope.attributes.slidersArray.value.splice(scope.attributes.selectedIndex.value, 1);                        if ( scope.attributes.selectedIndex.value > 0 ) {                            scope.attributes.selectedIndex.value--;                        }                        scope.attributes.currentItem = scope.attributes.slidersArray.value[scope.attributes.selectedIndex.value];                        scope.activeOption();                    }                }                scope.$watch('attributes.selectedIndex.value', function(newValue){                    scope.attributes.selectedIndex.status = "overridden";                    scope.attributes.selectedIndex.value = parseInt(newValue);                });                scope.$watch('attributes.binding.value', function(newValue){                    if(newValue){                        scope.attributes.isBindingPresent.value = true;                    }else{                        scope.attributes.isBindingPresent.value = false;                    }                });                scope.$watch('attributes.source.value', function(newValue){                    if(newValue){                        scope.attributes.dynamicPresent.value = true;                    }else{                        scope.attributes.dynamicPresent.value = false;                    }                });                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    basectrl.bindScopeVariable(scope, component.attributes.binding.value);                    basectrl.bindScopeVariable(scope, component.attributes.source.value);                }                scope.changeWidth = function(){                    $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                };                if (!angular.isDefined(attrs.dfxGcEdit)) {                    scope.changeWidth();                }            });        }    }}]);dfxGControls.directive('dfxGcWebSelect', ['$timeout', '$mdDialog', function($timeout, $mdDialog) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/select_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/select_design.html';            } else {                return '/gcontrols/web/select.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'select').then(function(){                if (!scope.attributes.hasOwnProperty('flex')) {scope.attributes.flex = { "value": 20 }; }                if (!scope.attributes.hasOwnProperty('isBindingPresent')) {scope.attributes.isBindingPresent = { "value": "init" };}                if (!scope.attributes.hasOwnProperty('dynamicPresent')) {scope.attributes.dynamicPresent = { "value": false };}                if (!scope.attributes.hasOwnProperty('currentIndex')) {scope.attributes.currentIndex = { "value": 0 };}                if (!scope.attributes.hasOwnProperty('counterSelectOptions')) {scope.attributes.counterSelectOptions = { "value": "" };}                if (scope.attributes.hasOwnProperty('isClicked')){delete scope.attributes.isClicked;}                if (!scope.attributes.hasOwnProperty('optionsType')){scope.attributes.optionsType = {"value": "static"};}                scope.attributes.flex.status = "overridden";                scope.attributes.currentIndex.status = "overridden";                scope.attributes.currentItem.status = "overridden";                scope.attributes.binding.status = "overridden";                scope.attributes.options.status = "overridden";                scope.attributes.counterSelectOptions.status = "overridden";                scope.attributes.optionsType.status = 'overridden';                if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    scope.attributes.currentItem = scope.attributes.staticOptions.value[scope.attributes.currentIndex.value];                    if(scope.$gcscope[scope.attributes.options.source]){                        scope.attributes.empty.value = scope.$gcscope[scope.attributes.options.source][0][scope.attributes.options.value];                    }                }                if(scope.attributes.counterSelectOptions.value === ""){                    scope.attributes.isBindingPresent.value = false;                    scope.attributes.counterSelectOptions.value = 2;                    scope.attributes.currentItem = scope.attributes.staticOptions.value[0];                }                scope.showOptionsEditor = function(ev) {                    $mdDialog.show({                        scope: scope.$new(),                        parent: angular.element(document.body),                        targetEvent: ev,                        clickOutsideToClose:true,                        ariaLabel: 'options-editor',                        templateUrl: '/gcontrols/web/select_options_editor.html',                        onComplete: function() {                            $('.menu-structure li').eq(scope.attributes.currentIndex.value).addClass('active');                        },                        controller: function() {                            scope.closeDialog = function() {                                $mdDialog.hide();                            }                        }                    });                }                scope.activeOption = function() {                    $('.menu-structure li').removeClass('active');                    $('.menu-structure li').eq( scope.attributes.currentIndex.value ).addClass('active');                }                scope.selectOptionItem = function( index ) {                    scope.attributes.staticOptions.status = "overridden";                    scope.attributes.currentIndex.value = index;                    scope.attributes.currentItem = scope.attributes.staticOptions.value[scope.attributes.currentIndex.value];                    scope.activeOption();                }                scope.addItem = function(){                    scope.attributes.staticOptions.status = "overridden";                    ++scope.attributes.counterSelectOptions.value;                    var optval = "option_value_" + scope.attributes.counterSelectOptions.value;                    var optdis = "'option display " + scope.attributes.counterSelectOptions.value + "'";                    scope.attributes.currentIndex.value = scope.attributes.currentIndex.value + 1;                    scope.attributes.staticOptions.value.splice(scope.attributes.currentIndex.value, 0, {"display":optdis, "value":optval, status: "overridden"});                    scope.attributes.currentItem = scope.attributes.staticOptions.value[scope.attributes.currentIndex.value];                    $timeout(function() { scope.activeOption(); }, 0);                };                scope.moveOptionUp = function() {                    if ( scope.attributes.currentIndex.value > 0 ) {                        var movedOption = scope.attributes.currentItem,                            fromIndex = scope.attributes.currentIndex.value,                            toIndex = scope.attributes.currentIndex.value - 1;                        scope.attributes.staticOptions.value.splice(fromIndex, 1);                        scope.attributes.staticOptions.value.splice(toIndex, 0, movedOption);                        --scope.attributes.currentIndex.value;                        scope.attributes.currentItem = scope.attributes.staticOptions.value[scope.attributes.currentIndex.value];                        scope.activeOption();                    }                }                scope.moveOptionDown = function() {                    if ( scope.attributes.currentIndex.value < ( scope.attributes.staticOptions.value.length - 1 )) {                        var movedOption = scope.attributes.currentItem,                            fromIndex = scope.attributes.currentIndex.value,                            toIndex = scope.attributes.currentIndex.value + 1;                        scope.attributes.staticOptions.value.splice(fromIndex, 1);                        scope.attributes.staticOptions.value.splice(toIndex, 0, movedOption);                        ++scope.attributes.currentIndex.value;                        scope.attributes.currentItem = scope.attributes.staticOptions.value[scope.attributes.currentIndex.value];                        scope.activeOption();                    }                }                scope.removeOption = function(){                    scope.attributes.staticOptions.status = "overridden";                    if(scope.attributes.staticOptions.value.length === 1){                        /*console.log('The last option can not be deleted');*/                        scope.attributes.currentIndex.value = 0;                        scope.attributes.currentItem = scope.attributes.staticOptions.value[0];                    }else{                        var temp = scope.attributes.currentIndex.value;                        scope.attributes.staticOptions.value.splice(temp, 1);                        if(temp === 0){                            scope.attributes.currentIndex.value = 0;                            scope.attributes.currentItem = scope.attributes.staticOptions.value[0];                        }else{                            scope.attributes.currentIndex.value = temp - 1;                            scope.attributes.currentItem = scope.attributes.staticOptions.value[scope.attributes.currentIndex.value];                        }                    }                    scope.activeOption();                };                scope.hideWebGcSelectMask = function() {                    $('body > md-backdrop, body > div.md-scroll-mask, body > div.md-select-menu-container.md-active').fadeOut(250);                }                $('body > md-backdrop').on('click', function(){ scope.hideWebGcSelectMask(); });                scope.$watch('attributes.currentItem', function(newValue, oldValue){                    for(var i =0; i < scope.attributes.staticOptions.value.length; i++){                        if(newValue.value === scope.attributes.staticOptions.value[i].value && newValue.display === scope.attributes.staticOptions.value[i].display){                            scope.attributes.currentIndex.value = i;                            break;                        }                    }                    scope.attributes.currentItem = scope.attributes.staticOptions.value[scope.attributes.currentIndex.value];                });                scope.$watch('attributes.binding.value', function(newValue){                    if(newValue){                        scope.attributes.isBindingPresent.value = true;                    }else{                        scope.attributes.isBindingPresent.value = false;                    }                });                scope.$watch('attributes.options.source', function(newValue){                    if(newValue){                        scope.attributes.dynamicPresent.value = true;                    }else{                        scope.attributes.dynamicPresent.value = false;                    }                });                scope.$watch('$gcscope[attributes.binding.value]', function (newVal) {                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        if(scope.attributes.isBindingPresent.value){                            var bindingString = scope.attributes.binding.value;                            eval("scope." + bindingString + "= newVal ;");                        }                    }                });                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    basectrl.bindScopeVariable( scope, component.attributes.binding.value);                    basectrl.bindScopeVariable(scope, component.attributes.options.source);                    for (var i = 0; i < scope.attributes.staticOptions.value.length; i++) {                        switch ( scope.attributes.staticOptions.value[i].value ) {                            case 'true': scope.attributes.staticOptions.value[i].value = true; break;                            case 'false': scope.attributes.staticOptions.value[i].value = false; break;                        }                                            }                    if(scope.attributes.currentItem.value==='true'){                        scope.attributes.currentItem.value = true;                    } else if (scope.attributes.currentItem.value==='false'){                                                scope.attributes.currentItem.value = false;                    }                }                scope.changeWidth = function(){                    $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                };                if (!angular.isDefined(attrs.dfxGcEdit)) {                    scope.changeWidth();                }            });        }    }}]);dfxGControls.directive('dfxGcWebSwitch', ['$timeout', '$mdDialog', function($timeout, $mdDialog) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/switch_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/switch_design.html';            } else {                return '/gcontrols/web/switch.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'switch').then(function(){                if(!scope.attributes.hasOwnProperty('isBindingPresent')){scope.attributes.isBindingPresent = {"value": false};}                if(!scope.attributes.hasOwnProperty('dynamicPresent')){scope.attributes.dynamicPresent = {"value": false};}                if(!scope.attributes.hasOwnProperty('selectedIndex')){scope.attributes.selectedIndex = {"value": 0};}                if(!scope.attributes.hasOwnProperty('counterSwitch')){scope.attributes.counterSwitch = { "value": 1 };}                if(!scope.attributes.hasOwnProperty('optionsType')){scope.attributes.optionsType = {"value": "static"};}                                scope.attributes.buttonClass.value = scope.attributes.buttonClass.value.replace("md-primary", "");                scope.attributes.switchValue.status = "overridden" ;                scope.attributes.binding.status = "overridden" ;                scope.attributes.source.status = "overridden" ;                scope.attributes.staticArray.status = "overridden" ;                scope.attributes.selectedIndex.status = "overridden" ;                scope.attributes.optionsType.status = 'overridden';                scope.dynamicSource = false;                if(scope.attributes.displayValue.value === ""){                    scope.attributes.displayValue.value = false;                    scope.attributes.selectedIndex.value = 0;                }                scope.showOptionsEditor = function(ev) {                    $mdDialog.show({                        scope: scope.$new(),                        parent: angular.element(document.body),                        targetEvent: ev,                        clickOutsideToClose:true,                        ariaLabel: 'options-editor',                        templateUrl: '/gcontrols/web/switch_options_editor.html',                        onComplete: function() {                            $('.menu-structure li').eq(scope.attributes.selectedIndex.value).addClass('active');                        },                        controller: function() {                            scope.currentItem = scope.attributes.staticArray.value[scope.attributes.selectedIndex.value];                            scope.closeDialog = function() {                                $mdDialog.hide();                            }                        }                    });                }                scope.activeOption = function() {                    $('.menu-structure li').removeClass('active');                    $('.menu-structure li').eq( scope.attributes.selectedIndex.value ).addClass('active');                }                scope.selectOptionItem = function( index ) {                    scope.attributes.staticArray.status = "overridden";                    scope.attributes.selectedIndex.value = index;                    scope.currentItem = scope.attributes.staticArray.value[scope.attributes.selectedIndex.value];                    scope.activeOption();                }                scope.addSwitchItem = function(){                    scope.attributes.staticArray.status = "overridden" ;                    scope.attributes.counterSwitch.value++;                    var opt = "'option" + scope.attributes.counterSwitch.value +": '" ;                    scope.attributes.selectedIndex.value++;                    scope.attributes.staticArray.value.splice(scope.attributes.selectedIndex.value, 0, {"label": opt, "checked":"", "unchecked":"", "isChecked": false});                    scope.currentItem = scope.attributes.staticArray.value[scope.attributes.selectedIndex.value];                    $timeout(function() { scope.activeOption(); }, 0);                };                scope.moveOptionUp = function() {                    if ( scope.attributes.selectedIndex.value > 0 ) {                        var movedOption = scope.currentItem,                            fromIndex = scope.attributes.selectedIndex.value,                            toIndex = scope.attributes.selectedIndex.value - 1;                        scope.attributes.staticArray.value.splice(fromIndex, 1);                        scope.attributes.staticArray.value.splice(toIndex, 0, movedOption);                        --scope.attributes.selectedIndex.value;                        scope.currentItem = scope.attributes.staticArray.value[scope.attributes.selectedIndex.value];                        scope.activeOption();                    }                }                scope.moveOptionDown = function() {                    if ( scope.attributes.selectedIndex.value < ( scope.attributes.staticArray.value.length - 1 )) {                        var movedOption = scope.currentItem,                            fromIndex = scope.attributes.selectedIndex.value,                            toIndex = scope.attributes.selectedIndex.value + 1;                        scope.attributes.staticArray.value.splice(fromIndex, 1);                        scope.attributes.staticArray.value.splice(toIndex, 0, movedOption);                        ++scope.attributes.selectedIndex.value;                        scope.currentItem = scope.attributes.staticArray.value[scope.attributes.selectedIndex.value];                        scope.activeOption();                    }                }                scope.removeSwitchItem = function(){                    scope.attributes.staticArray.status = "overridden";                    if(scope.attributes.staticArray.value.length === 1){                        scope.attributes.selectedIndex.value = 0;                        scope.currentItem = scope.attributes.staticArray.value[0];                    }else{                        var temp = scope.attributes.selectedIndex.value;                        scope.attributes.staticArray.value.splice(temp, 1);                        if(temp === 0){                            scope.attributes.selectedIndex.value = 0;                            scope.currentItem = scope.attributes.staticArray.value[0];                        }else{                            scope.attributes.selectedIndex.value = temp - 1;                            scope.currentItem = scope.attributes.staticArray.value[scope.attributes.selectedIndex.value];                        }                    }                    scope.activeOption();                };                scope.ngClickFunc = function(){                    if(scope.attributes.onclick.value){                        $timeout(function(){                            eval('scope.' + scope.attributes.onclick.value) ;                        }, 0);                    }                };                scope.$watch('attributes.selectedIndex.value', function(newValue){                    scope.attributes.selectedIndex.value = parseInt(newValue);                });                 scope.$watch('attributes.binding.value', function(newValue){                     var bindingExp = /^[-a-z0-9_]+$/gi,                         bindingRes = bindingExp.test( newValue),                         startString = isNaN( newValue.charAt(0) );                     if( newValue && bindingRes && startString ) {                         scope.attributes.isBindingPresent.value = true;                     }else{                         scope.attributes.isBindingPresent.value = false;                    }                 });                scope.$watch('attributes.source.value', function(newValue){                    var sourceExp = /^[-a-z0-9_]+$/gi,                        sourceRes = sourceExp.test( newValue),                        startString = isNaN( newValue.charAt(0) );                    if( newValue && sourceRes && startString ){                        scope.attributes.dynamicPresent.value = true;                    }else{                        scope.attributes.dynamicPresent.value = false;                    }                    if(scope.attributes.dynamicPresent.value && scope.attributes.isBindingPresent.value){                        scope.attributes.bindingBoolean.value = [];                        if ( scope.$gcscope[scope.attributes.source.value] && scope.$gcscope[scope.attributes.binding.value]) {                            for(var i = 0; i < scope.$gcscope[scope.attributes.source.value].length; i++){                                if(scope.$gcscope[scope.attributes.binding.value][i]=== scope.$gcscope[scope.attributes.source.value][i][scope.attributes.switchValue.trueSwitchValue]){                                    scope.attributes.bindingBoolean.value.push(true);                                }else{                                    scope.attributes.bindingBoolean.value.push(false);                                }                            }                        }                    }else if(scope.attributes.dynamicPresent.value === false){                        scope.attributes.bindingBoolean.value = [];                        if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)){                            for(var i = 0; i < scope.attributes.staticArray.value.length; i++){                                if(scope.$gcscope[scope.attributes.binding.value]){                                    var checked = '';                                    var temp = scope.attributes.staticArray.value[i].checked ;                                    if(angular.isString(temp) && (temp.charAt(0) === '\'' && temp.charAt(temp.length-1)==='\'')||(temp.charAt(0) === '\"' && temp.charAt(temp.length-1)==='\"')){                                        checked = temp.substring(1, temp.length-1);                                    }else if(temp === 'true'){                                        checked = 'true';                                    }else {                                        try{                                            var eval_checked = eval('scope.' + scope.attributes.staticArray.value[i].checked) ;                                            checked = "" + eval_checked ;                                            scope.attributes.staticArray.value[i].checked = eval_checked;                                        }catch(e){}                                    }                                    var checked_binding = '';                                    var binding_val = eval('scope.' + scope.attributes.binding.value)[i] ;                                    var temp_binding ="" + binding_val ;                                    if((temp_binding.charAt(0) === '\'' && temp_binding.charAt(temp_binding.length-1)==='\'')||(temp_binding.charAt(0) === '\"' && temp_binding.charAt(temp_binding.length-1)==='\"')){ // in case when js wraps in quoites                                        checked_binding = temp_binding.substring(1, temp_binding.length-1);                                        if(checked_binding === checked){                                            scope.attributes.bindingBoolean.value.push(true);                                        }else{                                            scope.attributes.bindingBoolean.value.push(false);                                        }                                    }else{                                        if(temp_binding === checked){                                            scope.attributes.bindingBoolean.value.push(true);                                        }else{                                            scope.attributes.bindingBoolean.value.push(false);                                        }                                    }                                }                                if(scope.attributes.staticArray.value[i].checked==='true'){scope.attributes.staticArray.value[i].checked=true;}                                if(scope.attributes.staticArray.value[i].unchecked==='false'){scope.attributes.staticArray.value[i].unchecked=false;}                            }                        }                    }                });                scope.$watchCollection('attributes.bindingBoolean.value', function (newVal, oldVal) {                    if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)){                        if(scope.attributes.isBindingPresent.value && scope.attributes.dynamicPresent.value && !scope.dynamicSource){                            var bindingString = scope.attributes.binding.value;                            if ( scope.$gcscope[scope.attributes.source.value] && scope.$gcscope[scope.attributes.binding.value] ) {                                for(var i = 0; i < scope.$gcscope[scope.attributes.source.value].length; i++){                                    if(scope.attributes.bindingBoolean.value[i]){                                        scope.$gcscope[scope.attributes.binding.value][i] = scope.$gcscope[scope.attributes.source.value][i][scope.attributes.switchValue.trueSwitchValue] ;                                    }else{                                        scope.$gcscope[scope.attributes.binding.value][i] = scope.$gcscope[scope.attributes.source.value][i][scope.attributes.switchValue.falseSwitchValue] ;                                    }                                }                            }                        }else if(scope.attributes.isBindingPresent.value && scope.attributes.dynamicPresent.value=== false && scope.$gcscope[scope.attributes.binding.value]){                            for(var i = 0; i < scope.attributes.staticArray.value.length; i++){                                if(scope.attributes.bindingBoolean.value[i]){                                    scope.$gcscope[scope.attributes.binding.value][i] = scope.attributes.staticArray.value[i].checked ;                                }else{                                    scope.$gcscope[scope.attributes.binding.value][i] = scope.attributes.staticArray.value[i].unchecked ;                                }                            }                        }                    }                });                scope.$watchCollection('$gcscope[attributes.binding.value]', function (newVal, oldVal) {                    if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        scope.attributes.bindingBoolean.value = [];                        if(scope.attributes.isBindingPresent.value && scope.attributes.dynamicPresent.value){                            if ( scope.$gcscope[scope.attributes.source.value] && scope.$gcscope[scope.attributes.binding.value] ) {                                for(var i = 0; i < scope.$gcscope[scope.attributes.source.value].length; i++){                                    if(scope.$gcscope[scope.attributes.binding.value][i]=== scope.$gcscope[scope.attributes.source.value][i][scope.attributes.switchValue.trueSwitchValue]){                                        scope.attributes.bindingBoolean.value.push(true);                                    }else{                                        scope.attributes.bindingBoolean.value.push(false);                                    }                                }                            }                        }else if(scope.attributes.isBindingPresent.value && scope.attributes.dynamicPresent.value=== false && scope.$gcscope[scope.attributes.binding.value]){                            for(var i = 0; i < scope.attributes.staticArray.value.length; i++){                                if(scope.$gcscope[scope.attributes.binding.value][i]=== scope.attributes.staticArray.value[i].checked){                                    scope.attributes.bindingBoolean.value.push(true);                                }else{                                    scope.attributes.bindingBoolean.value.push(false);                                }                            }                        }                     }                });                scope.$watch('$gcscope[attributes.source.value]', function(newVal, oldVal) {                    scope.dynamicSource = false;                    if ( !angular.equals(newVal, oldVal) && !angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit) ) {                        if ( scope.attributes.isBindingPresent.value && scope.$gcscope[scope.attributes.binding.value] ) {                            for(var i = 0; i < newVal.length; i++){                                if ( scope.$gcscope[scope.attributes.binding.value][i] === newVal[i][scope.attributes.switchValue.trueSwitchValue] ) {                                    scope.attributes.bindingBoolean.value.push(true);                                }else{                                    scope.attributes.bindingBoolean.value.push(false);                                }                            }                        }                    }                    scope.dynamicSource = true;                }, true);                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    basectrl.bindScopeVariable( scope, component.attributes.binding.value);                    basectrl.bindScopeVariable( scope, component.attributes.source.value );                    for(var i = 0; i < component.attributes.source.value.length; i++){                        scope.attributes.defaultArray.value.push(false);                    }                }            });        }    }}]);dfxGControls.directive('dfxGcWebCheckbox', ['$timeout', '$mdDialog', function($timeout, $mdDialog) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/checkbox_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/checkbox_design.html';            } else {                return '/gcontrols/web/checkbox.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'checkbox').then(function(){                if(!scope.attributes.hasOwnProperty('isBindingPresent')){scope.attributes.isBindingPresent = {"value": false};}                if(!scope.attributes.hasOwnProperty('dynamicPresent')){scope.attributes.dynamicPresent = {"value": false};}                if(!scope.attributes.hasOwnProperty('selectedIndex')){scope.attributes.selectedIndex = {"value": ""};}                if(!scope.attributes.hasOwnProperty('counterCheck')){scope.attributes.counterCheck = { "value": 1 };}                if (!scope.attributes.hasOwnProperty('optionsType')){scope.attributes.optionsType = {"value": "static"};}                scope.attributes.buttonClass.value = scope.attributes.buttonClass.value.replace("md-primary", "");                scope.attributes.checkValue.status = "overridden" ;                scope.attributes.binding.status = "overridden" ;                scope.attributes.source.status = "overridden" ;                scope.attributes.staticArray.status = "overridden";                scope.attributes.selectedIndex.status = "overridden";                scope.attributes.optionsType.status = 'overridden';                scope.dynamicSource = false;                if(scope.attributes.displayValue.value === ""){                    scope.attributes.displayValue.value = false;                    scope.attributes.selectedIndex.value = 0;                }                scope.showOptionsEditor = function(ev) {                    $mdDialog.show({                        scope: scope.$new(),                        parent: angular.element(document.body),                        targetEvent: ev,                        clickOutsideToClose:true,                        ariaLabel: 'options-editor',                        templateUrl: '/gcontrols/web/checkbox_options_editor.html',                        onComplete: function() {                            $('.menu-structure li').eq(scope.attributes.selectedIndex.value).addClass('active');                        },                        controller: function() {                            scope.currentItem = scope.attributes.staticArray.value[scope.attributes.selectedIndex.value];                            scope.closeDialog = function() {                                $mdDialog.hide();                            }                        }                    });                }                scope.activeOption = function() {                    $('.menu-structure li').removeClass('active');                    $('.menu-structure li').eq( scope.attributes.selectedIndex.value ).addClass('active');                }                scope.selectOptionItem = function( index ) {                    scope.attributes.staticArray.status = "overridden";                    scope.attributes.selectedIndex.value = index;                    scope.currentItem = scope.attributes.staticArray.value[scope.attributes.selectedIndex.value];                    scope.activeOption();                }                scope.addCheckItem = function(){                    scope.attributes.staticArray.status = "overridden" ;                    scope.attributes.counterCheck.value++;                    var opt = "'option" + scope.attributes.counterCheck.value +": '" ;                    scope.attributes.selectedIndex.value++;                    scope.attributes.staticArray.value.splice(scope.attributes.selectedIndex.value, 0, {"label": opt, "checked":"", "unchecked":"", "isChecked": false});                    scope.currentItem = scope.attributes.staticArray.value[scope.attributes.selectedIndex.value];                    $timeout(function() { scope.activeOption(); }, 0);                    scope.switchDirection(scope.attributes.direction.value);                };                scope.moveOptionUp = function() {                    if ( scope.attributes.selectedIndex.value > 0 ) {                        var movedOption = scope.currentItem,                            fromIndex = scope.attributes.selectedIndex.value,                            toIndex = scope.attributes.selectedIndex.value - 1;                        scope.attributes.staticArray.value.splice(fromIndex, 1);                        scope.attributes.staticArray.value.splice(toIndex, 0, movedOption);                        --scope.attributes.selectedIndex.value;                        scope.currentItem = scope.attributes.staticArray.value[scope.attributes.selectedIndex.value];                        scope.activeOption();                    }                }                scope.moveOptionDown = function() {                    if ( scope.attributes.selectedIndex.value < ( scope.attributes.staticArray.value.length - 1 )) {                        var movedOption = scope.currentItem,                            fromIndex = scope.attributes.selectedIndex.value,                            toIndex = scope.attributes.selectedIndex.value + 1;                        scope.attributes.staticArray.value.splice(fromIndex, 1);                        scope.attributes.staticArray.value.splice(toIndex, 0, movedOption);                        ++scope.attributes.selectedIndex.value;                        scope.currentItem = scope.attributes.staticArray.value[scope.attributes.selectedIndex.value];                        scope.activeOption();                    }                }                scope.removeCheckItem = function(){                    scope.attributes.staticArray.status = "overridden";                    if(scope.attributes.staticArray.value.length === 1){                        scope.attributes.selectedIndex.value = 0;                        scope.currentItem = scope.attributes.staticArray.value[0];                    }else{                        var temp = scope.attributes.selectedIndex.value;                        scope.attributes.staticArray.value.splice(temp, 1);                        if(temp === 0){                            scope.attributes.selectedIndex.value = 0;                            scope.currentItem = scope.attributes.staticArray.value[0];                        }else{                            scope.attributes.selectedIndex.value = temp - 1;                            scope.currentItem = scope.attributes.staticArray.value[scope.attributes.selectedIndex.value];                        }                    }                    scope.activeOption();                };                scope.switchDirection = function(direction){                    $timeout(function () {                        try{                            scope.checkboxes = '#' + scope.component_id + '> div.gc-checkbox';                            scope.checkboxes_arr = $(scope.checkboxes).children() ;                            if(direction === 'row'){                                for(var i = 1; i < scope.checkboxes_arr.length; i++){                                    $(scope.checkboxes_arr[i]).css("display", "inline-block");                                }                                scope.$apply(function(){});                            }else{                                for(var i = 1; i < scope.checkboxes_arr.length; i++){                                    $(scope.checkboxes_arr[i]).css("display", "block");                                }                            }                        }catch(e){                            /*console.log(e.message);*/                        }                    },0);                };                scope.ngClickFunc = function(){                    if(scope.attributes.onclick.value){                        $timeout(function(){                            eval('scope.' + scope.attributes.onclick.value) ;                        }, 0);                    }                };                scope.$watch('attributes.direction.value', function(newValue){                    scope.switchDirection(newValue);                });                scope.$watch('attributes.selectedIndex.value', function(newValue){                    scope.attributes.selectedIndex.value = parseInt(newValue);                });                scope.$watch('attributes.binding.value', function(newValue){                    var bindingExp = /^[-a-z0-9_]+$/gi,                        bindingRes = bindingExp.test( newValue),                        startString = isNaN( newValue.charAt(0) );                    if( newValue && bindingRes && startString ) {                        scope.attributes.isBindingPresent.value = true;                    }else{                        scope.attributes.isBindingPresent.value = false;                    }                });                scope.$watch('attributes.source.value', function(newValue){                    var sourceExp = /^[-a-z0-9_]+$/gi,                        sourceRes = sourceExp.test( newValue),                        startString = isNaN( newValue.charAt(0) );                    if( newValue && sourceRes && startString ){                        scope.attributes.dynamicPresent.value = true;                    }else{                        scope.attributes.dynamicPresent.value = false;                    }                    if(scope.attributes.dynamicPresent.value && scope.attributes.isBindingPresent.value){                        if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)){                            scope.attributes.bindingBoolean.value = [];                            if ( scope.$gcscope[scope.attributes.source.value] ) {                                for (var i = 0; i < scope.$gcscope[scope.attributes.source.value].length; i++) {                                    if (scope.$gcscope[scope.attributes.binding.value]) {                                        if (scope.$gcscope[scope.attributes.binding.value][i] === scope.$gcscope[scope.attributes.source.value][i][scope.attributes.checkValue.trueCheckValue]) {                                            scope.attributes.bindingBoolean.value.push(true);                                        } else {                                            scope.attributes.bindingBoolean.value.push(false);                                        }                                    }                                }                            }                        }                    }else if(scope.attributes.dynamicPresent.value===false && scope.attributes.isBindingPresent.value){                        if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)){                            scope.attributes.bindingBoolean.value = [];                            for(var i = 0; i < scope.attributes.staticArray.value.length; i++){                                if(scope.$gcscope[scope.attributes.binding.value]){                                    var checked = '';                                    var temp = scope.attributes.staticArray.value[i].checked ;                                    if(angular.isString(temp) && (temp.charAt(0) === '\'' && temp.charAt(temp.length-1)==='\'')||(temp.charAt(0) === '\"' && temp.charAt(temp.length-1)==='\"')){                                        checked = temp.substring(1, temp.length-1);                                    }else if(temp === 'true'){                                        checked = 'true';                                    }else {                                        try{                                            var eval_checked = eval('scope.' + scope.attributes.staticArray.value[i].checked) ;                                            checked = "" + eval_checked ;                                            scope.attributes.staticArray.value[i].checked = eval_checked;                                        }catch(e){}                                    }                                    var checked_binding = '';                                    var binding_val = eval('scope.' + scope.attributes.binding.value)[i] ;                                    var temp_binding ="" + binding_val ;                                    if((temp_binding.charAt(0) === '\'' && temp_binding.charAt(temp_binding.length-1)==='\'')||(temp_binding.charAt(0) === '\"' && temp_binding.charAt(temp_binding.length-1)==='\"')){ // in case when js wraps in quoites                                        checked_binding = temp_binding.substring(1, temp_binding.length-1);                                        if(checked_binding === checked){                                            scope.attributes.bindingBoolean.value.push(true);                                        }else{                                            scope.attributes.bindingBoolean.value.push(false);                                        }                                    }else{                                        if(temp_binding === checked){                                            scope.attributes.bindingBoolean.value.push(true);                                        }else{                                            scope.attributes.bindingBoolean.value.push(false);                                        }                                    }                                }                                if(scope.attributes.staticArray.value[i].checked==='true'){scope.attributes.staticArray.value[i].checked=true;}                                if(scope.attributes.staticArray.value[i].unchecked==='false'){scope.attributes.staticArray.value[i].unchecked=false;}                            }                        }                    }else if(scope.attributes.dynamicPresent.value===false && scope.attributes.isBindingPresent.value===false){                        if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)){                            scope.attributes.bindingBoolean.value = [];                            for(var i = 0; i < scope.attributes.staticArray.value.length; i++){                                    scope.attributes.bindingBoolean.value.push(false);                            }                        }                    }                }, true);                scope.$watchCollection('attributes.bindingBoolean.value', function (newVal, oldVal) {                    if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit) && !scope.dynamicSource ){                        if(scope.attributes.isBindingPresent.value && scope.attributes.dynamicPresent.value ){                            if ( scope.$gcscope[scope.attributes.source.value] && scope.$gcscope[scope.attributes.binding.value] ) {                                for(var i = 0; i < scope.$gcscope[scope.attributes.source.value].length; i++){                                    if(scope.attributes.bindingBoolean.value[i]){                                        scope.$gcscope[scope.attributes.binding.value][i] = scope.$gcscope[scope.attributes.source.value][i][scope.attributes.checkValue.trueCheckValue] ;                                    }else{                                        scope.$gcscope[scope.attributes.binding.value][i] = scope.$gcscope[scope.attributes.source.value][i][scope.attributes.checkValue.falseCheckValue] ;                                    }                                }                            }                        }else if(scope.attributes.isBindingPresent.value && scope.attributes.dynamicPresent.value=== false && scope.$gcscope[scope.attributes.binding.value]){                            for(var i = 0; i < scope.attributes.staticArray.value.length; i++){                                if(scope.attributes.bindingBoolean.value[i]){                                    scope.$gcscope[scope.attributes.binding.value][i] = scope.attributes.staticArray.value[i].checked ;                                }else{                                    scope.$gcscope[scope.attributes.binding.value][i] = scope.attributes.staticArray.value[i].unchecked ;                                }                            }                        }                    }                });                scope.$watchCollection('$gcscope[attributes.binding.value]', function (newVal, oldVal) {                    if(!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        scope.attributes.bindingBoolean.value = [];                        if(scope.attributes.isBindingPresent.value && scope.attributes.dynamicPresent.value ){                            if ( scope.$gcscope[scope.attributes.source.value] && scope.$gcscope[scope.attributes.binding.value] ) {                                for(var i = 0; i < scope.$gcscope[scope.attributes.source.value].length; i++){                                    if(scope.$gcscope[scope.attributes.binding.value][i]=== scope.$gcscope[scope.attributes.source.value][i][scope.attributes.checkValue.trueCheckValue]){                                        scope.attributes.bindingBoolean.value.push(true);                                    }else{                                        scope.attributes.bindingBoolean.value.push(false);                                    }                                }                            }                        }else if(scope.attributes.isBindingPresent.value && scope.attributes.dynamicPresent.value=== false && scope.$gcscope[scope.attributes.binding.value]){                            for(var i = 0; i < scope.attributes.staticArray.value.length; i++){                                if(scope.$gcscope[scope.attributes.binding.value][i]=== scope.attributes.staticArray.value[i].checked){                                    scope.attributes.bindingBoolean.value.push(true);                                }else{                                    scope.attributes.bindingBoolean.value.push(false);                                }                            }                        }                    }                });                scope.$watch('$gcscope[attributes.source.value]', function(newVal, oldVal) {                    scope.dynamicSource = false;                    if ( !angular.equals(newVal, oldVal) && !angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit) ) {                        if ( scope.attributes.isBindingPresent.value && scope.$gcscope[scope.attributes.binding.value] ) {                            for(var i = 0; i < newVal.length; i++){                                if ( scope.$gcscope[scope.attributes.binding.value][i] === newVal[i][scope.attributes.checkValue.trueCheckValue] ) {                                    scope.attributes.bindingBoolean.value.push(true);                                }else{                                    scope.attributes.bindingBoolean.value.push(false);                                }                            }                        }                    }                    if (scope.attributes.source.value && scope.attributes.source.value!==''){                        scope.dynamicSource = true;                    }                }, true);                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    basectrl.bindScopeVariable(scope, component.attributes.binding.value);                    basectrl.bindScopeVariable(scope, component.attributes.source.value);                    for(var i = 0; i < component.attributes.source.value.length; i++){                        scope.attributes.defaultArray.value.push(false);                    }                }            });        }    }}]);dfxGControls.directive('dfxGcWebTabs', ['$timeout', '$compile', function($timeout, $compile) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/tabs_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/tabs_design.html';            } else {                return '/gcontrols/web/tabs.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.$parent.getComponent(element);            basectrl.init(scope, element, component, attrs, 'tabs').then(function(){                scope.attributes.layoutType = { "value": "tabs" };                scope.attributes.initialized = { "value": true };                if(!scope.attributes.hasOwnProperty('tabIndex')){scope.attributes.tabIndex = { "value": "" }}                if(!scope.attributes.toolbar.hasOwnProperty('collapsible')){scope.attributes.toolbar.collapsible = { "value": "false" }}                if(!scope.attributes.toolbar.hasOwnProperty('collapsed')){scope.attributes.toolbar.collapsed = { "value": "false" }}                scope.attributes.toolbar.leftMenu.equalButtonSize = { "value": false };                scope.attributes.toolbar.leftMenu.initialClick = { "value": false };                scope.attributes.toolbar.leftMenu.dynamicPresent = { "value": false };                scope.attributes.toolbar.rightMenu.equalButtonSize = { "value": false };                scope.attributes.toolbar.rightMenu.initialClick = { "value": false };                scope.attributes.toolbar.rightMenu.dynamicPresent = { "value": false };                if(scope.attributes.toolbar.leftMenu.hasOwnProperty('iconBarClass')){delete scope.attributes.toolbar.leftMenu.iconBarClass;}                if(scope.attributes.toolbar.rightMenu.hasOwnProperty('iconBarClass')){delete scope.attributes.toolbar.rightMenu.iconBarClass;}                if(scope.attributes.toolbar.leftMenu.hasOwnProperty('buttonClass')){delete scope.attributes.toolbar.leftMenu.buttonClass;}                if(scope.attributes.toolbar.rightMenu.hasOwnProperty('buttonClass')){delete scope.attributes.toolbar.rightMenu.buttonClass;}                scope.attributes.flex.status = "overridden" ;                scope.attributes.tabs.status = "overridden" ;                scope.attributes.centerTabs.status = "overridden" ;                if(scope.attributes.tabIndex.value === ""){                    scope.attributes.tabIndex.value = 0;                }                scope.moveUpRow = function(index){                    if(index>0){                        var curCols = $('#' + scope.component_id + '_layout_' + scope.attributes.tabIndex.value + '_row_' + index).children() ;                        var nextCols = $('#' + scope.component_id + '_layout_' + scope.attributes.tabIndex.value + '_row_' + (index-1)).children() ;                        var curColsContent = [] ;                        var nextColsContent = [] ;                        for(var i =0; i < curCols.length; i++){                            curColsContent.push($(curCols[i]).html()) ;                        }                        for(var i =0; i < nextCols.length; i++){                            nextColsContent.push($(nextCols[i]).html()) ;                        }                        scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows.splice(index - 1, 2, scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[index], scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[index-1]);                        scope.swapContainerUp(scope.component_id, index, scope.attributes.tabIndex.value);                        $timeout(function(){                            var movedDownCols = $('#' + scope.component_id + '_layout_' + scope.attributes.tabIndex.value + '_row_' + (index - 1)).children() ;                            for(var j =0; j < movedDownCols.length; j++){                                $(movedDownCols[j]).html(curColsContent[j]) ;                                $compile($(movedDownCols[j]).contents())(scope);                            }                            var movedUpCols =  $('#' + scope.component_id + '_layout_' + scope.attributes.tabIndex.value + '_row_' + (index)).children() ;                            for(var k =0; k < movedUpCols.length; k++){                                $(movedUpCols[k]).html(nextColsContent[k]) ;                                $compile($(movedUpCols[k]).contents())(scope);                            }                        },0);                    }                };                scope.moveLeftCol = function(rowIndex, index){                    if(index > 0){                        var curCol = $('#' + scope.component_id + '_layout_' + scope.attributes.tabIndex.value + '_row_' + rowIndex + '_column_' + index) ;                        var leftCol = $('#' + scope.component_id + '_layout_' + scope.attributes.tabIndex.value + '_row_' + rowIndex + '_column_' + (index-1)) ;                        var curColHtml = curCol.html() ;                        var leftColHtml = leftCol.html() ;                        scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[rowIndex].cols.splice(index-1, 2, scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[rowIndex].cols[index], scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[rowIndex].cols[index-1]);                        scope.swapContainerLeft(scope.component_id, index, rowIndex, scope.attributes.tabIndex.value);                        $timeout(function(){                            curCol.html(leftColHtml);                            $compile(curCol.contents())(scope);                            leftCol.html(curColHtml);                            $compile(leftCol.contents())(scope);                        },0);                    }                };                scope.moveDownRow = function(index){                    if(index < scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows.length-1){                        var curCols = $('#' + scope.component_id + '_layout_' + scope.attributes.tabIndex.value + '_row_' + index).children() ;                        var nextCols = $('#' + scope.component_id + '_layout_' + scope.attributes.tabIndex.value + '_row_' + (index+1)).children() ;                        var curColsContent = [] ;                        var nextColsContent = [] ;                        for(var i =0; i < curCols.length; i++){                            curColsContent.push($(curCols[i]).html()) ;                        }                        for(var i =0; i < nextCols.length; i++){                            nextColsContent.push($(nextCols[i]).html()) ;                        }                        scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows.splice(index, 2, scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[index+1], scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[index]);                        scope.swapContainerDown(scope.component_id, index, scope.attributes.tabIndex.value);                        $timeout(function(){                            var movedDownCols = $('#' + scope.component_id + '_layout_' + scope.attributes.tabIndex.value + '_row_' + (index + 1)).children() ;                            for(var j =0; j < movedDownCols.length; j++){                                $(movedDownCols[j]).html(curColsContent[j]) ;                                $compile($(movedDownCols[j]).contents())(scope);                            }                            var movedUpCols =  $('#' + scope.component_id + '_layout_' + scope.attributes.tabIndex.value + '_row_' + (index)).children() ;                            for(var k =0; k < movedUpCols.length; k++){                                $(movedUpCols[k]).html(nextColsContent[k]) ;                                $compile($(movedUpCols[k]).contents())(scope);                            }                        },0);                    }                };                scope.moveRightCol = function(rowIndex, index){                    if(index < scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[rowIndex].cols.length - 1){                        var curCol = $('#' + scope.component_id + '_layout_' + scope.attributes.tabIndex.value + '_row_' + rowIndex + '_column_' + index) ;                        var rightCol = $('#' + scope.component_id + '_layout_' + scope.attributes.tabIndex.value + '_row_' + rowIndex + '_column_' + (index+1)) ;                        var curColHtml = curCol.html() ;                        var rightColHtml = rightCol.html() ;                        scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[rowIndex].cols.splice(index, 2, scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[rowIndex].cols[index+1], scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[rowIndex].cols[index]);                        scope.swapContainerRight(scope.component_id, index, rowIndex, scope.attributes.tabIndex.value);                        $timeout(function(){                            curCol.html(rightColHtml);                            $compile(curCol.contents())(scope);                            rightCol.html(curColHtml);                            $compile(rightCol.contents())(scope);                        },0);                    }                };                scope.setClasses = function(){                    $timeout(function () {                        try{                            for(var k = 0; k < scope.attributes.tabs.value.length; k++){                                var tabLayoutRows = $('#' + scope.component_id + '_tab_' + k).children();                                for(var i = 0; i < tabLayoutRows.length; i++){                                    var tabLayoutRowsCols = $(tabLayoutRows[i]).children() ;                                    for(var j = 0; j < tabLayoutRowsCols.length; j++){                                        if(scope.attributes.tabs.value[k].layout.rows[i].cols[j].orientation.value === 'row'){                                            $(tabLayoutRowsCols[j]).removeClass('layout-column');                                            $(tabLayoutRowsCols[j]).addClass('layout-row');                                        }else{                                            $(tabLayoutRowsCols[j]).removeClass('layout-row');                                            $(tabLayoutRowsCols[j]).addClass('layout-column');                                        }                                        $(tabLayoutRowsCols[j]).addClass('flex' + '-' + scope.attributes.tabs.value[k].layout.rows[i].cols[j].width.value);                                    }                                }                            }                        }catch(e){                            /*console.log(e.message);*/                        }                    },0);                };                scope.setWidth = function(rowIndex, colIndex){                    $timeout(function () {                        var tabLayoutRows = $('#' + scope.component_id + '_tab_' + scope.attributes.tabIndex.value).children();                        var tabLayoutRowsCols = $(tabLayoutRows[rowIndex]).children();                        if(scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[rowIndex].cols[colIndex].orientation.value === 'row'){                            $(tabLayoutRowsCols[colIndex]).removeClass('layout-column');                            $(tabLayoutRowsCols[colIndex]).addClass('layout-row');                        }else{                            $(tabLayoutRowsCols[colIndex]).removeClass('layout-row');                            $(tabLayoutRowsCols[colIndex]).addClass('layout-column');                        }                    },0);                };                scope.addTab = function(){                    scope.attributes.tabs.value.push(                    {                        "label":            "'Tab " + (scope.attributes.tabs.value.length + 1 + "'"),                        "disabled":         { "value": "false" },                        "classes":          { "value": "" },                        "dynamicClasses":   { "value": "" },                        "style":            { "value": "" },                        "layout": {                        "rows": [                            {                                "cols": [                                    {                                        "width":            { "value": 100},                                        "autoWidth":        { "value": false},                                        "display":          { "value": "true"},                                        "classes":          { "value": "" },                                        "dynamicClasses":   { "value": "" },                                        "style":            { "value": "" },                                        "orientation":      { "value": "row" },                                        "halignment":       { "value": "start" },                                        "valignment":       { "value": "start" }                                    }                                ],                                "classes":          { "value": "" },                                "dynamicClasses":   { "value": "" },                                "style":            { "value": "" }                            }                        ],                        "classes":          { "value": "" },                        "dynamicClasses":   { "value": "" },                        "style":            { "value": ""}                    }                    });                    scope.attributes.tabIndex.value = scope.attributes.tabs.value.length - 1;                    scope.setClasses();                };                scope.removeTab = function(){                    if(scope.attributes.tabs.value.length>2){                        scope.attributes.tabs.value.splice(scope.attributes.tabIndex.value, 1);                        scope.attributes.tabIndex.value--;                    }                };                scope.addLayoutRow = function(tabIndex) {                    scope.attributes.tabs.value[tabIndex].layout.rows.push({                        "cols": [                            {                                "width":            { "value": 100 },                                "autoWidth":        { "value": false },                                "display":          { "value": "true" },                                "classes":          { "value": "" },                                "dynamicClasses":   { "value": "" },                                "style":            { "value": "" },                                "orientation":      { "value": "row" },                                "halignment":       { "value": "start" },                                "valignment":       { "value": "start" },                                "css": {                                    "color": "",                                    "background": "",                                    "padding": "",                                    "text-align": ""                                }                            }                        ],                        "classes":          { "value": "" },                        "dynamicClasses":   { "value": "" },                        "style":            { "value": "" }                    });                    scope.setClasses();                };                scope.deleteLayoutRow = function(rowIndex){                    if(scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows.length > 1){                        scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows.splice(rowIndex, 1);                    }                }                scope.addLayoutColumn = function(rowIndex){                    scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[rowIndex].cols.push({                        "width":            { "value": 25 },                        "autoWidth":        { "value": false },                        "display":          { "value": 'true' },                        "classes":          { "value": "" },                        "dynamicClasses":   { "value": "" },                        "style":            { "value": "" },                        "orientation":      { "value": "row" },                        "halignment":       { "value": "start" },                        "valignment":       { "value": "start" },                        "css": {                            "color": "",                            "background": "",                            "padding": "",                            "text-align": ""                        }                    });                    scope.setClasses();                };                scope.deleteLayoutColumn = function(rowIndex, colIndex) {                    if(scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[rowIndex].cols.length > 1){                        scope.attributes.tabs.value[scope.attributes.tabIndex.value].layout.rows[rowIndex].cols.splice(colIndex, 1);                    }                };                scope.setTabWidth = function() {                    $timeout(function () {                        try{                            var paginationWrapper = '#' + scope.component_id + '> div.flex > md-content > md-tabs > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper';                            var inkBar = '#' + scope.component_id + '> div.flex > md-content > md-tabs > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar';                            $(paginationWrapper).css('width', '100%');                            var temp = $($(paginationWrapper).children()[0]).css('width');                            var stepWidth = parseInt(temp.substring(0, temp.length - 2));                            var left = stepWidth * scope.attributes.tabIndex.value + 'px';                            var right = stepWidth * (scope.attributes.tabs.value.length - 1 - scope.attributes.tabIndex.value) + 'px';                            $(inkBar).css('left', left);                            $(inkBar).css('right', right);                        }catch(e){                            /*console.log(e.message);*/                        }                    },0);                };                scope.$watchCollection('attributes.tabs.value[attributes.tabIndex.value].layout.rows', function(newValue){                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        scope.setClasses();                    }else{                        $timeout(function () {                            try{                                var tabLayoutRows = $('#' + scope.component_id + '_tab_' + scope.attributes.tabIndex.value).children();                                for(var i = 0; i < tabLayoutRows.length; i++){                                    var tabLayoutRowsCols = $(tabLayoutRows[i]).children() ;                                    for(var j = 0; j < tabLayoutRowsCols.length; j++){                                        if(newValue[i].cols[j].orientation.value === 'row'){                                            $(tabLayoutRowsCols[j]).addClass('layout-row');                                        }                                    }                                }                            }catch(e){                                /*console.log(e.message);*/                            }                        },0);                    }                 });                scope.$watch('attributes.stretching.value', function(newValue){                    if(newValue === 'always'){                        scope.setTabWidth();                    }                });                scope.changeWidth = function(){                    $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                };                if (!angular.isDefined(attrs.dfxGcEdit)) {                    scope.changeWidth();                }                scope.collapsePanelBody = function(isCollapsed) {                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        basectrl.bindScopeVariable( scope, component.attributes.toolbar.collapsed.value );                        if ( scope.attributes.toolbar.collapsed.value == 'true' || scope.attributes.toolbar.collapsed.value == 'false' ) {                            if ( isCollapsed ) {                                scope.attributes.toolbar.collapsed.value = 'false';                            } else {                                scope.attributes.toolbar.collapsed.value = 'true';                            }                        } else {                            if ( isCollapsed ) {                                scope.$parent_scope[scope.attributes.toolbar.collapsed.value] = false;                            } else {                                scope.$parent_scope[scope.attributes.toolbar.collapsed.value] = true;                            }                        }                    } else {                        if ( scope.attributes.toolbar.collapsed.value == 'false' ) {                            scope.attributes.toolbar.collapsed.designValue = true;                            scope.attributes.toolbar.collapsed.value = 'true';                        } else if ( scope.attributes.toolbar.collapsed.value == 'true' ) {                            scope.attributes.toolbar.collapsed.designValue = false;                            scope.attributes.toolbar.collapsed.value = 'false';                        } else {                            if ( !scope.attributes.toolbar.collapsed.designValue || scope.attributes.toolbar.collapsed.designValue == false ) {                                scope.attributes.toolbar.collapsed.designValue = true;                            } else {                                scope.attributes.toolbar.collapsed.designValue = false;                            }                        }                    }                }                scope.checkPanelBody = function() {                    if ( scope.attributes.toolbar.collapsed.value == 'true' ) {                        scope.attributes.toolbar.collapsed.designValue = true;                    } else {                        scope.attributes.toolbar.collapsed.designValue = false;                    }                }                scope.checkCollapses = function() {                    if ( !scope.attributes.toolbar.hasOwnProperty('collapsed') ) {                        var addCollapsed = { "collapsed": { "value": "false" }};                        scope.attributes.toolbar.collapsed = addCollapsed.collapsed;                    }                    if ( !scope.attributes.toolbar.hasOwnProperty('collapsible') ) {                        var addCollapsible = { "collapsible": { "value": "false" }};                        scope.attributes.toolbar.collapsible = addCollapsible.collapsible;                    }                }                scope.checkCollapses();                if (angular.isDefined(attrs.dfxGcDesign)) {                    $timeout(function(){                        scope.checkPanelBody();                    }, 0);                }            });        }    }}]);dfxGControls.directive('dfxGcWebWizard', ['$timeout', '$compile', function($timeout, $compile) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/wizard_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/wizard_design.html';            } else {                return '/gcontrols/web/wizard.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.$parent.getComponent(element);            basectrl.init(scope, element, component, attrs, 'wizard').then(function(){                scope.attributes.layoutType = {"value": "wizard"};                scope.attributes.initialized = {"value": true};                if(!scope.attributes.hasOwnProperty('stepIndex')){scope.attributes.stepIndex = { "value": "" }}                if(scope.attributes.stepIndex.value === ""){scope.attributes.stepIndex.value = 0;}                scope.attributes.steps.status = "overridden";                scope.attributes.centerSteps.status = "overridden";                                scope.attributes.stepIndex.status = "overridden" ;                scope.attributes.flex.status = "overridden";                scope.attributes.toolbar.leftMenu.equalButtonSize = { "value": false };                scope.attributes.toolbar.leftMenu.initialClick = { "value": false };                scope.attributes.toolbar.leftMenu.dynamicPresent = { "value": false };                scope.attributes.toolbar.rightMenu.equalButtonSize = { "value": false };                scope.attributes.toolbar.rightMenu.initialClick = { "value": false };                scope.attributes.toolbar.rightMenu.dynamicPresent = { "value": false };                if(scope.attributes.toolbar.leftMenu.hasOwnProperty('iconStyle')){delete scope.attributes.toolbar.leftMenu.iconStyle;}                if(scope.attributes.toolbar.leftMenu.hasOwnProperty('iconClass')){delete scope.attributes.toolbar.leftMenu.iconClass;}                if(scope.attributes.toolbar.leftMenu.hasOwnProperty('iconBarClass')){delete scope.attributes.toolbar.leftMenu.iconBarClass;}                if(scope.attributes.toolbar.leftMenu.hasOwnProperty('buttonStyle')){delete scope.attributes.toolbar.leftMenu.buttonStyle;}                if(scope.attributes.toolbar.leftMenu.hasOwnProperty('buttonClass')){delete scope.attributes.toolbar.leftMenu.buttonClass;}                if(scope.attributes.toolbar.rightMenu.hasOwnProperty('iconStyle')){delete scope.attributes.toolbar.rightMenu.iconStyle;}                if(scope.attributes.toolbar.rightMenu.hasOwnProperty('iconClass')){delete scope.attributes.toolbar.rightMenu.iconClass;}                if(scope.attributes.toolbar.rightMenu.hasOwnProperty('iconBarClass')){delete scope.attributes.toolbar.rightMenu.iconBarClass;}                if(scope.attributes.toolbar.rightMenu.hasOwnProperty('buttonStyle')){delete scope.attributes.toolbar.rightMenu.buttonStyle;}                if(scope.attributes.toolbar.rightMenu.hasOwnProperty('buttonClass')){delete scope.attributes.toolbar.rightMenu.buttonClass;}                var previousButton = scope.attributes.previousButton.classes.value.replace("md-raised", "");                    previousButton = previousButton.replace("md-primary", "");                    scope.attributes.previousButton.classes.value = previousButton;                var nextButton = scope.attributes.nextButton.classes.value.replace("md-raised", "");                    nextButton = nextButton.replace("md-primary", "");                    scope.attributes.nextButton.classes.value = nextButton;                var submitButton = scope.attributes.submitButton.classes.value.replace("md-raised", "");                    submitButton = submitButton.replace("md-primary", "");                    scope.attributes.submitButton.classes.value = submitButton;                for (var s = 0; s < scope.attributes.steps.value.length; s++) {                    if(!scope.attributes.steps.value[s].hasOwnProperty('percent')){scope.attributes.steps.value[s].percent = { "value": 0 };}                    if(!scope.attributes.steps.value[s].hasOwnProperty('isLast')){scope.attributes.steps.value[s].isLast = { "value": "" };}                };                scope.moveUpRow = function(index){                    if(index>0){                        var curCols = $('#' + scope.component_id + '_layout_' + scope.attributes.stepIndex.value + '_row_' + index).children() ;                        var nextCols = $('#' + scope.component_id + '_layout_' + scope.attributes.stepIndex.value + '_row_' + (index-1)).children() ;                        var curColsContent = [] ;                        var nextColsContent = [] ;                        for(var i =0; i < curCols.length; i++){                            curColsContent.push($(curCols[i]).html()) ;                        }                        for(var i =0; i < nextCols.length; i++){                            nextColsContent.push($(nextCols[i]).html()) ;                        }                        scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows.splice(index - 1, 2, scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[index], scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[index-1]);                        scope.swapContainerUp(scope.component_id, index, scope.attributes.stepIndex.value);                        $timeout(function(){                            var movedDownCols = $('#' + scope.component_id + '_layout_' + scope.attributes.stepIndex.value + '_row_' + (index - 1)).children() ;                            for(var j =0; j < movedDownCols.length; j++){                                $(movedDownCols[j]).html(curColsContent[j]) ;                                $compile($(movedDownCols[j]).contents())(scope);                            }                            var movedUpCols =  $('#' + scope.component_id + '_layout_' + scope.attributes.stepIndex.value + '_row_' + (index)).children() ;                            for(var k =0; k < movedUpCols.length; k++){                                $(movedUpCols[k]).html(nextColsContent[k]) ;                                $compile($(movedUpCols[k]).contents())(scope);                            }                        },0);                    }                };                scope.moveLeftCol = function(rowIndex, index){                    if(index > 0){                        var curCol = $('#' + scope.component_id + '_layout_' + scope.attributes.stepIndex.value + '_row_' + rowIndex + '_column_' + index) ;                        var leftCol = $('#' + scope.component_id + '_layout_' + scope.attributes.stepIndex.value + '_row_' + rowIndex + '_column_' + (index-1)) ;                        var curColHtml = curCol.html() ;                        var leftColHtml = leftCol.html() ;                        scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[rowIndex].cols.splice(index-1, 2, scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[rowIndex].cols[index], scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[rowIndex].cols[index-1]) ;                        scope.swapContainerLeft(scope.component_id, index, rowIndex, scope.attributes.stepIndex.value);                        $timeout(function(){                            curCol.html(leftColHtml);                            $compile(curCol.contents())(scope);                            leftCol.html(curColHtml);                            $compile(leftCol.contents())(scope);                        },0);                    }                };                scope.moveDownRow = function(index){                    if(index < scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows.length-1){                        var curCols = $('#' + scope.component_id + '_layout_' + scope.attributes.stepIndex.value + '_row_' + index).children() ;                        var nextCols = $('#' + scope.component_id + '_layout_' + scope.attributes.stepIndex.value + '_row_' + (index+1)).children() ;                        var curColsContent = [] ;                        var nextColsContent = [] ;                        for(var i =0; i < curCols.length; i++){                            curColsContent.push($(curCols[i]).html()) ;                        }                        for(var i =0; i < nextCols.length; i++){                            nextColsContent.push($(nextCols[i]).html()) ;                        }                        scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows.splice(index, 2, scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[index+1], scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[index]);                        scope.swapContainerDown(scope.component_id, index, scope.attributes.stepIndex.value);                        $timeout(function(){                            var movedDownCols = $('#' + scope.component_id + '_layout_' + scope.attributes.stepIndex.value + '_row_' + (index + 1)).children() ;                            for(var j =0; j < movedDownCols.length; j++){                                $(movedDownCols[j]).html(curColsContent[j]) ;                                $compile($(movedDownCols[j]).contents())(scope);                            }                            var movedUpCols =  $('#' + scope.component_id + '_layout_' + scope.attributes.stepIndex.value + '_row_' + (index)).children() ;                            for(var k =0; k < movedUpCols.length; k++){                                $(movedUpCols[k]).html(nextColsContent[k]) ;                                $compile($(movedUpCols[k]).contents())(scope);                            }                        },0);                    }                };                scope.moveRightCol = function(rowIndex, index){                    if(index < scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[rowIndex].cols.length - 1){                        var curCol = $('#' + scope.component_id + '_layout_' + scope.attributes.stepIndex.value + '_row_' + rowIndex + '_column_' + index) ;                        var rightCol = $('#' + scope.component_id + '_layout_' + scope.attributes.stepIndex.value + '_row_' + rowIndex + '_column_' + (index+1)) ;                        var curColHtml = curCol.html() ;                        var rightColHtml = rightCol.html() ;                        scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[rowIndex].cols.splice(index, 2, scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[rowIndex].cols[index+1], scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[rowIndex].cols[index]) ;                        scope.swapContainerRight(scope.component_id, index, rowIndex, scope.attributes.stepIndex.value);                        $timeout(function(){                            curCol.html(rightColHtml);                            $compile(curCol.contents())(scope);                            rightCol.html(curColHtml);                            $compile(rightCol.contents())(scope);                        },0);                    }                };                scope.setClasses = function(){                    $timeout(function () {                        try{                            for(var k = 0; k < scope.attributes.steps.value.length; k++){                                var stepLayoutRows = $('#' + scope.component_id + '_step_' + k).children();                                for(var i = 0; i < stepLayoutRows.length; i++){                                    var stepLayoutRowsCols = $(stepLayoutRows[i]).children() ;                                    for(var j = 0; j < stepLayoutRowsCols.length; j++){                                        if(scope.attributes.steps.value[k].layout.rows[i].cols[j].orientation.value === 'row'){                                            $(stepLayoutRowsCols[j]).removeClass('layout-column');                                            $(stepLayoutRowsCols[j]).addClass('layout-row');                                        }else{                                            $(stepLayoutRowsCols[j]).removeClass('layout-row');                                            $(stepLayoutRowsCols[j]).addClass('layout-column');                                        }                                        $(stepLayoutRowsCols[j]).addClass('flex' + '-' + scope.attributes.steps.value[k].layout.rows[i].cols[j].width.value);                                    }                                }                            }                        }catch(e){                            /*console.log(e.message);*/                        }                    },0);                };                scope.setClasses();                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    scope.attributes.stepIndex.value = 0;                    scope.firstTransfer = true;                    $timeout(function () {                        try{                            scope.wizardForm = eval('scope.form_' + scope.component_id);                            var formName = '#form_' + scope.component_id ;                            var inputs = $(formName).find('md-input-container');                            scope.totalInputsNumber = inputs.length;                            if(scope.totalInputsNumber > 0){                                for(var i =0; i < scope.attributes.steps.value.length; i++){                                    var stepFormName = '#form_' + scope.component_id + '_step_' + i;                                    var stepInputs = $(stepFormName).find('md-input-container');                                    scope.attributes.steps.value[i].percent.value =  100 * stepInputs.length/scope.totalInputsNumber;                                }                            }                        }catch(e){                            /*console.log(e.message);*/                        }                    },0);                }                scope.setWidth = function(rowIndex, colIndex){                    $timeout(function () {                        var stepLayoutRows = $('#' + scope.component_id + '_step_' + scope.attributes.stepIndex.value).children();                        var stepLayoutRowsCols = $(stepLayoutRows[rowIndex]).children();                        if(scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[rowIndex].cols[colIndex].orientation.value === 'row'){                            $(stepLayoutRowsCols[colIndex]).removeClass('layout-column');                            $(stepLayoutRowsCols[colIndex]).addClass('layout-row');                        }else{                            $(stepLayoutRowsCols[colIndex]).removeClass('layout-row');                            $(stepLayoutRowsCols[colIndex]).addClass('layout-column');                        }                    },0);                };                scope.setStepWidth = function() {                    $timeout(function () {                        try{                            var paginationWrapper = '#' + scope.component_id + '> div.layout-align-center-center.layout-row.flex > div > md-content > md-tabs > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper';                            var inkBar = '#' + scope.component_id + '> div.layout-align-center-center.layout-row.flex > div > md-content > md-tabs > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar';                            $(paginationWrapper).css('width', '100%');                            var temp = $($(paginationWrapper).children()[0]).css('width');                            var stepWidth = parseInt(temp.substring(0, temp.length - 2));                            var left = stepWidth * scope.attributes.tabIndex.value + 'px';                            var right = stepWidth * (scope.attributes.tabs.value.length - 1 - scope.attributes.tabIndex.value) + 'px';                            $(inkBar).css('left', left);                            $(inkBar).css('right', right);                        }catch(e){                            /*console.log(e.message);*/                        }                    },0);                };                scope.$watch('attributes.stretching.value', function(newValue){                    if(newValue === 'always'){                        scope.setStepWidth();                    }                });                scope.addStep = function(){                    scope.attributes.steps.value.push(                        {                            "label":            "'Step " + (scope.attributes.steps.value.length+1) + "'",                            "validDisabled":    { "value": false },                            "disabled":         { "value": "false" },                            "percent":          { "value": 0 },                            "classes":          { "value": "" },                            "dynamicClasses":   { "value": "" },                            "isLast":           { "value": false },                            "style":            { "value": "" },                            "layout": {                                "rows": [                                    {                                        "cols": [                                            {                                                "width":            { "value": 100 },                                                "autoWidth":        { "value": false },                                                "display":          { "value": "true" },                                                "classes":          { "value": "" },                                                "dynamicClasses":   { "value": "" },                                                "style":            { "value": "" },                                                "orientation":      { "value": "row" },                                                "halignment":       { "value": "start" },                                                "valignment":       { "value": "start" }                                            }                                        ],                                        "classes":          { "value": "" },                                        "dynamicClasses":   { "value": "" },                                        "style":            { "value": "" }                                    }                                ],                                "classes":          { "value": "" },                                "dynamicClasses":   { "value": "" },                                "style":            { "value": "" }                            }                        });                    scope.attributes.stepIndex.value = scope.attributes.steps.value.length - 1;                    scope.setClasses();                };                scope.removeStep = function(){                    scope.attributes.steps.status = "overridden" ;                    if(scope.attributes.steps.value.length > 1){                        scope.attributes.steps.value.splice(scope.attributes.stepIndex.value, 1);                        if(scope.attributes.stepIndex.value !==0){                            scope.attributes.stepIndex.value--;                        }                    }else{                        /*console.log('This step can not be deleted.');*/                    }                };                scope.addLayoutRow = function(stepIndex) {                    scope.attributes.steps.value[stepIndex].layout.rows.push({                        "cols": [                            {                                "width":            { "value": 100 },                                "autoWidth":        { "value": false },                                "display":          { "value": "true" },                                "classes":          { "value": "" },                                "dynamicClasses":   { "value": "" },                                "style":            { "value": "" },                                "orientation":      { "value": "row" },                                "halignment":       { "value": "start" },                                "valignment":       { "value": "start" },                                "css": {                                    "color": "",                                    "background": "",                                    "padding": "",                                    "text-align": ""                                }                            }                        ],                        "classes":          { "value": "" },                        "dynamicClasses":   { "value": "" },                        "style":            { "value": "" }                    });                    scope.setClasses();                };                scope.deleteLayoutRow = function(rowIndex){                    if(scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows.length > 1){                        scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows.splice(rowIndex, 1);                    }                }                scope.addLayoutColumn = function(rowIndex){                    scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[rowIndex].cols.push({                        "width":            { "value": 25 },                        "autoWidth":        { "value": false },                        "display":          { "value": "true" },                        "classes":          { "value": "" },                        "dynamicClasses":   { "value": "" },                        "style":            { "value": "" },                        "orientation":      { "value": "row" },                        "halignment":       { "value": "start" },                        "valignment":       { "value": "start" },                        "css": {                            "color": "",                            "background": "",                            "padding": "",                            "text-align": ""                        }                    });                    scope.setClasses();                };                scope.deleteLayoutColumn = function(rowIndex, colIndex) {                    if(scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[rowIndex].cols.length > 1){                        scope.attributes.steps.value[scope.attributes.stepIndex.value].layout.rows[rowIndex].cols.splice(colIndex, 1);                    }                };                scope.incrIndex = function(){                    scope.attributes.stepIndex.value++;                };                scope.decrIndex = function(){                    scope.attributes.stepIndex.value--;                };                scope.prevent = function(event){                    event.preventDefault();                    event.stopPropagation();                };                scope.$watchCollection('attributes.steps[attributes.stepIndex.value].layout.rows', function(newValue){                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        scope.setClasses();                    }else{                        $timeout(function () {                            try{                                var stepLayoutRows = $('#' + scope.component_id + '_step_' + scope.attributes.stepIndex.value).children();                                for(var i = 0; i < stepLayoutRows.length; i++){                                    var stepLayoutRowsCols = $(stepLayoutRows[i]).children() ;                                    for(var j = 0; j < stepLayoutRowsCols.length; j++){                                        if(newValue[i].cols[j].orientation.value === 'row'){                                            $(stepLayoutRowsCols[j]).addClass('layout-row');                                        }                                    }                                }                            }catch(e){                                /*console.log(e.message);*/                            }                        },0);                    }                });                scope.$watch('attributes.stepIndex.value', function(newValue, oldValue){                    for(var i =0; i < scope.attributes.steps.value.length; i++){                        if(i < scope.attributes.steps.value.length-1){                            scope.attributes.steps.value[i].isLast.value = false;                        }else{                            scope.attributes.steps.value[scope.attributes.steps.value.length - 1].isLast.value = true;                        }                        if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign)){                            var stepFormName = 'stepForm' + scope.attributes.stepIndex.value;                            $timeout(function () {                                scope.stepForm = (scope.wizardForm[stepFormName]);                            },0);                        }                    }                });                scope.$watch('stepForm.$valid', function(newValue){                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                       if(typeof newValue !== "undefined"){                           if(!newValue){                               if(scope.attributes.stepIndex.value+1 <= scope.attributes.steps.value.length - 1){                                   for(var i= scope.attributes.stepIndex.value+1; i < scope.attributes.steps.value.length; i++){                                       scope.attributes.steps.value[i].validDisabled.value = true;                                   }                               }                           }else{                               if(scope.attributes.stepIndex.value+1 <= scope.attributes.steps.value.length - 1){                                   scope.attributes.steps.value[scope.attributes.stepIndex.value+1].validDisabled.value = false;                               }                           }                           scope.calcPercent();                       }                    }                });                scope.calcPercent = function(){                    scope.attributes.percentage.value = 0;                    $timeout(function () {                        for(var i =0; i < scope.attributes.steps.value.length; i++){                             if(scope.wizardForm['stepForm'+i].$valid){                                 scope.attributes.percentage.value = scope.attributes.percentage.value + scope.attributes.steps.value[i].percent.value ;                             }                        }                        scope.attributes.percentage.value = Math.round(scope.attributes.percentage.value);                    },0);                };                scope.changeWidth = function(){                    $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                };                if (!angular.isDefined(attrs.dfxGcEdit)) {                    scope.changeWidth();                }                scope.collapsePanelBody = function(isCollapsed) {                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        basectrl.bindScopeVariable( scope, component.attributes.toolbar.collapsed.value );                        if ( scope.attributes.toolbar.collapsed.value == 'true' || scope.attributes.toolbar.collapsed.value == 'false' ) {                            if ( isCollapsed ) {                                scope.attributes.toolbar.collapsed.value = 'false';                            } else {                                scope.attributes.toolbar.collapsed.value = 'true';                            }                        } else {                            if ( isCollapsed ) {                                scope.$parent_scope[scope.attributes.toolbar.collapsed.value] = false;                            } else {                                scope.$parent_scope[scope.attributes.toolbar.collapsed.value] = true;                            }                        }                    } else {                        if ( scope.attributes.toolbar.collapsed.value == 'false' ) {                            scope.attributes.toolbar.collapsed.designValue = true;                            scope.attributes.toolbar.collapsed.value = 'true';                        } else if ( scope.attributes.toolbar.collapsed.value == 'true' ) {                            scope.attributes.toolbar.collapsed.designValue = false;                            scope.attributes.toolbar.collapsed.value = 'false';                        } else {                            if ( !scope.attributes.toolbar.collapsed.designValue || scope.attributes.toolbar.collapsed.designValue == false ) {                                scope.attributes.toolbar.collapsed.designValue = true;                            } else {                                scope.attributes.toolbar.collapsed.designValue = false;                            }                        }                    }                }                scope.checkPanelBody = function() {                    if ( scope.attributes.toolbar.collapsed.value == 'true' ) {                        scope.attributes.toolbar.collapsed.designValue = true;                    } else {                        scope.attributes.toolbar.collapsed.designValue = false;                    }                }                scope.checkCollapses = function() {                    if ( !scope.attributes.toolbar.hasOwnProperty('collapsed') ) {                        var addCollapsed = { "collapsed": { "value": "false" }};                        scope.attributes.toolbar.collapsed = addCollapsed.collapsed;                    }                    if ( !scope.attributes.toolbar.hasOwnProperty('collapsible') ) {                        var addCollapsible = { "collapsible": { "value": "false" }};                        scope.attributes.toolbar.collapsible = addCollapsible.collapsible;                    }                }                scope.checkCollapses();                if (angular.isDefined(attrs.dfxGcDesign)) {                    $timeout(function(){                        scope.checkPanelBody();                    }, 0);                }            });        }    }}]);dfxGControls.directive('dfxGcWebMytoolbar', function() {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: {},        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/mytoolbar_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/mytoolbar_design.html';            } else {                return '/gcontrols/web/mytoolbar.html';            }        },        link: function(scope, element, attrs) {            var component = scope.$parent.getComponent(element);            basectrl.init(scope, element, component, attrs, 'mytoolbar');        }    }});dfxGControls.directive('dfxGcWebToolbar', function($sce, $compile, $timeout) {    return {        restrict: 'A',        replace: true,        transclude : true,        templateUrl: function( el, attrs) {            return '/gcontrols/web/toolbar_preview.html';        },        link: function(scope, element, attrs) {            scope.mainToolbarInitCounter = 0;            scope.toolbarInitCounter = 0;            scope.$gcscope = scope;            scope.$watch('$parent.gc_instances', function(newVal){                if(newVal){                    var parentPanel = (newVal[Object.keys(newVal)[0]].attributes) ;                    if(parentPanel.initialized){                        if(parentPanel.initialized.value=== true && scope.mainToolbarInitCounter ===0){                            scope.mainToolbarInitCounter++;                            scope.runToolbar();                                                    }                    }                }            }, true);            scope.$watch('$parent.gcontrol.attributes', function(newVal){                if(newVal){                    if(newVal.initialized){                        if(newVal.initialized.value === true && scope.toolbarInitCounter ===0){                            scope.toolbarInitCounter++;                            scope.runToolbar();                        }                    }                }            }, true);            scope.runToolbar = function(){                $timeout(function(){                    scope.attributes.toolbar.rightMenu.initialClick.value = false;                    scope.attributes.toolbar.leftMenu.initialClick.value = false;                    if(scope.attributes.toolbar.leftMenu.dynamicPresent.value && scope.attributes.toolbar.leftMenu.dynamic.value !==''){                        scope.leftItems = eval('scope.' + scope.attributes.toolbar.leftMenu.dynamic.value);                        try{                            if(scope.leftItems.constructor === Array ){                                if(scope.leftItems.length > 0){                                    scope.attributes.toolbar.leftMenu.dynamicPresent.value = true;                                }else{                                    scope.attributes.toolbar.leftMenu.dynamicPresent.value = false;                                }                            }else{                                scope.attributes.toolbar.leftMenu.dynamicPresent.value = false;                            }                        }catch(e){                            scope.attributes.toolbar.leftMenu.dynamicPresent.value = false;                        }                    }else{                        scope.attributes.toolbar.leftMenu.dynamicPresent.value = false;                    }                    if(scope.attributes.toolbar.rightMenu.dynamicPresent.value && scope.attributes.toolbar.rightMenu.dynamic.value !==''){                        scope.rightItems = eval('scope.' + scope.attributes.toolbar.rightMenu.dynamic.value);                        try{                            if(scope.rightItems.constructor === Array ){                                if(scope.rightItems.length > 0){                                    scope.attributes.toolbar.rightMenu.dynamicPresent.value = true;                                }else{                                    scope.attributes.toolbar.rightMenu.dynamicPresent.value = false;                                }                            }else{                                scope.attributes.toolbar.rightMenu.dynamicPresent.value = false;                            }                        }catch(e){                            scope.attributes.toolbar.rightMenu.dynamicPresent.value = false;                        }                    }else{                        scope.attributes.toolbar.rightMenu.dynamicPresent.value = false;                    }                    if(scope.attributes.layoutType.value === 'panel'){                        var elem = '#' + scope.component_id ;                        $(elem).addClass('flex') ;                    }                    if(scope.attributes.toolbar.title.isHtml.value){                        var html_title = '#' + scope.component_id + '_toolbar_bindingHtml';                        $compile($(html_title).contents())(scope);                    }                    if(scope.attributes.toolbar.rightMenu.type.value === 'Icon Bar'){                        scope.iconbarBuilder('right');                    }else if(scope.attributes.toolbar.rightMenu.type.value === 'Buttons'){                        scope.iconbarBuilder('right');                    }                    if(scope.attributes.toolbar.leftMenu.type.value === 'Icon Bar'){                        scope.iconbarBuilder('left');                    }else if(scope.attributes.toolbar.leftMenu.type.value === 'Buttons'){                        scope.iconbarBuilder('left');                    }                },0);            };            scope.setButtonsWidth = function(isEqual, side){                $timeout(function(){                    if(side==='right'){                        var parentDiv = '.' + scope.component_id + '_toolbar_right_menu';                    }else{                        var parentDiv = '.' + scope.component_id + '_toolbar_left_menu';                    }                    if(isEqual && side==='right'){                        var counter = 0;                        for(var i =0; i < scope.attributes.toolbar.rightMenu.menuItems.value.length; i++){                            if(!scope.attributes.toolbar.rightMenu.menuItems.value[i].divider){                                counter++;                            }                        }                        var percentValue = Math.floor(100/counter);                        if(percentValue > 5){                            $(parentDiv).css('width', '100%');                            $($(parentDiv).find('md-menu-bar')[0]).children().css('width', (percentValue+'%'));                        }else{                            $(parentDiv).css('width', '');                            $($(parentDiv).find('md-menu-bar')[0]).children().css('width', '');                        }                    }else if(isEqual && side==='left'){                        var counter = 0;                        for(var i =0; i < scope.attributes.toolbar.leftMenu.menuItems.value.length; i++){                            if(!scope.attributes.toolbar.leftMenu.menuItems.value[i].divider){                                counter++;                            }                        }                        var percentValue = Math.floor(100/counter);                        if(percentValue > 5){                            $(parentDiv).css('width', '100%');                            $($(parentDiv).find('md-menu-bar')[0]).children().css('width', (percentValue+'%'));                        }                    }else{                        $(parentDiv).css('width', '');                        $($(parentDiv).find('md-menu-bar')[0]).children().css('width', '');                    }                }, 0);            };            var singleMenuItem = '', toolbarType='', iconbarMenuItem = '<md-menu-item ng-if="{{itemDisplay}}">';            var rebuildIcons = function( menuItems ) {                for ( var i = 0; i < menuItems.length; i++ ) {                    if ( typeof menuItems[i].icon === 'string' ) {                        var tempIco = menuItems[i].icon;                        menuItems[i].icon = {                            "value": tempIco,                            "type": menuItems[i].hasOwnProperty('iconType') ? menuItems[i].iconType : 'fa-icon'                        }                    }                    if ( menuItems[i].menuItems.value.length > 0 ) {                        rebuildIcons( menuItems[i].menuItems.value );                    }                }            }            scope.cleanFabClasses = function( fab ){                if ( fab.class.indexOf('md-fab') > -1 ) { fab.class = fab.class.replace('md-fab', ""); }                if ( fab.class.indexOf('md-raised') > -1 ) { fab.class = fab.class.replace('md-raised', ""); }                if ( fab.class.indexOf('md-primary') > -1 ) { fab.class = fab.class.replace('md-primary', ""); }                if ( fab.class.indexOf('md-mini') > -1 ) { fab.class = fab.class.replace('md-mini', ""); }            }                        $timeout(function() {                rebuildIcons( scope.attributes.toolbar.leftMenu.menuItems.value );                rebuildIcons( scope.attributes.toolbar.rightMenu.menuItems.value );                scope.cleanFabClasses(scope.attributes.toolbar.leftMenu.fab.triggerButton);                scope.cleanFabClasses(scope.attributes.toolbar.leftMenu.fab.actionButton);                scope.cleanFabClasses(scope.attributes.toolbar.rightMenu.fab.triggerButton);                scope.cleanFabClasses(scope.attributes.toolbar.rightMenu.fab.actionButton);                if ( !scope.attributes.toolbar.leftMenu.fab.triggerButton.icon.hasOwnProperty('size') ) {                     scope.attributes.toolbar.leftMenu.fab.triggerButton.label = "";                    scope.attributes.toolbar.leftMenu.fab.triggerButton.style = "";                    scope.attributes.toolbar.leftMenu.fab.triggerButton.tooltip = { "direction": "top", "style": "", "class": "" };                    scope.attributes.toolbar.leftMenu.fab.triggerButton.icon = { "size" : 24, "style": "", "class": "", "value": "'fa-bars'", "type" : "fa-icon" }                                    }                if ( !scope.attributes.toolbar.rightMenu.fab.triggerButton.icon.hasOwnProperty('size') ) {                     scope.attributes.toolbar.rightMenu.fab.triggerButton.label = "";                    scope.attributes.toolbar.rightMenu.fab.triggerButton.style = "";                    scope.attributes.toolbar.rightMenu.fab.triggerButton.tooltip = { "direction": "top", "style": "", "class": "" };                    scope.attributes.toolbar.rightMenu.fab.triggerButton.icon = { "size" : 24, "style": "", "class": "", "value": "'fa-bars'", "type" : "fa-icon" }                                    }                if ( !scope.attributes.toolbar.leftMenu.fab.actionButton.icon.hasOwnProperty('size') ) {                     scope.attributes.toolbar.leftMenu.fab.actionButton.style = "";                    scope.attributes.toolbar.leftMenu.fab.actionButton.icon = { "size" : 20, "style": "", "class": "" };                    scope.attributes.toolbar.leftMenu.fab.actionButton.tooltip = { "direction": "top", "style": "", "class": "" };                }                if ( !scope.attributes.toolbar.rightMenu.fab.actionButton.icon.hasOwnProperty('size') ) {                     scope.attributes.toolbar.rightMenu.fab.actionButton.style = "";                    scope.attributes.toolbar.rightMenu.fab.actionButton.icon = { "size" : 20, "style": "", "class": "" };                    scope.attributes.toolbar.rightMenu.fab.actionButton.tooltip = { "direction": "top", "style": "", "class": "" };                }                                if ( !scope.attributes.toolbar.leftMenu.hasOwnProperty('iconBar') ) {                                        scope.attributes.toolbar.leftMenu.iconBar = {                        "triggerButton": { "style": "", "class": "", "icon": { "size": 24, "style": "", "class": "" } },                        "actionButton": { "style": "", "class": "", "icon": { "size": 16, "style": "", "class": "" } }                                            }                    scope.attributes.toolbar.leftMenu.buttons = {                        "triggerButton": { "style": "", "class": "", "icon": { "size": 20, "style": "", "class": "" } },                        "actionButton": { "style": "", "class": "", "icon": { "size": 16, "style": "", "class": "" } }                    }                     delete scope.attributes.toolbar.leftMenu.buttonStyle;                    delete scope.attributes.toolbar.leftMenu.iconStyle;                }                if ( !scope.attributes.toolbar.rightMenu.hasOwnProperty('iconBar') ) {                                        scope.attributes.toolbar.rightMenu.iconBar = {                        "triggerButton": { "style": "", "class": "", "icon": { "size": 24, "style": "", "class": "" } },                        "actionButton": { "style": "", "class": "", "icon": { "size": 16, "style": "", "class": "" } }                    }                    scope.attributes.toolbar.rightMenu.buttons = {                        "triggerButton": { "style": "", "class": "", "icon": { "size": 20, "style": "", "class": "" } },                        "actionButton": { "style": "", "class": "", "icon": { "size": 16, "style": "", "class": "" } }                    }                                        delete scope.attributes.toolbar.rightMenu.buttonStyle;                    delete scope.attributes.toolbar.rightMenu.iconStyle;                }                            }, 0);            scope.changeState = function( itemIndexes, ev, side, optionsType ) {                var levels = JSON.parse('['+itemIndexes+']');                var bridge = optionsType === 'static' ? '.menuItems.value' : '.'+scope.itemNames.main.scopeItems,                     stateElement = '',                     stateObject = {};                for ( var i = 0; i < levels.length; i++ ) {                    if ( i === 0 ) {                        stateElement = stateElement + '['+ levels[i] + ']';                    } else {                        stateElement = stateElement + bridge + '['+ levels[i] + ']';                        }                                    }                switch ( side ) {                    case 'left':                         if ( optionsType === 'dynamic' ) {                            stateObject = eval('scope.$parent_scope.'+scope.itemNames.main.source+stateElement+'.'+scope.itemNames.state.name);                         } else {                            stateObject = eval('scope.attributes.toolbar.leftMenu.menuItems.value'+stateElement).state;                         }                        break;                    case 'right':                         if ( optionsType === 'dynamic' ) {                            stateObject = eval('scope.$parent_scope.'+scope.itemNames.main.source+stateElement+'.'+scope.itemNames.state.name);                         } else {                            stateObject = eval('scope.attributes.toolbar.rightMenu.menuItems.value'+stateElement).state;                         }                        break;                }                 if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign) && stateObject.binding !== '') {                    if (optionsType==='static') {                        if ( stateObject.binding === 'true' || stateObject.binding === 'false' ) {                            stateObject.binding = stateObject.binding === 'true' ? 'false' : 'true';                                                    } else {                            if ( scope.$gcscope[stateObject.binding] === 'true' || scope.$gcscope[stateObject.binding] === 'false' ) {                                scope.$gcscope[stateObject.binding] = scope.$gcscope[stateObject.binding] === 'true' ? 'false' : 'true';                                                                                        } else if ( typeof scope.$gcscope[stateObject.binding] === 'boolean' ) {                                scope.$gcscope[stateObject.binding] = scope.$gcscope[stateObject.binding] ? false : true;                            }                        }                                                         } else {                                                scope.$parent_scope[stateObject[scope.itemNames.state.binding]] = scope.$parent_scope[stateObject[scope.itemNames.state.binding]] ? false : true;                                            }                }            }            var buildNextLevel = function( nextLevel, road, side, optionsType ) {                if ( optionsType === 'static' ) {                    for ( var i = 0; i < nextLevel.length; i++ ) {                        if ( nextLevel[i].menuItems.value.length > 0 ) {                            var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display);                            scope.iconBar = scope.iconBar + iconbarItem + '<md-menu>';                            createDfxMenuItem( nextLevel[i], 'singleMenuItem', road, i, side, optionsType );                            buildNextLevel( nextLevel[i].menuItems.value, road + ',' + i, side, optionsType );                                                        scope.iconBar = scope.iconBar + '</md-menu-content></md-menu></md-menu-item>';                        } else {                            if ( nextLevel[i].divider === true ) {                                scope.iconBar = scope.iconBar + '<md-menu-divider></md-menu-divider>';                            } else if ( nextLevel[i].title === true ) {                                scope.iconBar = scope.iconBar + '<md-menu-item class="tree-menu-title"><div>'+'{{'+nextLevel[i].label+'}}'+'</div></md-menu-item>';                            } else {                                var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', typeof nextLevel[i].display === 'string' ? nextLevel[i].display.replace(/"/g, '\'') : nextLevel[i].display);                                scope.iconBar = scope.iconBar + iconbarItem;                                createDfxMenuItem( nextLevel[i], 'singleMenuItem', road, i, side, optionsType );                            }                        }                    }                } else {                    for ( var i = 0; i < nextLevel.length; i++ ) {                        if ( nextLevel[i][scope.itemNames.main.scopeItems] && nextLevel[i][scope.itemNames.main.scopeItems].length > 0 ) {                            var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', nextLevel[i][scope.itemNames.main.display]);                            scope.iconBar = scope.iconBar + iconbarItem + '<md-menu>';                            createDfxMenuItem( nextLevel[i], 'singleMenuItem', road, i, side, optionsType );                            buildNextLevel( nextLevel[i][scope.itemNames.main.scopeItems], road + ',' + i, side, optionsType );                                                        scope.iconBar = scope.iconBar + '</md-menu-content></md-menu></md-menu-item>';                        }else {                            if ( nextLevel[i][scope.itemNames.main.type] === 'divider' ) {                                scope.iconBar = scope.iconBar + '<md-menu-divider></md-menu-divider>';                            } else if ( nextLevel[i][scope.itemNames.main.type] === 'title' ) {                                scope.iconBar = scope.iconBar + '<md-menu-item class="tree-menu-title"><div>'+'{{'+nextLevel[i][scope.itemNames.main.label]+'}}'+'</div></md-menu-item>';                            } else {                                var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', nextLevel[i][scope.itemNames.main.display]);                                scope.iconBar = scope.iconBar + iconbarItem;                                createDfxMenuItem( nextLevel[i], 'singleMenuItem', road, i, side, optionsType );                            }                        }                    }                }            }            var createDfxMenuItem = function( dfxMenuItem, type, level, index, side, optionsType ) {                if (optionsType === 'static'){                     if ( typeof dfxMenuItem.icon === 'string' ) {                         var tempIcon = dfxMenuItem.icon;                        dfxMenuItem.icon = {                             "value": tempIcon,                             "type":  dfxMenuItem.hasOwnProperty('iconType') ? dfxMenuItem.iconType : 'fa-icon'                         }                    }                    var tempPropObject = {};                    tempPropObject.faIcon =                 dfxMenuItem.icon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.icon.value+'}}' : eval(dfxMenuItem.icon.value);                    tempPropObject.svgIcon =                dfxMenuItem.icon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.icon.value+'}}' : eval(dfxMenuItem.icon.value);                    tempPropObject.faItemIndex =            level >= 0 ? level + ',' + index : index;                    tempPropObject.itemLabel =              '{{'+dfxMenuItem.label+'}}';                    tempPropObject.itemIndex =              level || level >= 0 ? level + ',' + index : index;                    tempPropObject.itemDisabled =           dfxMenuItem.disabled;                    tempPropObject.itemDisplay =            typeof dfxMenuItem.display === 'string' ? dfxMenuItem.display.replace(/"/g, '\'') : dfxMenuItem.display;                    tempPropObject.itemClick =              dfxMenuItem.menuItems.value.length > 0 ? '$mdOpenMenu();'+dfxMenuItem.onclick : 'unfocusButton($event);'+dfxMenuItem.onclick;                    if ( type === 'singleMenuItem' ) {                        tempPropObject.itemShortcut =       dfxMenuItem.shortcut;                        tempPropObject.ifItemNotification = dfxMenuItem.notification !=='' ? true : false;                        tempPropObject.itemNotification =   '{{'+dfxMenuItem.notification+'}}';                    }                       if ( toolbarType==='iconBar' ) {                        if ( dfxMenuItem.hasOwnProperty('waiting')) { delete dfxMenuItem.waiting; }                                            if ( !dfxMenuItem.hasOwnProperty('state') ) {                            // dfxMenuItem.state = {                            //     "value":           false,                            //     "binding":         "true",                            //     "checkedIcon":   { "value": "'thumb_up'", "type": "svg-icon", "style": "", "class": "" },                            //     "uncheckedIcon": { "value": "'thumb_down'", "type": "svg-icon", "style": "", "class": "" }                            // };                            tempPropObject.notState =               true;                            tempPropObject.isState =                false;                            tempPropObject.ifFaIcon =               dfxMenuItem[scope.itemNames.main.icon.value] !=='' && dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.type] === 'fa-icon' ? true : false;                            tempPropObject.ifSvgIcon =              dfxMenuItem[scope.itemNames.main.icon.value] !=='' && dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.type] === 'svg-icon' ? true : false;                            if ( dfxMenuItem.menuItems.value.length > 0 ) {                                tempPropObject.itemClick = '$mdOpenMenu();'+dfxMenuItem[scope.itemNames.main.onclick];                            } else {                                tempPropObject.itemClick = 'unfocusButton($event);'+dfxMenuItem[scope.itemNames.main.onclick];                            }                        } else {                            tempPropObject.notState =                   false;                            tempPropObject.isState =                    true;                            tempPropObject.trueState =                  dfxMenuItem.state.binding;                            tempPropObject.falseState =                 dfxMenuItem.state.binding;                            tempPropObject.ifTrueStateFaIcon =          dfxMenuItem.state.checkedIcon.value.length > 0 && dfxMenuItem.state.checkedIcon.type === 'fa-icon' && dfxMenuItem.state.value ? true : false;                            tempPropObject.ifFalseStateFaIcon =         dfxMenuItem.state.uncheckedIcon.value.length > 0 && dfxMenuItem.state.uncheckedIcon.type === 'fa-icon' && dfxMenuItem.state.value ? true : false;                            tempPropObject.ifTrueStateSvgIcon =         dfxMenuItem.state.checkedIcon.value.length > 0 && dfxMenuItem.state.checkedIcon.type === 'svg-icon' && dfxMenuItem.state.value ? true : false;                                            tempPropObject.ifFalseStateSvgIcon =        dfxMenuItem.state.uncheckedIcon.value.length > 0 && dfxMenuItem.state.uncheckedIcon.type === 'svg-icon' && dfxMenuItem.state.value ? true : false;                                            tempPropObject.trueStateFaIcon =            dfxMenuItem.state.checkedIcon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.state.checkedIcon.value+'}}' : eval(dfxMenuItem.state.checkedIcon.value);                            tempPropObject.falseStateFaIcon =           dfxMenuItem.state.uncheckedIcon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.state.uncheckedIcon.value+'}}' : eval(dfxMenuItem.state.uncheckedIcon.value);                            tempPropObject.trueStateSvgIcon =           dfxMenuItem.state.checkedIcon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.state.checkedIcon.value+'}}' : eval(dfxMenuItem.state.checkedIcon.value);                            tempPropObject.falseStateSvgIcon =          dfxMenuItem.state.uncheckedIcon.value.indexOf("'") == -1 ? '{{'+dfxMenuItem.state.uncheckedIcon.value+'}}' : eval(dfxMenuItem.state.uncheckedIcon.value);                            tempPropObject.trueStateFaIconStyle =       dfxMenuItem.state.checkedIcon.style;                            tempPropObject.falseStateFaIconStyle =      dfxMenuItem.state.uncheckedIcon.style;                            tempPropObject.trueStateSvgIconStyle =      dfxMenuItem.state.checkedIcon.style;                            tempPropObject.falseStateSvgIconStyle =     dfxMenuItem.state.uncheckedIcon.style;                            tempPropObject.trueStateFaIconClass =       dfxMenuItem.state.checkedIcon.class;                            tempPropObject.falseStateFaIconClass =      dfxMenuItem.state.uncheckedIcon.class;                            tempPropObject.trueStateSvgIconClass =      dfxMenuItem.state.checkedIcon.class;                            tempPropObject.falseStateSvgIconClass =     dfxMenuItem.state.uncheckedIcon.class;                            if ( dfxMenuItem.menuItems.value.length > 0 ) {                                tempPropObject.itemClick = dfxMenuItem.state.value ? '$mdOpenMenu();changeState('+"'"+tempPropObject.itemIndex+"'"+', $event, '+"'"+side+"'"+', '+"'"+optionsType+"'"+');'+dfxMenuItem.onclick : '$mdOpenMenu();'+dfxMenuItem.onclick;                            } else {                                tempPropObject.itemClick = dfxMenuItem.state.value ? 'changeState('+"'"+tempPropObject.itemIndex+"'"+', $event, '+"'"+side+"'"+', '+"'"+optionsType+"'"+');unfocusButton($event);'+dfxMenuItem.onclick : 'unfocusButton($event);'+dfxMenuItem.onclick;                                                    }                                            }                    } else if (  toolbarType==='buttons' ) {                        scope.waitableItem = { "value": false };                        if ( dfxMenuItem.hasOwnProperty('state')) { delete dfxMenuItem.state; }                        if ( typeof level === 'undefined' ) {                             scope.waitableItem.value = true;                            if ( !dfxMenuItem.hasOwnProperty('waiting') ) {                                dfxMenuItem.waiting = {                                    "value": "", "autoDisabled": false,                                     "icon": { "value": "'fa-spinner'", "type": "fa-icon", "style": "", "class": "fa-pulse" }                                }                            }                        } else {                            scope.waitableItem.value = false;                            if ( dfxMenuItem.hasOwnProperty('waiting')) { delete dfxMenuItem.waiting; }                        }                        if ( type === 'singleMenuItem' ) {                            tempPropObject.ifFaIcon =              dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'fa-icon' ? true : false;                            tempPropObject.ifSvgIcon =             dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'svg-icon' ? true : false;                        } else {                            tempPropObject.isAutoDisabled =        dfxMenuItem.waiting.autoDisabled.length>0 ? dfxMenuItem.waiting.autoDisabled : false;                              tempPropObject.ifWaitClass =           dfxMenuItem.waiting.value.length>0 ? dfxMenuItem.waiting.value : false;                            tempPropObject.ifNotWait =             dfxMenuItem.waiting.value.length>0 ? dfxMenuItem.waiting.value : false;                            tempPropObject.ifWait =                dfxMenuItem.waiting.value.length>0 ? dfxMenuItem.waiting.value : false;                            tempPropObject.ifFaIcon =              dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'fa-icon' ? true : false;                            tempPropObject.ifSvgIcon =             dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'svg-icon' ? true : false;                                                    tempPropObject.ifWaitFaIcon =          dfxMenuItem.waiting.icon.value.length > 0 && dfxMenuItem.waiting.icon.type === 'fa-icon' ? true : false;                            tempPropObject.ifWaitSvgIcon =         dfxMenuItem.waiting.icon.value.length > 0 && dfxMenuItem.waiting.icon.type === 'svg-icon' ? true : false;                            tempPropObject.waitFaIcon =            dfxMenuItem.waiting.icon.value.indexOf("'") == -1 ? 'fa-spinner' : eval(dfxMenuItem.waiting.icon.value);                            tempPropObject.waitSvgIcon =           dfxMenuItem.waiting.icon.value.indexOf("'") == -1 ? 'track_changes' : eval(dfxMenuItem.waiting.icon.value);                            tempPropObject.waitFaIconStyle =       dfxMenuItem.waiting.icon.style;                            tempPropObject.waitSvgIconStyle =      dfxMenuItem.waiting.icon.style;                            tempPropObject.waitFaIconClass =       dfxMenuItem.waiting.icon.class;                            tempPropObject.waitSvgIconClass =      dfxMenuItem.waiting.icon.class;                        }                     }                  } else {                    var tempPropObject = {};                    tempPropObject.faIcon =                 '{{'+dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name]+'}}';                    tempPropObject.svgIcon =                '{{'+dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name]+'}}';                    tempPropObject.faItemIndex =            level >= 0 ? level + ',' + index : index;                    tempPropObject.itemLabel =              '{{'+dfxMenuItem[scope.itemNames.main.label]+'}}';                    tempPropObject.itemIndex =              level || level >= 0 ? level + ',' + index : index;                    tempPropObject.itemDisabled =           dfxMenuItem[scope.itemNames.main.disabled];                    tempPropObject.itemDisplay =            dfxMenuItem[scope.itemNames.main.display];                    tempPropObject.itemClick =              dfxMenuItem[scope.itemNames.main.scopeItems].length > 0 ? '$mdOpenMenu();'+dfxMenuItem[scope.itemNames.main.onclick] : 'unfocusButton($event);'+dfxMenuItem[scope.itemNames.main.onclick];                    if ( type === 'singleMenuItem' ) {                        tempPropObject.itemShortcut =       dfxMenuItem[scope.itemNames.main.shortcut];                        tempPropObject.ifItemNotification = dfxMenuItem[scope.itemNames.main.notification] !=='' ? true : false;                        tempPropObject.itemNotification =   '{{'+dfxMenuItem[scope.itemNames.main.notification]+'}}';                    }                       if ( toolbarType==='iconBar' ) {                        // if ( dfxMenuItem.hasOwnProperty('waiting')) { delete dfxMenuItem.waiting; }                         if ( !dfxMenuItem.hasOwnProperty(scope.itemNames.state.name) ) {                            tempPropObject.notState =               true;                            tempPropObject.isState =                false;                            tempPropObject.ifFaIcon =               dfxMenuItem[scope.itemNames.main.icon.value] !=='' && dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.type] === 'fa-icon' ? true : false;                            tempPropObject.ifSvgIcon =              dfxMenuItem[scope.itemNames.main.icon.value] !=='' && dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.type] === 'svg-icon' ? true : false;                            tempPropObject.ifStateFaIcon =          false;                            tempPropObject.ifStateSvgIcon =         false;                                                                            if ( dfxMenuItem[scope.itemNames.main.scopeItems].length > 0 ) {                                tempPropObject.itemClick = '$mdOpenMenu();'+dfxMenuItem[scope.itemNames.main.onclick];                            } else {                                tempPropObject.itemClick = 'unfocusButton($event);'+dfxMenuItem[scope.itemNames.main.onclick];                            }                        } else {                            tempPropObject.notState =               false;                            tempPropObject.isState =                true;                            tempPropObject.trueState =              dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.binding];                            tempPropObject.falseState =             dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.binding];                            tempPropObject.ifFaIcon =               false;                            tempPropObject.ifSvgIcon =              false;                            tempPropObject.ifTrueStateFaIcon =      dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.name].length > 0 && dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.type] === 'fa-icon' ? true : false;                            tempPropObject.ifTrueStateSvgIcon =     dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.name].length > 0 && dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.type] === 'svg-icon' ? true : false;                                            tempPropObject.ifFalseStateFaIcon =     dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.name].length > 0 && dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.type] === 'fa-icon' ? true : false;                            tempPropObject.ifFalseStateSvgIcon =    dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.name].length > 0 && dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.type] === 'svg-icon' ? true : false;                                            tempPropObject.trueStateFaIcon =        '{{'+dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.name]+'}}';                            tempPropObject.falseStateFaIcon =       '{{'+dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.name]+'}}';                            tempPropObject.trueStateSvgIcon =       '{{'+dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.name]+'}}';                            tempPropObject.falseStateSvgIcon =      '{{'+dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.name]+'}}';                            tempPropObject.trueStateFaIconStyle =   dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.style];                            tempPropObject.falseStateFaIconStyle =  dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.style];                            tempPropObject.trueStateSvgIconStyle =  dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.style];                            tempPropObject.falseStateSvgIconStyle = dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.style];                            tempPropObject.trueStateFaIconClass =   dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.class];                            tempPropObject.falseStateFaIconClass =  dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.class];                            tempPropObject.trueStateSvgIconClass =  dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.checkedIcon.value][scope.itemNames.state.checkedIcon.class];                            tempPropObject.falseStateSvgIconClass = dfxMenuItem[scope.itemNames.state.name][scope.itemNames.state.uncheckedIcon.value][scope.itemNames.state.uncheckedIcon.class];                            if ( dfxMenuItem[scope.itemNames.main.scopeItems].length > 0 ) {                                tempPropObject.itemClick = dfxMenuItem[scope.itemNames.state.binding] !=='' ? '$mdOpenMenu();changeState('+"'"+tempPropObject.itemIndex+"'"+', $event, '+"'"+side+"'"+', '+"'"+optionsType+"'"+');'+dfxMenuItem[scope.itemNames.main.onclick] : '$mdOpenMenu();'+dfxMenuItem[scope.itemNames.main.onclick];                            } else {                                tempPropObject.itemClick = dfxMenuItem[scope.itemNames.state.binding] !=='' ? 'changeState('+"'"+tempPropObject.itemIndex+"'"+', $event, '+"'"+side+"'"+', '+"'"+optionsType+"'"+');unfocusButton($event);'+dfxMenuItem[scope.itemNames.main.onclick] : 'unfocusButton($event);'+dfxMenuItem[scope.itemNames.main.onclick];                            }                        }                                                                } else if (  toolbarType==='buttons' ) {                        scope.waitableItem = { "value": false };                        // if ( dfxMenuItem.hasOwnProperty('state')) { delete dfxMenuItem.state; }                        if ( typeof level === 'undefined' ) {                             scope.waitableItem.value = true;                        } else {                            scope.waitableItem.value = false;                            // if ( dfxMenuItem.hasOwnProperty('waiting')) { delete dfxMenuItem.waiting; }                        }                        tempPropObject.ifFaIcon =              dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name].length > 0 && dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.type] === 'fa-icon' ? true : false;                        tempPropObject.ifSvgIcon =             dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name].length > 0 && dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.type] === 'svg-icon' ? true : false;                        if ( type === 'rootMenuItem' ) {                            if (dfxMenuItem.hasOwnProperty(scope.itemNames.waiting.name)) {                                tempPropObject.ifFaIcon =              dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name].length > 0 && dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.type] === 'fa-icon' ? true : false;                                tempPropObject.ifSvgIcon =             dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.name].length > 0 && dfxMenuItem[scope.itemNames.main.icon.value][scope.itemNames.main.icon.type] === 'svg-icon' ? true : false;                                                        tempPropObject.isAutoDisabled =        dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.autoDisabled].length>0 ? dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.autoDisabled] : false;                                  tempPropObject.ifWaitClass =           dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.binding].length>0 ? dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.binding] : false;                                tempPropObject.ifNotWait =             dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.binding].length>0 ? dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.binding] : false;                                tempPropObject.ifWait =                dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.binding].length>0 ? dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.binding] : false;                                tempPropObject.ifWaitFaIcon =          dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.icon.value][scope.itemNames.waiting.icon.name].length > 0 && dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.icon.value][scope.itemNames.waiting.icon.type] === 'fa-icon' ? true : false;                                tempPropObject.ifWaitSvgIcon =         dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.icon.value][scope.itemNames.waiting.icon.name].length > 0 && dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.icon.value][scope.itemNames.waiting.icon.type] === 'svg-icon' ? true : false;                                tempPropObject.waitFaIcon =            dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.icon.value][scope.itemNames.waiting.icon.name].indexOf("'") == -1 ? 'fa-spinner' : eval(dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.icon.value][scope.itemNames.waiting.icon.name]);                                tempPropObject.waitSvgIcon =           dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.icon.value][scope.itemNames.waiting.icon.name].indexOf("'") == -1 ? 'track_changes' : eval(dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.icon.value][scope.itemNames.waiting.icon.name]);                                tempPropObject.waitFaIconStyle =       dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.icon.value][scope.itemNames.waiting.icon.style];                                tempPropObject.waitSvgIconStyle =      dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.icon.value][scope.itemNames.waiting.icon.style];                                tempPropObject.waitFaIconClass =       dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.icon.value][scope.itemNames.waiting.icon.class];                                tempPropObject.waitSvgIconClass =      dfxMenuItem[scope.itemNames.waiting.name][scope.itemNames.waiting.icon.value][scope.itemNames.waiting.icon.class];                            }                         }                     }                }                var tempMenu = '';                if ( type === 'singleMenuItem' ) {                    tempMenu = singleMenuItem                        .replace('{{notState}}',                tempPropObject.notState )                        .replace('{{isState}}',                 tempPropObject.isState )                        .replace('{{trueState}}',               tempPropObject.trueState )                        .replace('{{falseState}}',              tempPropObject.falseState )                        .replace('{{ifFaIcon}}',                tempPropObject.ifFaIcon )                        .replace('{{ifSvgIcon}}',               tempPropObject.ifSvgIcon )                        .replace('{{ifTrueStateFaIcon}}',       tempPropObject.ifTrueStateFaIcon )                        .replace('{{ifFalseStateFaIcon}}',      tempPropObject.ifFalseStateFaIcon )                        .replace('{{ifTrueStateSvgIcon}}',      tempPropObject.ifTrueStateSvgIcon )                        .replace('{{ifFalseStateSvgIcon}}',     tempPropObject.ifFalseStateSvgIcon )                        .replace('{{faIcon}}',                  tempPropObject.faIcon )                        .replace('{{svgIcon}}',                 tempPropObject.svgIcon )                        .replace('{{trueStateFaIcon}}',         tempPropObject.trueStateFaIcon )                        .replace('{{falseStateFaIcon}}',        tempPropObject.falseStateFaIcon )                        .replace('{{trueStateSvgIcon}}',        tempPropObject.trueStateSvgIcon )                        .replace('{{falseStateSvgIcon}}',       tempPropObject.falseStateSvgIcon )                        .replace('{{trueStateFaIconStyle}}',    tempPropObject.trueStateFaIconStyle )                        .replace('{{falseStateFaIconStyle}}',   tempPropObject.falseStateFaIconStyle )                        .replace('{{trueStateSvgIconStyle}}',   tempPropObject.trueStateSvgIconStyle )                        .replace('{{falseStateSvgIconStyle}}',  tempPropObject.falseStateSvgIconStyle )                        .replace('{{trueStateFaIconClass}}',    tempPropObject.trueStateFaIconClass )                        .replace('{{falseStateFaIconClass}}',   tempPropObject.falseStateFaIconClass )                        .replace('{{trueStateSvgIconClass}}',   tempPropObject.trueStateSvgIconClass )                                                .replace('{{falseStateSvgIconClass}}',  tempPropObject.falseStateSvgIconClass )                           .replace('{{itemLabel}}',               tempPropObject.itemLabel )                        .replace('{{itemShortcut}}',            tempPropObject.itemShortcut )                        .replace('{{ifItemNotification}}',      tempPropObject.ifItemNotification )                        .replace('{{itemNotification}}',        tempPropObject.itemNotification )                        .replace('{{itemIndex}}',               tempPropObject.itemIndex )                        .replace('{{itemDisplay}}',             tempPropObject.itemDisplay )                        .replace('{{itemDisabled}}',            tempPropObject.itemDisabled )                        .replace('{{itemClick}}',               tempPropObject.itemClick );                } else {                    tempMenu = scope.rootMenuItem                        .replace('{{notState}}',                tempPropObject.notState )                        .replace('{{isState}}',                 tempPropObject.isState )                        .replace('{{trueState}}',               tempPropObject.trueState )                        .replace('{{falseState}}',              tempPropObject.falseState )                        .replace('{{ifFaIcon}}',                tempPropObject.ifFaIcon )                        .replace('{{ifSvgIcon}}',               tempPropObject.ifSvgIcon )                        .replace('{{ifTrueStateFaIcon}}',       tempPropObject.ifTrueStateFaIcon )                        .replace('{{ifFalseStateFaIcon}}',      tempPropObject.ifFalseStateFaIcon )                        .replace('{{ifTrueStateSvgIcon}}',      tempPropObject.ifTrueStateSvgIcon )                        .replace('{{ifFalseStateSvgIcon}}',     tempPropObject.ifFalseStateSvgIcon )                        .replace('{{ifWaitFaIcon}}',            tempPropObject.ifWaitFaIcon )                        .replace('{{ifWaitSvgIcon}}',           tempPropObject.ifWaitSvgIcon )                        .replace('{{faIcon}}',                  tempPropObject.faIcon )                        .replace('{{svgIcon}}',                 tempPropObject.svgIcon )                        .replace('{{trueStateFaIcon}}',         tempPropObject.trueStateFaIcon )                        .replace('{{falseStateFaIcon}}',        tempPropObject.falseStateFaIcon )                        .replace('{{trueStateSvgIcon}}',        tempPropObject.trueStateSvgIcon )                        .replace('{{falseStateSvgIcon}}',       tempPropObject.falseStateSvgIcon )                        .replace('{{trueStateFaIconStyle}}',    tempPropObject.trueStateFaIconStyle )                        .replace('{{falseStateFaIconStyle}}',   tempPropObject.falseStateFaIconStyle )                        .replace('{{trueStateSvgIconStyle}}',   tempPropObject.trueStateSvgIconStyle )                        .replace('{{falseStateSvgIconStyle}}',  tempPropObject.falseStateSvgIconStyle )                        .replace('{{trueStateFaIconClass}}',    tempPropObject.trueStateFaIconClass )                        .replace('{{falseStateFaIconClass}}',   tempPropObject.falseStateFaIconClass )                        .replace('{{trueStateSvgIconClass}}',   tempPropObject.trueStateSvgIconClass )                                                .replace('{{falseStateSvgIconClass}}',  tempPropObject.falseStateSvgIconClass )                                                .replace('{{isAutoDisabled}}',          tempPropObject.isAutoDisabled )                        .replace('{{ifNotWait}}',               tempPropObject.ifNotWait )                        .replace('{{ifWait}}',                  tempPropObject.ifWait )                        .replace('{{ifWaitClass}}',             tempPropObject.ifWaitClass )                        .replace('{{waitFaIcon}}',              tempPropObject.waitFaIcon )                        .replace('{{waitSvgIcon}}',             tempPropObject.waitSvgIcon )                        .replace('{{waitFaIconStyle}}',         tempPropObject.waitFaIconStyle )                        .replace('{{waitSvgIconStyle}}',        tempPropObject.waitSvgIconStyle )                        .replace('{{waitFaIconClass}}',         tempPropObject.waitFaIconClass )                        .replace('{{waitSvgIconClass}}',        tempPropObject.waitSvgIconClass )                        .replace('{{itemLabel}}',               tempPropObject.itemLabel )                        .replace('{{itemIndex}}',               tempPropObject.itemIndex )                        .replace('{{itemDisplay}}',             tempPropObject.itemDisplay )                        .replace('{{itemDisabled}}',            tempPropObject.itemDisabled )                        .replace('{{itemClick}}',               tempPropObject.itemClick );                }                 if (optionsType === 'static'){                    if ( dfxMenuItem.menuItems.value.length > 0 ) {                        scope.iconBar = scope.iconBar + tempMenu +'<md-menu-content width="4">';                    } else {                        if ( type === 'singleMenuItem' ) {                            scope.iconBar = scope.iconBar + tempMenu + '</md-menu-item>';                        } else {                            scope.iconBar = scope.iconBar + tempMenu + '<md-menu-content width="4"></md-menu-content>';                        }                    }                } else {                    if ( dfxMenuItem[scope.itemNames.main.scopeItems].length > 0 ) {                        scope.iconBar = scope.iconBar + tempMenu +'<md-menu-content width="4">';                    } else {                        if ( type === 'singleMenuItem' ) {                            scope.iconBar = scope.iconBar + tempMenu + '</md-menu-item>';                        } else {                            scope.iconBar = scope.iconBar + tempMenu + '<md-menu-content width="4"></md-menu-content>';                        }                    }                }            }            scope.iconbarBuilder = function( side ) {                $timeout(function() {                    if ( side === 'left' ) {                        if ( scope.attributes.toolbar.leftMenu.menuItemsType.value === 'dynamic' ) {                            scope.itemNames = scope.attributes.toolbar.leftMenu.menuItemNames.value;                            scope.iconbarArray = scope.$parent_scope[scope.itemNames.main.source];                        } else {                            scope.iconbarArray = scope.attributes.toolbar.leftMenu.menuItems.value;                        }                        if ( scope.attributes.toolbar.leftMenu.type.value === 'Icon Bar' ) {                            toolbarType='iconBar';                            scope.leftRootMenuItem = '<button ng-click="{{itemClick}}" ng-show="{{itemDisplay}}" menu-index="{{itemIndex}}" ng-disabled="{{itemDisabled}}" style="{{attributes.toolbar.leftMenu.iconBar.triggerButton.style}}" aria-label="md-icon-button" class="md-icon-button {{attributes.toolbar.leftMenu.iconBar.triggerButton.class}}">'+                                '<i ng-if="{{notState}}">'+                                    '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.class}}" style="font-size:{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.size}}px; {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.style}}"></md-icon>'+                                    '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.class}}" style="{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.style}}"></ng-md-icon>'+                                '</i>'+                                '<i ng-if="{{isState}}">'+                                    '<i ng-if="{{trueState}}">'+                                        '<md-icon ng-if="{{ifTrueStateFaIcon}}" class="fa {{trueStateFaIcon}} dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.class}} {{trueStateFaIconClass}}" style="font-size:{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.size}}px; {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.style}} {{trueStateFaIconStyle}}"></md-icon>'+                                        '<ng-md-icon ng-if="{{ifTrueStateSvgIcon}}" icon="{{trueStateSvgIcon}}" size="{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.class}} {{trueStateSvgIconClass}}" style="{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.style}} {{trueStateSvgIconStyle}}"></ng-md-icon>'+                                    '</i>'+                                    '<i ng-if="!{{falseState}}">'+                                        '<md-icon ng-if="{{ifFalseStateFaIcon}}" class="fa {{falseStateFaIcon}} dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.class}} {{falseStateFaIconClass}}" style="font-size:{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.size}}px; {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.style}} {{falseStateFaIconStyle}}"></md-icon>'+                                        '<ng-md-icon ng-if="{{ifFalseStateSvgIcon}}" icon="{{falseStateSvgIcon}}" size="{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.class}} {{falseStateSvgIconClass}}" style="{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.style}} {{falseStateSvgIconStyle}}"></ng-md-icon>'+                                    '</i>'+                                '</i>'+                            '</button>';                            singleMenuItem ='<md-button ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" menu-index="{{itemIndex}}" ng-click="{{itemClick}}" '+                            'class="dfx-menu-button {{attributes.toolbar.leftMenu.iconBar.actionButton.class}}" style="{{attributes.toolbar.leftMenu.iconBar.actionButton.style}}" aria-label="iconbar-button" >'+                                '<i ng-if="{{notState}}">'+                                    '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-menu-button-icon {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.class}}" style="font-size:{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.size}}px; {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.style}}"></md-icon>'+                                    '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.class}}" style="{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.style}}"></ng-md-icon>'+                                '</i>'+                                '<i ng-if="{{isState}}">'+                                    '<i ng-if="{{trueState}}">'+                                        '<md-icon ng-if="{{ifTrueStateFaIcon}}" class="fa {{trueStateFaIcon}} dfx-menu-button-icon {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.class}} {{trueStateFaIconClass}}" style="font-size:{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.size}}px; {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.style}} {{trueStateFaIconStyle}}"></md-icon>'+                                        '<ng-md-icon ng-if="{{ifTrueStateSvgIcon}}" icon="{{trueStateSvgIcon}}" size="{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.class}} {{trueStateSvgIconClass}}" style="{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.style}} {{trueStateSvgIconStyle}}"></ng-md-icon>'+                                    '</i>'+                                    '<i ng-if="!{{falseState}}">'+                                        '<md-icon ng-if="{{ifFalseStateFaIcon}}" class="fa {{falseStateFaIcon}} dfx-menu-button-icon {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.class}} {{falseStateFaIconClass}}" style="font-size:{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.size}}px; {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.style}} {{falseStateFaIconStyle}}"></md-icon>'+                                        '<ng-md-icon ng-if="{{ifFalseStateSvgIcon}}" icon="{{falseStateSvgIcon}}" size="{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.class}} {{falseStateSvgIconClass}}" style="{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.style}} {{falseStateSvgIconStyle}}"></ng-md-icon>'+                                    '</i>'+                                '</i>'+                                '<span>{{itemLabel}}</span>'+                                '<span class="md-alt-text">{{itemShortcut}}</span>'+                                '<small ng-if="{{ifItemNotification}}">{{itemNotification}}</small>'+                            '</md-button>';                        } else if ( scope.attributes.toolbar.leftMenu.type.value === 'Buttons' ) {                            toolbarType='buttons';                            scope.leftRootMenuItem = '<button aria-label="left_buttons" ng-click="{{itemClick}}" style="width: 100%; {{attributes.toolbar.leftMenu.buttons.triggerButton.style}}"' +                            'class="dfx-core-gc-button dfx-core-gc-toolbar-left-buttons md-button md-raised md-altTheme-theme glyph {{attributes.toolbar.leftMenu.buttons.triggerButton.class}} {{ {{ifWaitClass}} ? \'dfx-core-button-wait\' : \'\'}}" ng-disabled="{{itemDisabled}} || {{isAutoDisabled}}">'+                            '<div ng-if="!{{ifNotWait}}">'+                                '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-core-gc-toolbar-left-menu-icon {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.class}}" style="font-size: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; width: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.style}}"></md-icon>'+                                '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-left-menu-icon {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.class}}" style="width: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px;{{attributes.toolbar.leftMenu.buttons.triggerButton.icon.style}}"></ng-md-icon>'+                            '</div>'+                            '<div ng-if="{{ifWait}}">'+                                '<md-icon ng-if="{{ifWaitFaIcon}}" class="fa {{waitFaIcon}} dfx-core-gc-toolbar-left-menu-icon {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.class}} {{waitFaIconClass}}" style="font-size: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; width: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px;{{attributes.toolbar.leftMenu.buttons.triggerButton.icon.style}}; {{waitFaIconStyle}}"></md-icon>'+                                '<ng-md-icon ng-if="{{ifWaitSvgIcon}}" icon="{{waitSvgIcon}}" size="{{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-left-menu-icon {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.class}} {{waitSvgIconClass}}" style="width: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px;{{attributes.toolbar.leftMenu.buttons.triggerButton.icon.style}}; {{waitSvgIconStyle}}"></ng-md-icon>'+                            '</div>'+                            '<span style="line-height: 20px;">{{itemLabel}}</span>'+                            '</button>';                            singleMenuItem ='<md-button ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" menu-index="{{itemIndex}}" ng-click="{{itemClick}}" '+                            'class="dfx-menu-button {{attributes.toolbar.leftMenu.buttons.actionButton.class}}" style="{{attributes.toolbar.leftMenu.buttons.actionButton.style}}" aria-label="buttons-button" >'+                            '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-menu-button-icon {{attributes.toolbar.leftMenu.buttons.actionButton.icon.class}}" style="font-size:{{attributes.toolbar.leftMenu.buttons.actionButton.icon.size}}px; {{attributes.toolbar.leftMenu.buttons.actionButton.icon.style}}"></md-icon>'+                            '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.leftMenu.buttons.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.leftMenu.buttons.actionButton.icon.class}}" style="{{attributes.toolbar.leftMenu.buttons.actionButton.icon.style}}"></ng-md-icon>'+                                                        '<span>{{itemLabel}}</span>'+                            '<span class="md-alt-text">{{itemShortcut}}</span>'+                            '<small ng-if="{{ifItemNotification}}">{{itemNotification}}</small>'+                            '</md-button>';                        }                        scope.rootMenuItem = scope.leftRootMenuItem;                        if ( scope.attributes.toolbar.leftMenu.type.value === 'Buttons' ) {                            scope.iconBar = '<md-menu-bar style="padding: 0">';                        } else {                            scope.iconBar = '<md-menu-bar>';                        }                    } else if ( side === 'right' ) {                        if ( scope.attributes.toolbar.rightMenu.menuItemsType.value === 'dynamic' ) {                            scope.itemNames = scope.attributes.toolbar.rightMenu.menuItemNames.value;                            scope.iconbarArray = scope.$parent_scope[scope.itemNames.main.source];                        } else {                            scope.iconbarArray = scope.attributes.toolbar.rightMenu.menuItems.value;                        }                        if ( scope.attributes.toolbar.rightMenu.type.value === 'Icon Bar' ) {                            toolbarType='iconBar';                            scope.rightRootMenuItem = '<button ng-click="{{itemClick}}" ng-show="{{itemDisplay}}" menu-index="{{itemIndex}}" ng-disabled="{{itemDisabled}}" style="{{attributes.toolbar.rightMenu.iconBar.triggerButton.style}}" aria-label="md-icon-button" class="md-icon-button {{attributes.toolbar.rightMenu.iconBar.triggerButton.class}}">'+                                '<i ng-if="{{notState}}">'+                                    '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.class}}" style="font-size:{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.size}}px; {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.style}}"></md-icon>'+                                    '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.class}}" style="{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.style}}"></ng-md-icon>'+                                '</i>'+                                '<i ng-if="{{isState}}">'+                                    '<i ng-if="{{trueState}}">'+                                        '<md-icon ng-if="{{ifTrueStateFaIcon}}" class="fa {{trueStateFaIcon}} dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.class}} {{trueStateFaIconClass}}" style="font-size:{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.size}}px; {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.style}} {{trueStateFaIconStyle}}"></md-icon>'+                                        '<ng-md-icon ng-if="{{ifTrueStateSvgIcon}}" icon="{{trueStateSvgIcon}}" size="{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.class}} {{trueStateSvgIconClass}}" style="{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.style}} {{trueStateSvgIconStyle}}"></ng-md-icon>'+                                    '</i>'+                                    '<i ng-if="!{{falseState}}">'+                                        '<md-icon ng-if="{{ifFalseStateFaIcon}}" class="fa {{falseStateFaIcon}} dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.class}} {{falseStateFaIconClass}}" style="font-size:{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.size}}px; {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.style}} {{falseStateFaIconStyle}}"></md-icon>'+                                        '<ng-md-icon ng-if="{{ifFalseStateSvgIcon}}" icon="{{falseStateSvgIcon}}" size="{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.class}} {{falseStateSvgIconClass}}" style="{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.style}} {{falseStateSvgIconStyle}}"></ng-md-icon>'+                                    '</i>'+                                '</i>'+                            '</button>';                            singleMenuItem ='<md-button ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" menu-index="{{itemIndex}}" ng-click="{{itemClick}}" '+                            'class="dfx-menu-button {{attributes.toolbar.rightMenu.iconBar.actionButton.class}}" style="{{attributes.toolbar.rightMenu.iconBar.actionButton.style}}" aria-label="iconbar-button" >'+                                '<i ng-if="{{notState}}">'+                                    '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-menu-button-icon {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.class}}" style="font-size:{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.size}}px; {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.style}}"></md-icon>'+                                    '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.class}}" style="{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.style}}"></ng-md-icon>'+                                '</i>'+                                '<i ng-if="{{isState}}">'+                                    '<i ng-if="{{trueState}}">'+                                        '<md-icon ng-if="{{ifTrueStateFaIcon}}" class="fa {{trueStateFaIcon}} dfx-menu-button-icon {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.class}} {{trueStateFaIconClass}}" style="font-size:{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.size}}px; {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.style}} {{trueStateFaIconStyle}}"></md-icon>'+                                        '<ng-md-icon ng-if="{{ifTrueStateSvgIcon}}" icon="{{trueStateSvgIcon}}" size="{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.class}} {{trueStateSvgIconClass}}" style="{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.style}} {{trueStateSvgIconStyle}}"></ng-md-icon>'+                                    '</i>'+                                    '<i ng-if="!{{falseState}}">'+                                        '<md-icon ng-if="{{ifFalseStateFaIcon}}" class="fa {{falseStateFaIcon}} dfx-menu-button-icon {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.class}} {{falseStateFaIconClass}}" style="font-size:{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.size}}px; {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.style}} {{falseStateFaIconStyle}}"></md-icon>'+                                        '<ng-md-icon ng-if="{{ifFalseStateSvgIcon}}" icon="{{falseStateSvgIcon}}" size="{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.class}} {{falseStateSvgIconClass}}" style="{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.style}} {{falseStateSvgIconStyle}}"></ng-md-icon>'+                                    '</i>'+                                '</i>'+                                '<span>{{itemLabel}}</span>'+                                '<span class="md-alt-text">{{itemShortcut}}</span>'+                                '<small ng-if="{{ifItemNotification}}">{{itemNotification}}</small>'+                            '</md-button>';                        } else if ( scope.attributes.toolbar.rightMenu.type.value === 'Buttons' ) {                            toolbarType='buttons';                            scope.rightRootMenuItem = '<button aria-label="right_buttons" ng-click="{{itemClick}}" style="width: 100%; {{attributes.toolbar.rightMenu.buttons.triggerButton.style}}" ' +                            'class="dfx-core-gc-button dfx-core-gc-toolbar-right-buttons md-button md-raised md-altTheme-theme glyph {{attributes.toolbar.rightMenu.buttons.triggerButton.class}} {{ {{ifWaitClass}} ? \'dfx-core-button-wait\' : \'\'}}" ng-disabled="{{itemDisabled}} || {{isAutoDisabled}}">'+                            '<div ng-if="!{{ifNotWait}}">'+                                '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-core-gc-toolbar-right-menu-icon {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.class}}" style="font-size: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; width: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.style}}"></md-icon>'+                                '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-right-menu-icon {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.class}}" style="width: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px;{{attributes.toolbar.rightMenu.buttons.triggerButton.icon.style}}"></ng-md-icon>'+                            '</div>'+                            '<div ng-if="{{ifWait}}">'+                                '<md-icon ng-if="{{ifWaitFaIcon}}" class="fa {{waitFaIcon}} dfx-core-gc-toolbar-right-menu-icon {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.class}} {{waitFaIconClass}}" style="font-size: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; width: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px;{{attributes.toolbar.rightMenu.buttons.triggerButton.icon.style}}; {{waitFaIconStyle}}"></md-icon>'+                                '<ng-md-icon ng-if="{{ifWaitSvgIcon}}" icon="{{waitSvgIcon}}" size="{{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-right-menu-icon {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.class}} {{waitSvgIconClass}}" style="width: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px;{{attributes.toolbar.rightMenu.buttons.triggerButton.icon.style}}; {{waitSvgIconStyle}}"></ng-md-icon>'+                            '</div>'+                            '<span style="line-height: 20px;">{{itemLabel}}</span></button>';                            singleMenuItem ='<md-button ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" menu-index="{{itemIndex}}" ng-click="{{itemClick}}" '+                            'class="dfx-menu-button {{attributes.toolbar.rightMenu.buttons.actionButton.class}}" style="{{attributes.toolbar.rightMenu.buttons.actionButton.style}}" aria-label="buttons-button" >'+                            '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-menu-button-icon {{attributes.toolbar.rightMenu.buttons.actionButton.icon.class}}" style="font-size:{{attributes.toolbar.rightMenu.buttons.actionButton.icon.size}}px; {{attributes.toolbar.rightMenu.buttons.actionButton.icon.style}}"></md-icon>'+                            '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.rightMenu.buttons.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.rightMenu.buttons.actionButton.icon.class}}" style="{{attributes.toolbar.rightMenu.buttons.actionButton.icon.style}}"></ng-md-icon>'+                                                        '<span>{{itemLabel}}</span>'+                            '<span class="md-alt-text">{{itemShortcut}}</span>'+                            '<small ng-if="{{ifItemNotification}}">{{itemNotification}}</small>'+                            '</md-button>';                        }                        scope.rootMenuItem = scope.rightRootMenuItem;                        if ( scope.attributes.toolbar.rightMenu.type.value === 'Buttons' ) {                            scope.iconBar = '<md-menu-bar style="padding: 0">';                        } else {                            scope.iconBar = '<md-menu-bar>';                        }                    }                    if ( side === 'left' ) {                        if(scope.attributes.toolbar.leftMenu.menuItemsType.value === 'static') {                            for ( var item = 0; item < scope.iconbarArray.length; item++ ) {                                if ( scope.attributes.toolbar.leftMenu.type.value === 'Buttons' ) {                                    scope.iconBar = scope.iconBar + '<md-menu class="toolbar-button" style="padding: 1px">';                                                                } else {                                    scope.iconBar = scope.iconBar + '<md-menu>';                                }                                                              if ( scope.iconbarArray[item].menuItems.value.length > 0 ) {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, side, 'static' );                                    buildNextLevel( scope.iconbarArray[item].menuItems.value, item, side, 'static');                                    scope.iconBar = scope.iconBar + '</md-menu-content>';                                } else {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, side, 'static' );                                }                                scope.iconBar = scope.iconBar + '</md-menu>';                            }                        } else {                            for ( var item = 0; item < scope.iconbarArray.length; item++ ) {                                if ( scope.attributes.toolbar.leftMenu.type.value === 'Buttons' ) {                                    scope.iconBar = scope.iconBar + '<md-menu class="toolbar-button" style="padding: 1px">';                                                                } else {                                    scope.iconBar = scope.iconBar + '<md-menu>';                                }                                                              if ( scope.iconbarArray[item][scope.attributes.toolbar.leftMenu.menuItemNames.value.main.scopeItems].length > 0 ) {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, side, 'dynamic' );                                    buildNextLevel( scope.iconbarArray[item][scope.attributes.toolbar.leftMenu.menuItemNames.value.main.scopeItems], item, side, 'dynamic');                                    scope.iconBar = scope.iconBar + '</md-menu-content>';                                } else {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, side, 'dynamic' );                                }                                scope.iconBar = scope.iconBar + '</md-menu>';                            }                        }                    } else {                        if(scope.attributes.toolbar.rightMenu.menuItemsType.value === 'static') {                            for ( var item = 0; item < scope.iconbarArray.length; item++ ) {                                if ( scope.attributes.toolbar.rightMenu.type.value === 'Buttons' ) {                                    scope.iconBar = scope.iconBar + '<md-menu class="toolbar-button" style="padding: 1px">';                                                                } else {                                    scope.iconBar = scope.iconBar + '<md-menu>';                                }                                                              if ( scope.iconbarArray[item].menuItems.value.length > 0 ) {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, side, 'static' );                                    buildNextLevel( scope.iconbarArray[item].menuItems.value, item, side, 'static');                                    scope.iconBar = scope.iconBar + '</md-menu-content>';                                } else {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, side, 'static' );                                }                                scope.iconBar = scope.iconBar + '</md-menu>';                            }                        } else {                            for ( var item = 0; item < scope.iconbarArray.length; item++ ) {                                if ( scope.attributes.toolbar.rightMenu.type.value === 'Buttons' ) {                                    scope.iconBar = scope.iconBar + '<md-menu class="toolbar-button" style="padding: 1px">';                                                                } else {                                    scope.iconBar = scope.iconBar + '<md-menu>';                                }                                                              if ( scope.iconbarArray[item][scope.attributes.toolbar.rightMenu.menuItemNames.value.main.scopeItems].length > 0 ) {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, side, 'dynamic' );                                    buildNextLevel( scope.iconbarArray[item][scope.attributes.toolbar.rightMenu.menuItemNames.value.main.scopeItems], item, side, 'dynamic');                                    scope.iconBar = scope.iconBar + '</md-menu-content>';                                } else {                                    createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item, side, 'dynamic' );                                }                                scope.iconBar = scope.iconBar + '</md-menu>';                            }                        }                    }                    scope.iconBar = scope.iconBar + '</md-menu-bar>';                    scope.iconBarMenu = scope.iconBar;                    if(side==='left'){                        if(scope.attributes.toolbar.leftMenu.type.value === 'Icon Bar'){                            if ( scope.attributes.hasOwnProperty('repeat_in') && scope.attributes.repeat_title.value ) {                                $('.' + scope.component_id + '_left_menu_bar[dfx-repeatable-panel='+attrs.dfxRepeatablePanel+']').html(scope.iconBarMenu);                                $compile($('.' + scope.component_id + '_left_menu_bar[dfx-repeatable-panel='+attrs.dfxRepeatablePanel+']').contents())(scope);                            } else {                                $('.' + scope.component_id + '_left_menu_bar').html(scope.iconBarMenu);                                $compile($('.' + scope.component_id + '_left_menu_bar').contents())(scope);                            }                        }else if(scope.attributes.toolbar.leftMenu.type.value === 'Buttons'){                            if ( scope.attributes.hasOwnProperty('repeat_in') && scope.attributes.repeat_title.value ) {                                $('.' + scope.component_id + '_left_buttons_menu[dfx-repeatable-panel='+attrs.dfxRepeatablePanel+']').html(scope.iconBarMenu);                                $compile($('.' + scope.component_id + '_left_buttons_menu[dfx-repeatable-panel='+attrs.dfxRepeatablePanel+']').contents())(scope);                            } else {                                $('.' + scope.component_id + '_left_buttons_menu').html(scope.iconBarMenu);                                $compile($('.' + scope.component_id + '_left_buttons_menu').contents())(scope);                            }                        }                        scope.setButtonsWidth(scope.attributes.toolbar.leftMenu.equalButtonSize.value, 'left');                    }else if(side==='right'){                        if(scope.attributes.toolbar.rightMenu.type.value === 'Icon Bar'){                            if ( scope.attributes.hasOwnProperty('repeat_in') && scope.attributes.repeat_title.value ) {                                $('.' + scope.component_id + '_right_menu_bar[dfx-repeatable-panel='+attrs.dfxRepeatablePanel+']').html(scope.iconBarMenu);                                $compile($('.' + scope.component_id + '_right_menu_bar[dfx-repeatable-panel='+attrs.dfxRepeatablePanel+']').contents())(scope);                            } else {                                $('.' + scope.component_id + '_right_menu_bar').html(scope.iconBarMenu);                                $compile($('.' + scope.component_id + '_right_menu_bar').contents())(scope);                            }                        }else if(scope.attributes.toolbar.rightMenu.type.value === 'Buttons'){                            if ( scope.attributes.hasOwnProperty('repeat_in') && scope.attributes.repeat_title.value ) {                                $('.' + scope.component_id + '_right_buttons_menu[dfx-repeatable-panel='+attrs.dfxRepeatablePanel+']').html(scope.iconBarMenu);                                $compile($('.' + scope.component_id + '_right_buttons_menu[dfx-repeatable-panel='+attrs.dfxRepeatablePanel+']').contents())(scope);                            } else {                                $('.' + scope.component_id + '_right_buttons_menu').html(scope.iconBarMenu);                                $compile($('.' + scope.component_id + '_right_buttons_menu').contents())(scope);                            }                        }                        scope.setButtonsWidth(scope.attributes.toolbar.rightMenu.equalButtonSize.value, 'right');                    }                }, 0);            }            if (scope.attributes.toolbar.leftMenu.menuItemsType.value === 'static') {                scope.$watch('attributes.toolbar.leftMenu.menuItems.value', function(newVal, oldVal) {                    if ( newVal != null && !angular.equals(newVal, oldVal) && scope.attributes.toolbar.leftMenu.type.value !== 'Fab' ) {                        $timeout(function() {                            scope.iconbarBuilder('left');                        }, 0);                    }                }, true);            } else if (scope.attributes.toolbar.leftMenu.menuItemsType.value === 'dynamic'){                scope.$watch('$parent_scope.'+scope.attributes.toolbar.leftMenu.menuItemNames.value.main.source, function(newVal, oldVal) {                    if ( newVal != null && !angular.equals(newVal, oldVal) && scope.attributes.toolbar.leftMenu.type.value !== 'Fab' ) {                        $timeout(function() {                            scope.iconbarBuilder('left');                        }, 0);                    }                }, true);            } else if(scope.attributes.toolbar.rightMenu.menuItemsType.value === 'static') {                scope.$watch('attributes.toolbar.rightMenu.menuItems.value', function(newVal, oldVal) {                    if ( newVal != null && !angular.equals(newVal, oldVal) && scope.attributes.toolbar.rightMenu.type.value !== 'Fab' ) {                        $timeout(function() {                            scope.iconbarBuilder('right');                        }, 0);                    }                }, true);            } else if (scope.attributes.toolbar.rightMenu.menuItemsType.value === 'dynamic') {                scope.$watch('$parent_scope.'+scope.attributes.toolbar.rightMenu.menuItemNames.value.main.source, function(newVal, oldVal) {                    if ( newVal != null && !angular.equals(newVal, oldVal) && scope.attributes.toolbar.rightMenu.type.value !== 'Fab' ) {                        $timeout(function() {                            scope.iconbarBuilder('right');                        }, 0);                    }                }, true);            }            scope.unfocusButton = function(event){                var target = $(event.target);                if (target.is( "button" ) ) {                    target.blur();                }else{                    $(target.parent()[0]).blur();                }            };            // deleted form toolbar_preview.html md-fab-actions: ng-show="attributes.toolbar.rightMenu.initialClick.value === true"            scope.rightFabClick = function(){                //scope.attributes.toolbar.rightMenu.initialClick.value = true;            };            // deleted form toolbar_preview.html md-fab-actions: ng-show="attributes.toolbar.leftMenu.initialClick.value === true"            scope.leftFabClick = function(){                //scope.attributes.toolbar.leftMenu.initialClick.value = true;            };            scope.snippetTrustAsHtml = function(snippet) {                return $sce.trustAsHtml(snippet);            };        }    }});// dfxGControls.directive('dfxGcWebKnob', ['$timeout', function($timeout) {//     return {//         restrict:    'A',//         require:     '^dfxGcWebBase',//         scope:       true,//         templateUrl: function (el, attrs) {//             if (angular.isDefined(attrs.dfxGcEdit)) {//                 return '/gcontrols/web/knob_edit.html';//             } else if (angular.isDefined(attrs.dfxGcDesign)) {//                 return '/gcontrols/web/knob_design.html';//             } else {//                 return '/gcontrols/web/knob.html';//             }//         },//         link:        function (scope, element, attrs, basectrl) {//             var component = scope.$parent.getComponent(element);//             var getIntVal = function (strVal) {//                 if (strVal) {//                     return !isNaN(parseInt(strVal)) ? parseInt(strVal) : 0;//                 } else {//                     return 0;//                 }//             };//             var getBooleanVal = function (strVal) {//                 return (strVal) ? (strVal == 'true') : false;//             };//             var getIntValWithoutPx = function(value) {//                 var result = value;//                 if (result) {//                     result = Number(result);//                     if (! result) {//                         var pxPos = value.indexOf('p');//                         if (pxPos > -1) {//                             result = value.substring(0, pxPos);//                         }//                     }//                 }//                 return result;//             };//             var getLabelStyle = function(width) {//                 var minDefaultWidth = 52,//                     actualWidth = getIntValWithoutPx(width),//                     labelLeftMargin = parseInt(actualWidth / 7),//                     labelPaddingDiff = actualWidth / minDefaultWidth > 1 ? actualWidth / minDefaultWidth * 2 : 0;//                 labelLeftMargin += labelPaddingDiff;//                 return 'margin-left:' + labelLeftMargin + 'px; display:block; text-align:';//             };//             basectrl.init(scope, element, component, attrs, 'knob').then(function () {//                 if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign)) { // RUN TIME//                     scope.$gcscope = scope; // save a pointer to GC scope and in the scope itself to make it accessible later//                     basectrl.bindScopeVariable(scope, component.attributes.binding.value);//                     // watch scope variable bound to knob//                     scope.$watch(scope.attributes.binding.value, function (newValue) {//                         $('#' + scope.component_id).find('.knob').val(newValue).trigger('change');//                     });//                 } else { // DESIGN TIME//                     var changeConfigParam = function(scope, paramName, newValue) {//                         if (scope.attributes && newValue) {//                             var configParams = {};//                             configParams[paramName] = newValue;//                             if (paramName == 'height' || paramName == 'width') {//                                 configParams[paramName] = getIntValWithoutPx(newValue);//                             }//                             $('#' + scope.component_id).find('.knob').trigger('configure', configParams);//                         }//                     };//                     scope.$watch('attributes.css.width', function (newValue) {//                         changeConfigParam(scope, 'width', newValue);//                         var labelStyle = getLabelStyle(newValue);//                         $('#' + scope.component_id).find('label').attr('style', labelStyle + scope.attributes.selectedLabelPosition.value + ';');//                     });//                     scope.$watch('attributes.css.height', function (newValue) {//                         changeConfigParam(scope, 'height', newValue);//                     });//                     scope.$watch('attributes.min.value', function (newValue) {//                         changeConfigParam(scope, 'min', newValue);//                     });//                     scope.$watch('attributes.max.value', function (newValue) {//                         changeConfigParam(scope, 'max', newValue);//                     });//                     scope.$watch('attributes.step.value', function (newValue) {//                         changeConfigParam(scope, 'step', newValue);//                     });//                     scope.$watch('attributes.css.color', function (newValue) {//                         changeConfigParam(scope, 'fgColor', newValue);//                     });//                     scope.$watch('attributes.css.background', function (newValue) {//                         changeConfigParam(scope, 'bgColor', newValue);//                     });//                     scope.$watch('attributes.selectedLabelPosition.value', function (newValue) {//                         if (scope.attributes) {//                             var labelStyle = getLabelStyle(scope.attributes.css.width);//                             $('#' + scope.component_id).find('label').attr('style', labelStyle + newValue + ';');//                         }//                     });//                 }//                 $timeout(function () {//                     $('#' + scope.component_id).find('.knob').knob({//                         min:     getIntVal(scope.attributes.min.value),//                         max:     getIntVal(scope.attributes.max.value),//                         step:    getIntVal(scope.attributes.step.value),//                         readOnly: getBooleanVal(scope.attributes.disabled.value),//                         value:    getIntVal(scope.attributes.binding.value),//                         width:   getIntValWithoutPx(scope.attributes.css.width),//                         height:  getIntValWithoutPx(scope.attributes.css.height),//                         fgColor: scope.attributes.css.color,//                         bgColor: scope.attributes.css.background || '#EEEEEE',//                         draw:    function () {//                             if (scope.attributes.selectedSymbolPosition.value && scope.attributes.symbol.value) {//                                 var res = '',//                                     val = getIntVal(scope.attributes.binding.value) || 50;//                                 if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign)) { // RUN TIME//                                     val = scope.$gcscope[scope.attributes.binding.value];//                                 }//                                 if (scope.attributes.selectedSymbolPosition.value == 'left') {//                                     res = scope.attributes.symbol.value + val;//                                 } else if(scope.attributes.selectedSymbolPosition.value == 'right') {//                                     res = val + scope.attributes.symbol.value;//                                 }//                                 $(this.i).val(res);//                             }//                         },//                         change:  function (newValue) {//                             if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign)) { // RUN TIME//                                 newValue = Math.round(newValue);//                                 // change the bound scope variable if exists//                                 scope.$apply(function () {//                                     if (scope.$gcscope[scope.attributes.binding.value]) {//                                         scope.$gcscope[scope.attributes.binding.value] = newValue;//                                     }//                                 });//                                 // invoke onchange listener//                                 var changeFunc = scope.attributes.onchange.value;//                                 if (changeFunc) {//                                     var bracketsPos = changeFunc.indexOf('(');//                                     changeFunc      = (bracketsPos > -1) ? changeFunc.substring(0, bracketsPos) : changeFunc;//                                     if (scope.$gcscope[changeFunc]) scope.$gcscope[changeFunc](newValue);//                                 }//                             }//                         }//                     });//                     if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign)) { // RUN TIME//                         // set label position//                         var labelStyle = getLabelStyle(scope.attributes.css.width);//                         $('#' + scope.component_id).find('label').attr('style', labelStyle + scope.attributes.selectedLabelPosition.value + ';');//                     }//                 }, 0);//             });//         }//     }// }]);dfxGControls.directive('dfxGcWebHtml', function($sce, $mdDialog, $compile, $parse, $timeout) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/html_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/html_design.html';            } else {                return '/gcontrols/web/html.html';            }        },        link: {            pre : function(scope, element, attrs, basectrl) {                var component = scope.getComponent(element);                scope.component_id = component.id;                scope.attributes = null;                var current_element = element;                basectrl.init(scope, element, component, attrs, 'html').then(function(){                    scope.attributes.flex.status = "overridden" ;                    if (!angular.isDefined(attrs.dfxGcEdit)) {                        scope.gcSnippetTrustAsHtml = function(snippet) {                            return $sce.trustAsHtml(snippet);                        };                    }                    if (!angular.isDefined(attrs.dfxGcEdit) && scope.attributes.binding.value) {                        scope.attributes.content.value = '';                    }                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        $timeout(function(){                            var component_id = component.id,                                htmlId = component_id + '_html';                            $(current_element).find("div").attr("id", htmlId);                            $compile($(current_element).find("div").contents())(scope);                        }, 0);                    }                    scope.changeWidth = function(){                        $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                    };                    if (!angular.isDefined(attrs.dfxGcEdit)) {                        scope.changeWidth();                    }                });                scope.showCodemirror = function(ev) {                    $mdDialog.show({                        scope: scope.$new(),                        parent: angular.element(document.body),                        targetEvent: ev,                        clickOutsideToClose:true,                        templateUrl: '/gcontrols/web/html_editor_template.html',                        onComplete:function(scope){                            var myTextArea = document.getElementById('dfx_html_editor');                            var scriptEditor = CodeMirror(function (elt) {                                    myTextArea.parentNode.replaceChild(elt, myTextArea);                                },                                {                                    lineNumbers: true,                                    value: (scope.attributes.content.value !== '') ? scope.attributes.content.value : $('#dfx_html_editor').text(),                                    mode: {name: "xml", globalVars: true},                                    matchBrackets: true,                                    highlightSelectionMatches: {showToken: /\w/},                                    styleActiveLine: true,                                    viewportMargin : Infinity,                                    extraKeys: {"Alt-F": "findPersistent", "Ctrl-Space": "autocomplete"},                                    lineWrapping: true                                });                            scriptEditor.setSize(800, 400);                            $(scriptEditor.getWrapperElement()).attr("id", "dfx_html_editor");                        },                        controller: function(scope){                            scope.closeDialog = function() {                                $mdDialog.hide();                            }                            scope.saveDialog = function() {                                var editor = $('#dfx_html_editor.CodeMirror')[0].CodeMirror;                                scope.attributes.content.value = editor.getValue();                                scope.attributes.content.status = "overridden";                                $mdDialog.hide();                            }                        }                    })                };            }        }    }});dfxGControls.directive('dfxGcWebRichtext', function($timeout, $compile) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/rich_text_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/rich_text_design.html';            } else {                return '/gcontrols/web/rich_text.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'rich_text').then(function() {                scope.attributes.bindedData.status = "overridden";                scope.attributes.toolbar.status = "overridden";                scope.attributes.flex.status = "overridden";                scope.changeWidth = function(){                    $('#' + scope.component_id).css('width', scope.attributes.flex.value + '%');                };                if (!angular.isDefined(attrs.dfxGcEdit)) {                    scope.changeWidth();                }                scope.rebuildQuillEditor = function(){                    $("#" + component.id + ' ng-quill-editor').attr('toolbar-entries', scope.quillEditorEntries);                    $timeout(function(){                        $compile($("." + component.id + "_ng_quill_editor").contents())(scope);                    }, 0);                };                scope.rebuildQuillEntries = function(){                    scope.quillEditorEntries = '';                    for ( var i = 0; i < scope.attributes.toolbar.entries.value.length; i++ ) {                        if ( scope.attributes.toolbar.entries.value[i].value === true ) {                            for ( var j = 0; j < scope.attributes.toolbar.entries.value[i].entries.length; j++ ) {                                scope.quillEditorEntries = scope.quillEditorEntries + ' ' + scope.attributes.toolbar.entries.value[i].entries[j];                            }                        }                    }                    scope.rebuildQuillEditor();                };                $timeout(function(){                    if ( $('#' + component.id + ' ng-quill-editor').attr('toolbar-entries') === 'init' ) {                        scope.rebuildQuillEntries();                    }                }, 0);                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    scope.$on("editorCreated", function (event, quillEditor) {                        scope.$gcscope.$watch('$gcscope[attributes.binding.value]', function(newValue, oldValue) {                            if ( newValue && angular.equals(newValue, oldValue) ) {                                $timeout(function(){                                    quillEditor.setHTML(newValue);                                }, 0);                            }                        }, true);                    });                    basectrl.bindScopeVariable( scope, component.attributes.binding.value );                }            });        }    }});dfxGControls.directive('dfxGcWebCarousel', ['$http', '$sce', '$mdDialog', '$timeout', '$compile', '$parse', function($http, $sce, $mdDialog, $timeout, $compile, $parse) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/carousel_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/carousel_design.html';            } else {                return '/gcontrols/web/carousel.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'carousel').then(function() {                scope.attributes.static.status = "overridden";                scope.attributes.flex.status = "overridden";                scope.attributes.maxWidth.status = "overridden";                scope.attributes.maxHeight.status = "overridden";                scope.attributes.dynamicPresent = { "value": false };                scope.attributes.layoutType = { "value": "none" };                scope.showSlidesEditor = function(ev) {                    $mdDialog.show({                        scope: scope.$new(),                        parent: angular.element(document.body),                        targetEvent: ev,                        clickOutsideToClose:true,                        ariaLabel: 'slides-editor',                        templateUrl: '/gcontrols/web/carousel_slides_editor.html',                        onComplete: function() {                            $('.menu-structure li').eq(scope.selectedIndex).addClass('active');                        },                        controller: function() {                            scope.counterSlide = scope.attributes.static.value.length;                            scope.selectedIndex = 0;                            scope.currentSlide = scope.attributes.static.value[scope.selectedIndex];                            scope.closeDialog = function() {                                $mdDialog.hide();                            }                        }                    });                }                scope.activeSlide = function() {                    $('.menu-structure li').removeClass('active');                    $('.menu-structure li').eq( scope.selectedIndex ).addClass('active');                }                scope.selectSlideItem = function( index ) {                    scope.attributes.static.status = "overridden";                    scope.selectedIndex = index;                    scope.currentSlide = scope.attributes.static.value[scope.selectedIndex];                    scope.activeSlide();                }                scope.addSlideItem = function(){                    var temp = {                        "name": "slide1",                        "title": "<h2>Sample Title</h2>",                        "description": "<h4>Sample description</h4>",                        "src": "'/images/dfx_image_blank.png'"                    }                    scope.attributes.static.status = "overridden" ;                    scope.counterSlide++;                    temp.name = "slide" + scope.counterSlide;                    scope.attributes.static.value.length === 0 ? scope.selectedIndex = 0 : scope.selectedIndex++;                    scope.attributes.static.value.splice(scope.selectedIndex, 0, temp);                    scope.currentSlide = scope.attributes.static.value[scope.selectedIndex];                    $timeout(function() { scope.activeSlide(); }, 0);                };                scope.moveSlideUp = function() {                    if ( scope.selectedIndex > 0 ) {                        var movedSlide = scope.currentSlide,                            fromIndex = scope.selectedIndex,                            toIndex = scope.selectedIndex - 1;                        scope.attributes.static.value.splice(fromIndex, 1);                        scope.attributes.static.value.splice(toIndex, 0, movedSlide);                        --scope.selectedIndex;                        scope.currentSlide = scope.attributes.static.value[scope.selectedIndex];                        scope.activeSlide();                    }                }                scope.moveSlideDown = function() {                    if ( scope.selectedIndex < ( scope.attributes.static.value.length - 1 )) {                        var movedSlide = scope.currentSlide,                            fromIndex = scope.selectedIndex,                            toIndex = scope.selectedIndex + 1;                        scope.attributes.static.value.splice(fromIndex, 1);                        scope.attributes.static.value.splice(toIndex, 0, movedSlide);                        ++scope.selectedIndex;                        scope.currentSlide = scope.attributes.static.value[scope.selectedIndex];                        scope.activeSlide();                    }                }                scope.removeSlideItem = function(){                    scope.attributes.static.status = "overridden";                    if(scope.attributes.static.value.length === 1){                        scope.selectedIndex = 0;                        scope.currentSlide = scope.attributes.static.value[0];                        scope.attributes.static.value.splice(0, 1);                        scope.currentSlide = {};                    }else{                        var temp = scope.selectedIndex;                        scope.attributes.static.value.splice(temp, 1);                        if(temp === 0){                            scope.selectedIndex = 0;                            scope.currentSlide = scope.attributes.static.value[0];                        }else{                            scope.selectedIndex = temp - 1;                            scope.currentItem = scope.attributes.static.value[scope.selectedIndex];                        }                    }                    scope.activeSlide();                };                scope.setCarouselDataSource = function() {                    scope.carouselDataName = { "value": "" };                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        scope.carouselDataName.value = scope.attributes.dynamic.value !== '' ? scope.attributes.dynamic.value : 'attributes.static.value';                    } else {                        scope.carouselDataName.value = 'attributes.static.value';                    }                }                scope.compileSlides = function(){                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        $timeout(function(){                            var screenSlides = $("#" + component.id + "_dfx_gc_web_carousel .dfx-carousel-item");                            if ( scope.attributes.dynamic.value !== '' ) {                                for ( var i = 0; i < scope.$gcscope[scope.attributes.dynamic.value].length; i++ ) {                                    $(screenSlides).eq(i+1).find('img').attr('ng-click', '$eval('+scope.attributes.dynamic.value+'['+[i]+'].onclick)');                                }                            } else {                                for ( var i = 0; i < scope.attributes.static.value.length; i++ ) {                                    $(screenSlides).eq(i+1).find('img').attr('ng-click', '$eval(attributes.static.value['+[i]+'].onclick)');                                }                            }                            $compile($("#" + component.id + "_dfx_gc_web_carousel .dfx-carousel-item-image-container").contents())(scope);                            $compile($("#" + component.id + "_dfx_gc_web_carousel .dfx-carousel-item-title").contents())(scope);                            $compile($("#" + component.id + "_dfx_gc_web_carousel .dfx-carousel-item-description").contents())(scope);                        }, 0);                    }                }                scope.simpleCarousel = function() {                    scope.setCarouselDataSource();                    var simpleCarouselSnippet = '<jk-carousel data="<<carouselSource>>" item-template-url="\'<<carouselTemplate>>\'" max-width="<<carouselMaxWidth>>" max-height="<<carouselMaxHeight>>"></jk-carousel>',                        parsedSimpleCarousel = simpleCarouselSnippet                            .replace('<<carouselSource>>', scope.carouselDataName.value)                            .replace('<<carouselTemplate>>', scope.attributes.dynamic.value !== '' && (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) ? '/gcontrols/web/carousel_item_dynamic.html' : '/gcontrols/web/carousel_item_static.html')                            .replace('<<carouselMaxWidth>>', scope.attributes.maxWidth.value)                            .replace('<<carouselMaxHeight>>', scope.attributes.maxHeight.value);                    $timeout(function(){                        $("#" + component.id + "_dfx_gc_web_carousel").empty().html(parsedSimpleCarousel);                        $timeout(function(){                            $compile($("#" + component.id + "_dfx_gc_web_carousel").contents())(scope);                            scope.compileSlides();                        }, 0);                    }, 0);                }                scope.autoCarousel = function() {                    scope.setCarouselDataSource();                    var autoCarouselSnippet = '<jk-carousel data="<<carouselSource>>" item-template-url="\'<<carouselTemplate>>\'" auto-slide="<<carouselAutoSlide>>" auto-slide-time="<<carouselSlideInterval>>" max-width="<<carouselMaxWidth>>" max-height="<<carouselMaxHeight>>"></jk-carousel>',                        parsedAutoCarousel = autoCarouselSnippet                            .replace('<<carouselSource>>', scope.carouselDataName.value)                            .replace('<<carouselTemplate>>', scope.attributes.dynamic.value !== '' ? '/gcontrols/web/carousel_item_dynamic.html' : '/gcontrols/web/carousel_item_static.html')                            .replace('<<carouselAutoSlide>>', scope.attributes.autoSlide.value)                            .replace('<<carouselSlideInterval>>', scope.attributes.slideInterval.value)                            .replace('<<carouselMaxWidth>>', scope.attributes.maxWidth.value)                            .replace('<<carouselMaxHeight>>', scope.attributes.maxHeight.value);                    $timeout(function(){                        $("#" + component.id + "_dfx_gc_web_carousel").empty().html(parsedAutoCarousel);                        $timeout(function(){                            $compile($("#" + component.id + "_dfx_gc_web_carousel").contents())(scope);                            scope.compileSlides();                        }, 0);                    }, 0);                }                scope.parseSlideSrc = function() {                    for ( var i = 0; i < scope.attributes.static.value.length; i++ ) {                        var testSrc = scope.attributes.static.value[i].src;                        if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                            if (testSrc.indexOf("'") == -1) {                                scope.attributes.static.value[i].parsedSrc = scope.$gcscope[scope.attributes.static.value[i].src];                            } else if (testSrc.indexOf("'") == 0 && testSrc.lastIndexOf("'") == (testSrc.length - 1) && testSrc.length > 2) {                                var srcWithoutQuotes = testSrc.replace(/'/g, '');                                scope.attributes.static.value[i].parsedSrc = srcWithoutQuotes;                            } else {                                scope.attributes.static.value[i].parsedSrc = scope.attributes.static.value[i].src;                            }                        } else {                            if (testSrc.indexOf("'") == -1) {                                scope.attributes.static.value[i].parsedSrc = '/images/dfx_image_blank.png';                            } else if (testSrc.indexOf("'") == 0 && testSrc.lastIndexOf("'") == (testSrc.length - 1) && testSrc.length > 2) {                                var srcWithoutQuotes = testSrc.replace(/'/g, '');                                scope.attributes.static.value[i].parsedSrc = srcWithoutQuotes;                            } else {                                scope.attributes.static.value[i].parsedSrc = scope.attributes.static.value[i].src;                            }                        }                    }                }                scope.rebuildCarousel = function() {                    if ( scope.attributes.dynamic.value === '' && scope.attributes.static.value.length > 0 ) {                        scope.parseSlideSrc();                    }                    $timeout(function(){                        scope.attributes.autoSlide.value === 'true' ? scope.autoCarousel() : scope.simpleCarousel();                    }, 0);                }                scope.showHtmlEditor = function(ev, htmlValue, htmlType) {                    scope.htmlType = htmlType;                    $('#' + scope.component_id + '_md_dialog .second-dialog-box').load('/gcontrols/web/carousel_html_editor.html');                    $timeout(function() {                        $compile($('.second-dialog-box').contents())(scope);                        var myTextArea = document.getElementById('dfx_html_editor');                        scope.htmlEditor = CodeMirror(function (elt) {                                myTextArea.parentNode.replaceChild(elt, myTextArea);                            },                            {                                lineNumbers: true,                                value: htmlValue,                                mode: {name: "xml", globalVars: true},                                matchBrackets: true,                                highlightSelectionMatches: {showToken: /\w/},                                styleActiveLine: true,                                viewportMargin : Infinity,                                extraKeys: {"Alt-F": "findPersistent", "Ctrl-Space": "autocomplete"},                                lineWrapping: true                            });                        scope.htmlEditor.setSize(856, 380);                        $timeout(function(){                            scope.htmlEditor.refresh();                            scope.htmlEditor.focus();                        },0);                        $(scope.htmlEditor.getWrapperElement()).attr("id", "dfx_html_editor");                        $('#' + scope.component_id + '_md_dialog .second-dialog').fadeIn(250);                    });                }                scope.setHtmlValue = function() {                    switch ( scope.htmlType ) {                        case 'title': scope.currentSlide.title = scope.htmlEditor.getValue(); break;                        case 'description': scope.currentSlide.description = scope.htmlEditor.getValue(); break;                    }                    scope.hideHtmlEditor();                }                scope.hideHtmlEditor = function() {                    $(".second-dialog").fadeOut('250', function() { $(this).remove(); });                }                scope.setImage = function( imageSrc ) {                    scope.currentSlide.src = "'" + imageSrc + "'";                    scope.rebuildCarousel();                    scope.hideDiakogImages();                }                scope.hideDiakogImages = function() {                    scope.hideHtmlEditor();                }                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    if ( scope.attributes.dynamic.value !== '' ) {                        scope.$watch('$gcscope[attributes.dynamic.value]', function(newValue, oldValue) {                            if ( newValue ) {                                scope.rebuildCarousel();                            }                        }, true);                        basectrl.bindScopeVariable(scope, component.attributes.dynamic.value);                    } else {                        scope.$watch('attributes.static.value', function(newValue, oldValue) {                            if ( newValue ) {                                $timeout(function(){                                    scope.rebuildCarousel();                                }, 0, false);                            }                        }, true);                    }                } else {                    scope.rebuildCarousel();                }            });        }    }}]);dfxGControls.directive('dfxGcWebJson', ['$http', '$sce', '$mdDialog', '$timeout', '$compile', '$parse', 'dfxMessaging', function($http, $sce, $mdDialog, $timeout, $compile, $parse, dfxMessaging) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/gc_json_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/gc_json_design.html';            } else {                return '/gcontrols/web/gc_json.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;                        basectrl.init(scope, element, component, attrs, 'gc_json').then(function() {                scope.attributes.flex.status = 'overridden';                scope.attributes.type.status = 'overridden';                scope.attributes.mode.status = 'overridden';                if(scope.attributes.binding.value!==''){scope.attributes.binding.status = 'overridden';}                if(scope.attributes.binding.value!==''){scope.attributes.binding.status = 'overridden';}                if(!scope.attributes.hasOwnProperty('headerVisible')){scope.attributes.headerVisible = {"value":true};}                scope.stringModel = {"value":""};                scope.viewDialog = { "mode": false };                scope.dfxJeSetMode = function( mode ){                    scope.dfxJsonEditor.setMode(mode);                }                scope.dfxJeOnChange = function(){                                        var dfxJeChanged = scope.dfxJsonEditor.get();                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        if(scope.attributes.binding.value!==''){                                                        if(!angular.equals(scope.$gcscope[scope.attributes.binding.value], dfxJeChanged)){                                scope.$gcscope[scope.attributes.binding.value] = dfxJeChanged;                                scope.stringModel.value = angular.toJson(dfxJeChanged);                                eval(scope.attributes.onchange.value);                                                                // console.log('*******onChange******', scope.dfxJsonEditor.get());                                // dfxMessaging.showMessage(scope.dfxJsonEditor.get());                            }                        }else{                            if(!angular.equals(scope.attributes.content.value, dfxJeChanged)){                                scope.attributes.content.value = dfxJeChanged;                                scope.stringModel.value = angular.toJson(dfxJeChanged);                                            eval(scope.attributes.onchange.value);                                                                                    // console.log('*******onChange******', scope.dfxJsonEditor.get());                                // dfxMessaging.showMessage(scope.dfxJsonEditor.get());                            }                        }                    } else {                        if(!angular.equals(scope.attributes.content.value, dfxJeChanged)){                            scope.attributes.content.value = dfxJeChanged;                            scope.stringModel.value = angular.toJson(dfxJeChanged);                                                        eval(scope.attributes.onchange.value);                                                            // console.log('*******onChange******', scope.dfxJsonEditor.get());                            // dfxMessaging.showMessage(scope.dfxJsonEditor.get());                        }                    }                }                scope.dfxJeOnModeChange = function( newMode, oldMode ){                                        eval(scope.attributes.onmodechange.value);                      if (!scope.isDisabled){                        scope.lastMode = newMode;                                               }                    // console.log('*******onModeChange******', 'Mode switched from '+oldMode+' to '+newMode);                    // dfxMessaging.showMessage('Mode switched from '+oldMode+' to '+newMode);                }                scope.dfxJeOnError = function( err ){                    eval(scope.attributes.onerror.value);                                                    // console.log('*******onError******', ''+err);                    // dfxMessaging.showError(''+err);                }                scope.checkHeaderVisibility = function () {                    var panelToolbar = $('#'+component.id+' md-toolbar.dfx-je-toolbar'),                        panelBody = $('#'+component.id+' div.jsoneditor-outer');                    if(!scope.attributes.headerVisible.value){                        panelToolbar.hide();                        panelBody.css({'margin':0,"padding":0});                    }else{                        panelToolbar.show();                        panelBody.css({'margin':"-48px 0 0","padding":"48px 0 0"});                    }                }                scope.runJsonEditor = function( container, mode, model ){                                        scope.dfxJsonEditor = null;                    var options = {                        mode:           mode,                        modes:          ['tree','form','code','text','view'],                        history:        true,                        onChange:       function(){scope.dfxJeOnChange();},                        onModeChange:   function(newMode, oldMode){scope.dfxJeOnModeChange(newMode,oldMode);},                        onError:        function(err){scope.dfxJeOnError(err);}                    }                     $timeout(function() {                        scope.dfxJsonEditor = new JSONEditor(container, options, model);                        scope.checkHeaderVisibility();                        scope.lastMode = mode;                                              }, 0);                }                                scope.inputToJson = function(){                    try {                        if(JSON.parse(scope.stringModel.value)){                            var inputJson = angular.fromJson(scope.stringModel.value);                            if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                                if(scope.attributes.binding.value!==''){                                    if(!angular.equals(scope.$gcscope[scope.attributes.binding.value], inputJson)) {                                        scope.$gcscope[scope.attributes.binding.value] = inputJson;                                    }                                }else{                                    if(!angular.equals(scope.attributes.content.value, inputJson)) {                                        scope.attributes.content.value = inputJson;                                    }                                                            }                                angular.element($('#'+component.id+'_scopeInput')).data('$ngModelController').$setValidity('editorInput', true);                            } else {                                if(!angular.equals(scope.attributes.content.value, inputJson)) {                                    scope.attributes.content.value = inputJson;                                }                            }                                                    }                     }                    catch(err) {                        if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                            angular.element($('#'+component.id+'_scopeInput')).data('$ngModelController').$setValidity('editorInput', false);                        }                    }                                     }                scope.showJsonDialog = function(ev) {                                                            $mdDialog.show({                        scope: scope.$new(),                        parent: angular.element(document.body),                        targetEvent: ev,                        clickOutsideToClose: true,                        ariaLabel: 'dialog-json-editor',                        templateUrl: '/gcontrols/web/gc_json_dialog.html',                        onComplete: function() {                                                        var container = document.getElementById(component.id+'_dfx_json_editor_dialog_panel');                            if(container){                                $(container).empty();                                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                                    if (scope.attributes.binding.value!==''){                                        scope.runJsonEditor(container, scope.attributes.mode.value, scope.$gcscope[scope.attributes.binding.value]);                                    } else {                                        scope.runJsonEditor(container, scope.attributes.mode.value, scope.attributes.content.value);                                        }                                } else {                                      scope.runJsonEditor(container, scope.attributes.mode.value, scope.attributes.content.value);                                }                                   $(".dfx-dialog-json-editor .dfx-web-gc-json-dialog-tab").fadeIn();                            }                        },                        controller: function() {                                                        scope.closeJsonDialog = function() {                                $mdDialog.hide();                            }                        }                    });                }                scope.buildJsonEditor = function(){                    if(scope.attributes.type.value==='panel'){                        $timeout(function() {                            var container = document.getElementById(component.id+'_dfx_gc_web_json_panel');                            if(container){                                scope.runJsonEditor(container, scope.attributes.mode.value, scope.attributes.content.value);                            }                        }, 0);                    }                }                if (scope.attributes.type.value==='panel') {                                                         $timeout(function() {                        var container = document.getElementById(component.id+'_dfx_gc_web_json_panel');                        if (container){                            $(container).empty();                            if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                                if (scope.attributes.binding.value!==''){                                    scope.runJsonEditor(container, scope.attributes.mode.value, scope.$gcscope[scope.attributes.binding.value]);                                } else {                                    scope.runJsonEditor(container, scope.attributes.mode.value, scope.attributes.content.value);                                    }                            } else {                                  scope.runJsonEditor(container, scope.attributes.mode.value, scope.attributes.content.value);                            }                                            $timeout(function() {                                if(eval('scope.'+scope.attributes.disabled.value)){                                    scope.dfxJsonEditor.setMode('view');                                    $timeout(function() {                                        var initModeBtn = $("#" + component.id + "_dfx_gc_web_json_panel button.jsoneditor-modes");                                        $(initModeBtn).attr('disabled', true);                                    }, 0);                                }else{                                }                                // $compile($('#'+component.id+'_dfx_gc_web_json_panel md-toolbar'))(scope);                            }, 0);                                          }                        scope.$watch(scope.attributes.disabled.value, function(newValue){                            if(scope.dfxJsonEditor){                                if(eval(newValue)){                                    scope.isDisabled = true;                                    scope.dfxJsonEditor.setMode('view');                                    var modeBtn = $("#" + component.id + "_dfx_gc_web_json_panel button.jsoneditor-modes");                                    $(modeBtn).attr('disabled',true);                                } else {                                    scope.isDisabled = false;                                    scope.dfxJsonEditor.setMode(scope.lastMode);                                    var modeBtn = $("#" + component.id + "_dfx_gc_web_json_panel button.jsoneditor-modes");                                    $(modeBtn).attr('disabled',false);                                }                            }                        }, true);                    }, 0);                } else {                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        if(scope.attributes.binding.value!==''){                            scope.stringModel.value = angular.toJson(scope.$gcscope[scope.attributes.binding.value]);                        }else{                            scope.stringModel.value = angular.toJson(scope.attributes.content.value);                        }                    } else {                        scope.stringModel.value = angular.toJson(scope.attributes.content.value);                    }                }                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    if(scope.attributes.binding.value!==''){                        basectrl.bindScopeVariable(scope, component.attributes.binding.value);                        scope.$watch('$gcscope[attributes.binding.value]', function(newValue){                            if (newValue) {                                if (scope.dfxJsonEditor) {                                    var editorData = scope.dfxJsonEditor.get();                                    if(!angular.equals(newValue, editorData)) {                                        scope.dfxJsonEditor.set(newValue);                                    }                                }                                scope.stringModel.value = angular.toJson(newValue);                            }                        }, true);                    }                }            });        }    }}]);dfxGControls.directive('dfxGcWebRating', function() {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/rating_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/rating_design.html';            } else {                return '/gcontrols/web/rating.html';            }        },        link: {            pre : function(scope, element, attrs, basectrl) {                var component = scope.getComponent(element);                scope.component_id = component.id;                scope.attributes = null;                basectrl.init(scope, element, component, attrs, 'rating').then(function(){                    scope.attributes.binding.status = "overridden";                    scope.attributes.maxValue.status = "overridden";                    scope.attributes.icon.status = "overridden";                    if ( !scope.attributes.icon.hasOwnProperty('type') ) { scope.attributes.icon.type = 'fa-icon'; }                                    if ( !scope.attributes.icon.hasOwnProperty('size') ) { scope.attributes.icon.size = 21; }                     if ( scope.attributes.range.hasOwnProperty('values') ) {delete scope.attributes.range.values; }                                   scope.ifShowIconTypes = function( icon ) {                        var regexp = /(^\')(.*)(\'$)/gm, filtered = regexp.exec( icon );                        if ( icon && ( icon.indexOf('+') >= 0 ) ) { filtered = false; }                        if ( icon === '' ) { filtered = true; }                        if ( icon.indexOf("'") === 0 && icon.indexOf('+') === -1 && icon.charAt(icon.length-1) === "'" ) {                             icon.indexOf("'fa-") === 0 ? scope.attributes.icon.type = 'fa-icon' : scope.attributes.icon.type = 'svg-icon';                         }                        scope.showIconTypes = filtered ? false : true;                    }                    scope.ifShowIconTypes(scope.attributes.icon.value);                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        scope.$gcscope = scope;                        basectrl.bindScopeVariable(scope, component.attributes.binding.value);                    }                    function updateStars() {                        scope.stars = [];                        for (var i = 0; i < scope.attributes.range.value; i++) {                            var rangeStep = scope.attributes.maxValue.value/scope.attributes.range.value;                            if ( !angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit) ) {                                scope.stars.push({                                    filled: i*rangeStep < scope.$gcscope[scope.attributes.binding.value]                                });                            } else {                                if ( !scope.attributes.binding.value ) {                                    scope.stars.push({                                        filled: i*rangeStep < scope.attributes.binding.value                                    });                                } else if ( scope.attributes.binding.value && (parseFloat( scope.attributes.binding.value ) >= 0) ) {                                    scope.stars.push({                                        filled: i*rangeStep < scope.attributes.binding.value                                    });                                } else {                                    scope.stars.push({                                        filled: i*rangeStep < ( scope.attributes.maxValue.value )/2                                    });                                }                            }                        }                    };                    scope.toggle = function(index) {                        var rangeStep = scope.attributes.maxValue.value/scope.attributes.range.value;                        if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                            scope.attributes.disabled.value === "false" ? scope.$gcscope[scope.attributes.binding.value] = index*rangeStep + rangeStep : index*rangeStep;                            updateStars();                        } else {                            if ( scope.attributes.binding.value.length === 0 ) {                                scope.attributes.disabled.value === "false" ? scope.attributes.binding.value = index*rangeStep + rangeStep : index*rangeStep;                            } else if ( scope.attributes.binding.value > 0 && (parseFloat( scope.attributes.binding.value ) >= 0) ) {                                scope.attributes.disabled.value === "false" ? scope.attributes.binding.value = index*rangeStep + rangeStep : index*rangeStep;                            }                        }                    };                    scope.$watch('attributes.binding.value', function(newValue) {                        if (newValue) {                            updateStars();                        }                    });                    scope.$watch('attributes.range.value', function(newValue) {                        if (newValue) {                            updateStars();                        }                    });                    scope.$watch('attributes.maxValue.value', function(newValue) {                        if (newValue) {                            updateStars();                        }                    });                    scope.$watch('attributes.disabled.value', function(newValue) {                        if (newValue) {                            updateStars();                        }                    });                    if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                        scope.$watch("$gcscope[attributes.binding.value]", function(newValue){                            updateStars();                        });                    }                });            }        }    }});dfxGControls.directive('dfxGcWebTreeview', [ '$timeout', '$compile', '$http', '$mdDialog', '$filter',  function($timeout, $compile, $http, $mdDialog, $filter) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/treeview_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/treeview_design.html';            } else {                return '/gcontrols/web/treeview.html';            }        },        link: function(scope, element, attrs, basectrl) {            var component = scope.getComponent(element);            scope.$gcscope = scope;            basectrl.init(scope, element, component, attrs, 'treeview').then(function() {                if ( !scope.attributes.hasOwnProperty('flex') ) { scope.attributes.flex = { "value": 100 }; }                scope.attributes.flex.status = "overridden";                scope.attributes.dynamic.status = "overridden";                scope.attributes.static.status = "overridden";                scope.attributes.isOpened.status = "overridden";                scope.attributes.isClosed.status = "overridden";                if ( !scope.attributes.hasOwnProperty('iconType') ) {                    scope.attributes.iconType = { "value": 'fa-icon' };                    scope.attributes.isOpened.type = scope.attributes.iconType.value;                    scope.attributes.isClosed.type = scope.attributes.iconType.value;                    scope.attributes.iconType.status = "overridden";                } else {                    scope.attributes.iconType.status = "overridden";                }                scope.ifShowIconTypes = function( icon, status ) {                    var regexp = /(^\')(.*)(\'$)/gm, filtered = regexp.exec( icon );                    if ( icon && ( icon.indexOf('+') >= 0 ) ) { filtered = false; }                    if ( icon === '' ) { filtered = true; }                    if ( icon.indexOf("'") === 0 && icon.indexOf('+') === -1 && icon.charAt(icon.length-1) === "'" ) {                         if ( icon.indexOf("'fa-") === 0 ) {                            switch ( status ) {                                case 'isOpened': scope.attributes.isOpened.type = 'fa-icon'; break;                                case 'isClosed': scope.attributes.isClosed.type = 'fa-icon'; break;                            }                        } else {                            switch ( status ) {                                case 'isOpened': scope.attributes.isOpened.type = 'svg-icon'; break;                                case 'isClosed': scope.attributes.isClosed.type = 'svg-icon'; break;                            }                        }                    }                    if ( status === 'isOpened' ) {                        scope.showOpenedIconTypes = filtered ? false : true;                    } else {                        scope.showClosedIconTypes = filtered ? false : true;                    }                                    }                scope.ifShowIconTypes(scope.attributes.isOpened.value, 'isOpened');                scope.ifShowIconTypes(scope.attributes.isClosed.value, 'isClosed');                scope.toggleNode = function( event, node ) {                    node.expanded ? node.expanded = false : node.expanded = true;                }                if (!angular.isDefined(attrs.dfxGcDesign) && !angular.isDefined(attrs.dfxGcEdit)) {                    basectrl.bindScopeVariable( scope, component.attributes.dynamic );                }            });        }    }}]);var DfxGcChartUtil = (function () {    var api = {};    var removeBracketsFromEventListener = function(eventListener) {        return (eventListener) ? eventListener.replace(/\(.*?\)/g, "") : eventListener;    };    var refreshChartToReflectFlexSize = function(scope, isDesignTime, $timeout, oldFlexValue) {          $timeout(function() {              if (isDesignTime) {                  if (scope.dfxDesignChartApi && scope.dfxDesignChartApi.refresh) {                      //remove old flex class and add new manually because it's not done automatically after chart dropping                      if (oldFlexValue) { $('#' + scope.component_id).removeClass('flex' + '-' + oldFlexValue); }                      $('#' + scope.component_id).attr('flex', scope.attributes.flex.value);                      $('#' + scope.component_id).addClass('flex' + '-' + scope.attributes.flex.value);                      scope.dfxDesignChartApi.refresh();                  }              } else {                  if (scope[scope.attributes.name.value].refresh) {                      scope[scope.attributes.name.value].refresh();                  }              }          }, 0);    };    api.adjustContainerHeight = function(scope) {        // adjust container height to include title height        var containerHeight = $('#' + scope.component_id).find('.dfx-core-gc-chart').height();        var chartTitleHeight = $('#' + scope.component_id).find('.title').height() * 1.5 || 30;        $('#' + scope.component_id).height(containerHeight + chartTitleHeight);    };    api.setAttributesBeforeInit = function (scope, attrs, chartOptions, chartData, chartTempName) {        if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) { // DESIGN TIME            scope.dfxDesignChartOptions = chartOptions;     //must set main chart attributes before reading json definition from file,            scope.dfxDesignChartData = chartData;           //otherwise when drag&drop chart, it'll not be shown before save/refresh        } else {            //must set main chart options before reading json definition from file,            //otherwise, chart is not constructed - and when attributes are reset from file - chart does not exist and nvd3.watch is useless            scope.attributes.options = {value: chartOptions};            scope.$gcscope = scope;                         //also, must set it here, before reading data from file            scope.attributes.name = {value: chartTempName}; //must create temp chart name to let nvd3 assign to it its API        }    };    api.setDesignTimeAttributes = function (scope, $timeout, $filter) {        scope.dfxDesignChartOptions.title = {            text: $filter('checkExpression')(scope.attributes.title.value),            enable: true        };        if (scope.attributes.options.xAxisLabel) {            scope.dfxDesignChartOptions.chart.xAxis.axisLabel = $filter('checkExpression')(scope.attributes.options.xAxisLabel);            scope.dfxDesignChartOptions.chart.yAxis.axisLabel = $filter('checkExpression')(scope.attributes.options.yAxisLabel);        }        if (scope.attributes.options.xAxisLabelDistance) {            scope.dfxDesignChartOptions.chart.xAxis.axisLabelDistance = parseInt(scope.attributes.options.xAxisLabelDistance) || -5;            scope.dfxDesignChartOptions.chart.yAxis.axisLabelDistance = parseInt(scope.attributes.options.yAxisLabelDistance) || -5;        }        if (scope.attributes.options.duration) {            scope.dfxDesignChartOptions.chart.duration = parseInt(scope.attributes.options.duration) || 500;        }        if (scope.attributes.options.showValues) {            scope.dfxDesignChartOptions.chart.showValues = scope.attributes.options.showValues;        }        if (scope.attributes.options.showXAxis) {            scope.dfxDesignChartOptions.chart.showXAxis = scope.attributes.options.showXAxis;            scope.dfxDesignChartOptions.chart.showYAxis = scope.attributes.options.showYAxis;        }        if (scope.attributes.options.showControls) {            scope.dfxDesignChartOptions.chart.showControls = scope.attributes.options.showControls;        }        if (scope.attributes.options.showLegend) {            scope.dfxDesignChartOptions.chart.showLegend = scope.attributes.options.showLegend == 'false' ? false : true;        }        if (scope.attributes.options.stacked) {            scope.dfxDesignChartOptions.chart.stacked = scope.attributes.options.stacked == 'true' ? true : false;        }        if (scope.attributes.options.useInteractiveGuideline) {            scope.dfxDesignChartOptions.chart.useInteractiveGuideline = scope.attributes.options.useInteractiveGuideline;        }        if (scope.attributes.options.rescaleY) {            scope.dfxDesignChartOptions.chart.rescaleY = scope.attributes.options.rescaleY;        }        if (scope.attributes.options.labelSunbeamLayout) {            scope.dfxDesignChartOptions.chart.labelSunbeamLayout = scope.attributes.options.labelSunbeamLayout == 'false' ? false : true;        }        if (scope.attributes.options.labelThreshold) {            scope.dfxDesignChartOptions.chart.labelThreshold = scope.attributes.options.labelThreshold;        }        if (scope.attributes.options.donutLabelsOutside) {            scope.dfxDesignChartOptions.chart.donutLabelsOutside = scope.attributes.options.donutLabelsOutside == 'true' ? true : false;        }        if (scope.attributes.options.showLabels) {            scope.dfxDesignChartOptions.chart.showLabels = scope.attributes.options.showLabels == 'false' ? false : true;        }        if (scope.attributes.options.cornerRadius) {            scope.dfxDesignChartOptions.chart.cornerRadius = scope.attributes.options.cornerRadius;        }        if (scope.attributes.options.growOnHover) {            scope.dfxDesignChartOptions.chart.growOnHover = scope.attributes.options.growOnHover;        }        refreshChartToReflectFlexSize(scope, true, $timeout);    };    api.setRunTimeAttributes = function (scope, chartTypeDef, chartEventNames, $timeout) {        if (scope.attributes.title.value) {            scope.attributes.options.value.title = {                text: scope.attributes.title.value,                enable: true            };        }        if (scope.attributes.options.xAxisLabel) {            scope.attributes.options.value.chart.xAxis.axisLabel = scope.attributes.options.xAxisLabel;            scope.attributes.options.value.chart.yAxis.axisLabel = scope.attributes.options.yAxisLabel;        }        if (scope.attributes.options.xAxisLabelDistance) {            scope.attributes.options.value.chart.xAxis.axisLabelDistance = scope.attributes.options.xAxisLabelDistance;            scope.attributes.options.value.chart.yAxis.axisLabelDistance = scope.attributes.options.yAxisLabelDistance;        }        if (scope.attributes.options.duration) {            scope.attributes.options.value.chart.duration = scope.attributes.options.duration;        }        if (scope.attributes.options.showValues) {            scope.attributes.options.value.chart.showValues = scope.attributes.options.showValues;        }        if (scope.attributes.options.showXAxis) {            scope.attributes.options.value.chart.showXAxis = scope.attributes.options.showXAxis;            scope.attributes.options.value.chart.showYAxis = scope.attributes.options.showYAxis;        }        if (scope.attributes.options.showControls) {            scope.attributes.options.value.chart.showControls = scope.attributes.options.showControls;        }        if (scope.attributes.options.showLegend) {            scope.attributes.options.value.chart.showLegend = scope.attributes.options.showLegend;        }        if (scope.attributes.options.stacked) {            scope.attributes.options.value.chart.stacked = scope.attributes.options.stacked;        }        if (scope.attributes.options.useInteractiveGuideline) {            scope.attributes.options.value.chart.useInteractiveGuideline = scope.attributes.options.useInteractiveGuideline;        }        if (scope.attributes.options.rescaleY) {            scope.attributes.options.value.chart.rescaleY = scope.attributes.options.rescaleY;        }        if (scope.attributes.options.labelSunbeamLayout) {            scope.attributes.options.value.chart.labelSunbeamLayout = scope.attributes.options.labelSunbeamLayout;        }        if (scope.attributes.options.labelThreshold) {            scope.attributes.options.value.chart.labelThreshold = scope.attributes.options.labelThreshold;        }        if (scope.attributes.options.donutLabelsOutside) {            scope.attributes.options.value.chart.donutLabelsOutside = scope.attributes.options.donutLabelsOutside;        }        if (scope.attributes.options.showLabels) {            scope.attributes.options.value.chart.showLabels = scope.attributes.options.showLabels;        }        if (scope.attributes.options.cornerRadius) {            scope.attributes.options.value.chart.cornerRadius = scope.attributes.options.cornerRadius;        }        if (scope.attributes.options.growOnHover) {            scope.attributes.options.value.chart.growOnHover = scope.attributes.options.growOnHover;        }        if (scope.attributes.options.donutRatio) {            scope.attributes.options.value.chart.donutRatio = scope.attributes.options.donutRatio;        }        var assignEvent = function(eventName, dispatch) {            if (scope.attributes[eventName] && scope.attributes[eventName].value) {                var normalizedEvent = removeBracketsFromEventListener(scope.attributes[eventName].value);                dispatch[ chartEventNames[eventName] ] = scope.$gcscope[normalizedEvent];            }        };        // global chart dispatch        var generalDispatch = {};        assignEvent('onbeforeupdate', generalDispatch);        assignEvent('onstatechange', generalDispatch);        assignEvent('onrenderend', generalDispatch);        scope.attributes.options.value.chart.dispatch = generalDispatch;        // specific chart dispatch        var specificDispatch = {};        assignEvent('onclick', specificDispatch);        assignEvent('ondblclick', specificDispatch);        assignEvent('onmouseover', specificDispatch);        assignEvent('onmouseleave', specificDispatch);        assignEvent('onmousemove', specificDispatch);        assignEvent('onareaclick', specificDispatch);        assignEvent('onareamouseover', specificDispatch);        assignEvent('onareamouseleave', specificDispatch);        scope.attributes.options.value.chart[chartTypeDef] = { dispatch: specificDispatch };        refreshChartToReflectFlexSize(scope, false, $timeout);    };    api.setRunTimeChartNameVariable = function (scope, basectrl, component, chartTempName) {        //first, create variable with real chart name and assign to it the value from temp chart name        scope[component.attributes.name.value] = scope[chartTempName];        //then, create this variable in parent scope (it does not exist there - not like other vars from attributes)        scope.$parent_scope[component.attributes.name.value] = scope[component.attributes.name.value];        //then, bind this scope variable        basectrl.bindScopeVariable(scope, component.attributes.name.value);    };    api.watchDesignTimeAttributes = function (scope, $timeout, $filter) {        scope.$watch('attributes.title.value', function (newValue) {            scope.dfxDesignChartOptions.title.text = $filter('checkExpression')(newValue);        });        scope.$watch('attributes.options.xAxisLabel', function (newValue) {            if (scope.dfxDesignChartOptions.chart.xAxis) scope.dfxDesignChartOptions.chart.xAxis.axisLabel = $filter('checkExpression')(newValue);        });        scope.$watch('attributes.options.yAxisLabel', function (newValue) {            if (scope.dfxDesignChartOptions.chart.yAxis) scope.dfxDesignChartOptions.chart.yAxis.axisLabel = $filter('checkExpression')(newValue);        });        scope.$watch('attributes.flex.value', function (newValue, oldValue) {            refreshChartToReflectFlexSize(scope, true, $timeout, oldValue);        });        scope.$watch('attributes.options.xAxisLabelDistance', function (newValue) {            if (scope.dfxDesignChartOptions.chart.xAxis) scope.dfxDesignChartOptions.chart.xAxis.axisLabelDistance = parseInt(newValue) || -5;        });        scope.$watch('attributes.options.yAxisLabelDistance', function (newValue) {            if (scope.dfxDesignChartOptions.chart.yAxis) scope.dfxDesignChartOptions.chart.yAxis.axisLabelDistance = parseInt(newValue) || -5;        });        scope.$watch('attributes.options.duration', function (newValue) {            scope.dfxDesignChartOptions.chart.duration = parseInt(newValue) || 500;        });        scope.$watch('attributes.options.showValues', function (newValue) {            scope.dfxDesignChartOptions.chart.showValues = newValue == 'false' ? false : true;        });        scope.$watch('attributes.options.showXAxis', function (newValue) {            scope.dfxDesignChartOptions.chart.showXAxis = newValue == 'false' ? false : true;        });        scope.$watch('attributes.options.showYAxis', function (newValue) {            scope.dfxDesignChartOptions.chart.showYAxis = newValue == 'false' ? false : true;        });        scope.$watch('attributes.options.showControls', function (newValue) {            scope.dfxDesignChartOptions.chart.showControls = newValue == 'false' ? false : true;        });        scope.$watch('attributes.options.showLegend', function (newValue) {            scope.dfxDesignChartOptions.chart.showLegend = newValue == 'false' ? false : true;        });        scope.$watch('attributes.options.stacked', function (newValue) {            scope.dfxDesignChartOptions.chart.stacked = newValue == 'true' ? true : false;        });        scope.$watch('attributes.options.useInteractiveGuideline', function (newValue) {            scope.dfxDesignChartOptions.chart.useInteractiveGuideline = newValue == 'false' ? false : true;        });        scope.$watch('attributes.options.rescaleY', function (newValue) {            scope.dfxDesignChartOptions.chart.rescaleY = newValue == 'false' ? false : true;        });        scope.$watch('attributes.options.labelSunbeamLayout', function (newValue) {            scope.dfxDesignChartOptions.chart.labelSunbeamLayout = newValue == 'true' ? true : false;        });        scope.$watch('attributes.options.labelThreshold', function (newValue) {            scope.dfxDesignChartOptions.chart.labelThreshold = parseFloat(newValue) || 0.01;        });        scope.$watch('attributes.options.donutLabelsOutside', function (newValue) {            scope.dfxDesignChartOptions.chart.donutLabelsOutside = newValue == 'false' ? false : true;        });        scope.$watch('attributes.options.showLabels', function (newValue) {            scope.dfxDesignChartOptions.chart.showLabels = newValue == 'false' ? false : true;        });        scope.$watch('attributes.options.cornerRadius', function (newValue) {            scope.dfxDesignChartOptions.chart.cornerRadius = parseFloat(newValue) || 0;        });        scope.$watch('attributes.options.growOnHover', function (newValue) {            scope.dfxDesignChartOptions.chart.growOnHover = newValue == 'false' ? false : true;        });        scope.$watch('attributes.options.donutRatio', function (newValue) {            scope.dfxDesignChartOptions.chart.donutRatio = parseFloat(newValue) || 0.35;        });    };    api.watchRunTimeAttributes = function (scope, $timeout) {        scope.$gcscope.$watch(scope.attributes.title.value, function(newValue) {            scope.attributes.options.value.title.text = newValue;        });        if (scope.attributes.options.xAxisLabel) {            scope.$gcscope.$watch(scope.attributes.options.xAxisLabel, function (newValue) {                scope.attributes.options.value.chart.xAxis.axisLabel = newValue;            });            scope.$gcscope.$watch(scope.attributes.options.yAxisLabel, function (newValue) {                scope.attributes.options.value.chart.yAxis.axisLabel = newValue;            });        }        if (scope.attributes.options.xAxisLabelDistance) {            scope.$gcscope.$watch(scope.attributes.options.xAxisLabelDistance, function (newValue) {                scope.attributes.options.value.chart.xAxis.axisLabelDistance = newValue;            });            scope.$gcscope.$watch(scope.attributes.options.yAxisLabelDistance, function (newValue) {                scope.attributes.options.value.chart.yAxis.axisLabelDistance = newValue;            });        }        if (scope.attributes.options.duration) {            scope.$gcscope.$watch(scope.attributes.options.duration, function (newValue) {                scope.attributes.options.value.chart.duration = newValue;            });        }        if (scope.attributes.options.showValues) {            scope.$gcscope.$watch(scope.attributes.options.showValues, function (newValue) {                scope.attributes.options.value.chart.showValues = newValue;                refreshChartToReflectFlexSize(scope, false, $timeout);            });        }        if (scope.attributes.options.showXAxis) {            scope.$gcscope.$watch(scope.attributes.options.showXAxis, function (newValue) {                scope.attributes.options.value.chart.showXAxis = newValue;            });            scope.$gcscope.$watch(scope.attributes.options.showYAxis, function (newValue) {                scope.attributes.options.value.chart.showYAxis = newValue;            });        }        if (scope.attributes.options.showControls) {            scope.$gcscope.$watch(scope.attributes.options.showControls, function (newValue) {                scope.attributes.options.value.chart.showControls = newValue;                refreshChartToReflectFlexSize(scope, false, $timeout);            });        }        if (scope.attributes.options.showLegend) {            scope.$gcscope.$watch(scope.attributes.options.showLegend, function (newValue) {                scope.attributes.options.value.chart.showLegend = newValue;                refreshChartToReflectFlexSize(scope, false, $timeout);            });        }        if (scope.attributes.options.stacked) {            scope.$gcscope.$watch(scope.attributes.options.stacked, function (newValue) {                scope.attributes.options.value.chart.stacked = newValue;                refreshChartToReflectFlexSize(scope, false, $timeout);            });        }        if (scope.attributes.options.useInteractiveGuideline) {            scope.$gcscope.$watch(scope.attributes.options.useInteractiveGuideline, function (newValue) {                scope.attributes.options.value.chart.useInteractiveGuideline = newValue;                refreshChartToReflectFlexSize(scope, false, $timeout);            });        }        if (scope.attributes.options.rescaleY) {            scope.$gcscope.$watch(scope.attributes.options.rescaleY, function (newValue) {                scope.attributes.options.value.chart.rescaleY = newValue;                refreshChartToReflectFlexSize(scope, false, $timeout);            });        }        if (scope.attributes.options.labelSunbeamLayout) {            scope.$gcscope.$watch(scope.attributes.options.labelSunbeamLayout, function (newValue) {                scope.attributes.options.value.chart.labelSunbeamLayout = newValue;            });        }        if (scope.attributes.options.labelThreshold) {            scope.$gcscope.$watch(scope.attributes.options.labelThreshold, function (newValue) {                scope.attributes.options.value.chart.labelThreshold = newValue;            });        }        if (scope.attributes.options.donutLabelsOutside) {            scope.$gcscope.$watch(scope.attributes.options.donutLabelsOutside, function (newValue) {                scope.attributes.options.value.chart.donutLabelsOutside = newValue;            });        }        if (scope.attributes.options.showLabels) {            scope.$gcscope.$watch(scope.attributes.options.showLabels, function (newValue) {                scope.attributes.options.value.chart.showLabels = newValue;            });        }        if (scope.attributes.options.cornerRadius) {            scope.$gcscope.$watch(scope.attributes.options.cornerRadius, function (newValue) {                scope.attributes.options.value.chart.cornerRadius = newValue;            });        }        if (scope.attributes.options.growOnHover) {            scope.$gcscope.$watch(scope.attributes.options.growOnHover, function (newValue) {                scope.attributes.options.value.chart.growOnHover = newValue;            });        }        if (scope.attributes.options.donutRatio) {            scope.$gcscope.$watch(scope.attributes.options.donutRatio, function (newValue) {                scope.attributes.options.value.chart.donutRatio = newValue;            });        }    };    return api;}());dfxGControls.directive('dfxGcWebBarchart', ['$timeout', '$filter', function($timeout, $filter) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/barchart_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/barchart_design.html';            } else {                return '/gcontrols/web/barchart.html';            }        },        link: function(scope, element, attrs, basectrl) {            var chartTempName = 'chartTempName_' + scope.component_id,                component = scope.getComponent(element);            var chartData    = [{                key:    "Cumulative Return",                values: [                    {                        "label": "A",                        "value": -29.76                    },                    {                        "label": "B",                        "value": 32.80                    },                    {                        "label": "C",                        "value": 196.45                    },                    {                        "label": "D",                        "value": -98.07                    },                    {                        "label": "E",                        "value": -13.92                    }                ]            }];            var chartOptions = {                chart: {                    type: 'discreteBarChart',                    margin : {                        top: 20,                        right: 20,                        bottom: 50,                        left: 55                    },                    x: function(d){return d.label;},                    y: function(d){return d.value;},                    showValues:  true,                    valueFormat: function (d) {                        return d3.format(',.4f')(d);                    },                    duration:    500,                    xAxis:       {                        axisLabel: 'X Axis',                        axisLabelDistance: -5                    },                    yAxis:       {                        axisLabel: 'Y Axis',                        axisLabelDistance: -5                    }                },                title: {                    text: 'Bar Chart',                    enable: true                }            };            basectrl.init(scope, element, component, attrs, 'barchart').then(function () {                if (scope.attributes.dynamicOptions) scope.attributes.dynamicOptions.status = "overridden";                scope.attributes.flex.status = "overridden";                if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) { // DESIGN TIME                    DfxGcChartUtil.setDesignTimeAttributes(scope, $timeout, $filter);                    DfxGcChartUtil.watchDesignTimeAttributes(scope, $timeout, $filter);                } else {                    DfxGcChartUtil.setRunTimeChartNameVariable(scope, basectrl, component, chartTempName);                    basectrl.bindScopeVariable(scope, component.attributes.title.value);                    // dynamicOptions is a priority over all static options, title and events (ex. onclick)                    if (scope.attributes.dynamicOptions && scope.attributes.dynamicOptions.value) {                        scope.attributes.options.value = scope[scope.attributes.dynamicOptions.value];                    } else {                        scope.attributes.options.value = chartOptions;                        var eventsList = {                            onclick: 'elementClick',                            ondblclick: 'elementDblClick',                            onmouseover: 'elementMouseover',                            onmouseleave: 'elementMouseout',                            onmousemove: 'elementMousemove',                            onbeforeupdate: 'beforeUpdate',                            onrenderend: 'renderEnd'                        };                        DfxGcChartUtil.setRunTimeAttributes(scope, 'discretebar', eventsList, $timeout);                        DfxGcChartUtil.watchRunTimeAttributes(scope, $timeout);                    }                }                DfxGcChartUtil.adjustContainerHeight(scope);            });            DfxGcChartUtil.setAttributesBeforeInit(scope, attrs, chartOptions, chartData, chartTempName);        }    }}]);dfxGControls.directive('dfxGcWebHzbarchart', ['$timeout', '$filter', function($timeout, $filter) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/hzbarchart_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/hzbarchart_design.html';            } else {                return '/gcontrols/web/hzbarchart.html';            }        },        link: function(scope, element, attrs, basectrl) {            var chartTempName = 'chartTempName_' + scope.component_id,                component = scope.getComponent(element);            var chartData = [                {                    "key": "Series1",                    "color": "#d62728",                    "values": [                        {                            "label" : "Group A" ,                            "value" : -1.874                        },                        {                            "label" : "Group B" ,                            "value" : -8.096                        },                        {                            "label" : "Group C" ,                            "value" : -0.570                        },                        {                            "label" : "Group D" ,                            "value" : -2.417                        },                        {                            "label" : "Group E" ,                            "value" : -0.720                        }                    ]                },                {                    "key": "Series2",                    "color": "#1f77b4",                    "values": [                        {                            "label" : "Group A" ,                            "value" : 25.307                        },                        {                            "label" : "Group B" ,                            "value" : 16.756                        },                        {                            "label" : "Group C" ,                            "value" : 18.451                        },                        {                            "label" : "Group D" ,                            "value" : 8.614                        },                        {                            "label" : "Group E" ,                            "value" : 7.808                        }                    ]                }            ];            var chartOptions = {                chart: {                    type: 'multiBarHorizontalChart',                    margin : {                        top: 20,                        right: 20,                        bottom: 50,                        left: 55                    },                    x: function(d){return d.label;},                    y: function(d){return d.value;},                    showControls: true,                    showValues:  true,                    duration:    500,                    xAxis:       {                        showMaxMin: false,                        axisLabel: ''                    },                    yAxis:       {                        axisLabel: 'Values',                        tickFormat: function(d) {                            return d3.format(',.2f')(d);                        }                    }                },                title: {                    text: 'Horizontal Bar Chart',                    enable: true                }            };            basectrl.init(scope, element, component, attrs, 'hzbarchart').then(function () {                if (scope.attributes.dynamicOptions) scope.attributes.dynamicOptions.status = "overridden";                scope.attributes.flex.status = "overridden";                if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) { // DESIGN TIME                    DfxGcChartUtil.setDesignTimeAttributes(scope, $timeout, $filter);                    DfxGcChartUtil.watchDesignTimeAttributes(scope, $timeout, $filter);                } else {                    DfxGcChartUtil.setRunTimeChartNameVariable(scope, basectrl, component, chartTempName);                    basectrl.bindScopeVariable(scope, component.attributes.title.value);                    // dynamicOptions is a priority over all static options, title and events (ex. onclick)                    if (scope.attributes.dynamicOptions && scope.attributes.dynamicOptions.value) {                        scope.attributes.options.value = scope[scope.attributes.dynamicOptions.value];                    } else {                        scope.attributes.options.value = chartOptions;                        var eventsList = {                            onclick: 'elementClick',                            ondblclick: 'elementDblClick',                            onmouseover: 'elementMouseover',                            onmouseleave: 'elementMouseout',                            onmousemove: 'elementMousemove',                            onstatechange: 'stateChange',                            onrenderend: 'renderEnd'                        };                        DfxGcChartUtil.setRunTimeAttributes(scope, 'multibar', eventsList, $timeout);                        DfxGcChartUtil.watchRunTimeAttributes(scope, $timeout);                    }                }                DfxGcChartUtil.adjustContainerHeight(scope);            });            DfxGcChartUtil.setAttributesBeforeInit(scope, attrs, chartOptions, chartData, chartTempName);        }    }}]);dfxGControls.directive('dfxGcWebPiechart', ['$timeout', '$filter', function($timeout, $filter) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/piechart_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/piechart_design.html';            } else {                return '/gcontrols/web/piechart.html';            }        },        link: function(scope, element, attrs, basectrl) {            var chartTempName = 'chartTempName_' + scope.component_id,                component = scope.getComponent(element);            var chartData    = [                {                    key: "One",                    y: 5                },                {                    key: "Two",                    y: 2                },                {                    key: "Three",                    y: 9                },                {                    key: "Four",                    y: 7                },                {                    key: "Five",                    y: 4                }            ];            var chartOptions = {                chart: {                    type: 'pieChart',                    margin : {                        top: 20,                        right: 20,                        bottom: 50,                        left: 55                    },                    x: function(d){return d.key;},                    y: function(d){return d.y;},                    showLabels: true,                    duration: 500,                    labelThreshold: 0.01,                    labelSunbeamLayout: true,                    legend: {                        margin: {                            top: 5,                            right: 5,                            bottom: 5,                            left: 0                        }                    }                },                title: {                    text: 'Pie Chart',                    enable: true                }            };            basectrl.init(scope, element, component, attrs, 'piechart').then(function () {                if (scope.attributes.dynamicOptions) scope.attributes.dynamicOptions.status = "overridden";                scope.attributes.flex.status = "overridden";                if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) { // DESIGN TIME                    DfxGcChartUtil.setDesignTimeAttributes(scope, $timeout, $filter);                    DfxGcChartUtil.watchDesignTimeAttributes(scope, $timeout, $filter);                } else {                    DfxGcChartUtil.setRunTimeChartNameVariable(scope, basectrl, component, chartTempName);                    basectrl.bindScopeVariable(scope, component.attributes.title.value);                    // dynamicOptions is a priority over all static options, title and events (ex. onclick)                    if (scope.attributes.dynamicOptions && scope.attributes.dynamicOptions.value) {                        scope.attributes.options.value = scope[scope.attributes.dynamicOptions.value];                    } else {                        scope.attributes.options.value = chartOptions;                        var eventsList = {                            onclick: 'elementClick',                            ondblclick: 'elementDblClick',                            onmouseover: 'elementMouseover',                            onmouseleave: 'elementMouseout',                            onmousemove: 'elementMousemove',                            onstatechange: 'stateChange',                            onrenderend: 'renderEnd'                        };                        DfxGcChartUtil.setRunTimeAttributes(scope, 'pie', eventsList, $timeout);                        DfxGcChartUtil.watchRunTimeAttributes(scope, $timeout);                    }                }                DfxGcChartUtil.adjustContainerHeight(scope);            });            DfxGcChartUtil.setAttributesBeforeInit(scope, attrs, chartOptions, chartData, chartTempName);        }    }}]);dfxGControls.directive('dfxGcWebDonutchart', ['$timeout', '$filter', function($timeout, $filter) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/donutchart_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/donutchart_design.html';            } else {                return '/gcontrols/web/donutchart.html';            }        },        link: function(scope, element, attrs, basectrl) {            var chartTempName = 'chartTempName_' + scope.component_id,                component = scope.getComponent(element);            var chartData    = [                {                    key: "One",                    y: 5                },                {                    key: "Two",                    y: 2                },                {                    key: "Three",                    y: 9                },                {                    key: "Four",                    y: 7                },                {                    key: "Five",                    y: 4                }            ];            var chartOptions = {                chart: {                    type: 'pieChart',                    donut: true,                    margin : {                        top: 20,                        right: 20,                        bottom: 50,                        left: 55                    },                    x: function(d){return d.key;},                    y: function(d){return d.y;},                    showLabels: true,                    donutRatio: 0.35,//default                    duration: 500,                    legend: {                        margin: {                            top: 5,                            right: 35,                            bottom: 5,                            left: 0                        }                    },                    pie: {                        startAngle: function(d) { return d.startAngle - Math.PI },                        endAngle: function(d) { return d.endAngle - Math.PI }                    }                },                title: {                    text: 'Donut Chart',                    enable: true                }            };            basectrl.init(scope, element, component, attrs, 'donutchart').then(function () {                if (scope.attributes.dynamicOptions) scope.attributes.dynamicOptions.status = "overridden";                scope.attributes.flex.status = "overridden";                if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) { // DESIGN TIME                    DfxGcChartUtil.setDesignTimeAttributes(scope, $timeout, $filter);                    DfxGcChartUtil.watchDesignTimeAttributes(scope, $timeout, $filter);                } else {                    DfxGcChartUtil.setRunTimeChartNameVariable(scope, basectrl, component, chartTempName);                    basectrl.bindScopeVariable(scope, component.attributes.title.value);                    // dynamicOptions is a priority over all static options, title and events (ex. onclick)                    if (scope.attributes.dynamicOptions && scope.attributes.dynamicOptions.value) {                        scope.attributes.options.value = scope[scope.attributes.dynamicOptions.value];                    } else {                        scope.attributes.options.value = chartOptions;                        var eventsList = {                            onclick: 'elementClick',                            ondblclick: 'elementDblClick',                            onmouseover: 'elementMouseover',                            onmouseleave: 'elementMouseout',                            onmousemove: 'elementMousemove',                            onstatechange: 'stateChange',                            onrenderend: 'renderEnd'                        };                        DfxGcChartUtil.setRunTimeAttributes(scope, 'pie', eventsList, $timeout);                        DfxGcChartUtil.watchRunTimeAttributes(scope, $timeout);                    }                }                DfxGcChartUtil.adjustContainerHeight(scope);            });            DfxGcChartUtil.setAttributesBeforeInit(scope, attrs, chartOptions, chartData, chartTempName);        }    }}]);dfxGControls.directive('dfxGcWebLinechart', ['$timeout', '$filter', function($timeout, $filter) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/linechart_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/linechart_design.html';            } else {                return '/gcontrols/web/linechart.html';            }        },        link: function(scope, element, attrs, basectrl) {            var chartTempName = 'chartTempName_' + scope.component_id,                component = scope.getComponent(element);            function lineChartDesignData() {                var sin = [], sin2 = [],                    cos = [];                //Data is represented as an array of {x,y} pairs.                for (var i = 0; i < 100; i++) {                    sin.push({x: i, y: Math.sin(i / 10)});                    sin2.push({x: i, y: i % 10 == 5 ? null : Math.sin(i / 10) * 0.25 + 0.5});                    cos.push({x: i, y: .5 * Math.cos(i / 10 + 2) + Math.random() / 10});                }                //Line chart data should be sent as an array of series objects.                return [                    {                        values: sin,      //values - represents the array of {x,y} data points                        key:    'Sine Wave', //key  - the name of the series.                        color:  '#ff7f0e'  //color - optional: choose your own line color.                    },                    {                        values: cos,                        key:    'Cosine Wave',                        color:  '#2ca02c'                    },                    {                        values: sin2,                        key:    'Another sine wave',                        color:  '#7777ff',                        area:   true      //area - set to true if you want this line to turn into a filled area chart.                    }                ];            };            var chartData    = lineChartDesignData();            var chartOptions = {                chart: {                    type: 'lineChart',                    margin : {                        top: 20,                        right: 20,                        bottom: 50,                        left: 55                    },                    x: function(d){return d.x;},                    y: function(d){return d.y;},                    useInteractiveGuideline: true,                    xAxis: {                        axisLabel: 'X Axis'                    },                    yAxis: {                        axisLabel: 'Y Axis',                        axisLabelDistance: -10                    }                },                title: {                    text: 'Line Chart',                    enable: true                }            };            basectrl.init(scope, element, component, attrs, 'linechart').then(function () {                if (scope.attributes.dynamicOptions) scope.attributes.dynamicOptions.status = "overridden";                scope.attributes.flex.status = "overridden";                if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) { // DESIGN TIME                    DfxGcChartUtil.setDesignTimeAttributes(scope, $timeout, $filter);                    DfxGcChartUtil.watchDesignTimeAttributes(scope, $timeout, $filter);                } else {                    DfxGcChartUtil.setRunTimeChartNameVariable(scope, basectrl, component, chartTempName);                    basectrl.bindScopeVariable(scope, component.attributes.title.value);                    // dynamicOptions is a priority over all static options, title and events (ex. onclick)                    if (scope.attributes.dynamicOptions && scope.attributes.dynamicOptions.value) {                        scope.attributes.options.value = scope[scope.attributes.dynamicOptions.value];                    } else {                        scope.attributes.options.value = chartOptions;                        var eventsList = {                            onclick: 'elementClick',                            onmouseover: 'elementMouseover',                            onmouseleave: 'elementMouseout',                            onstatechange: 'stateChange',                            onrenderend: 'renderEnd'                        };                        DfxGcChartUtil.setRunTimeAttributes(scope, 'lines', eventsList, $timeout);                        DfxGcChartUtil.watchRunTimeAttributes(scope, $timeout);                    }                }                DfxGcChartUtil.adjustContainerHeight(scope);            });            DfxGcChartUtil.setAttributesBeforeInit(scope, attrs, chartOptions, chartData, chartTempName);        }    }}]);dfxGControls.directive('dfxGcWebCmlinechart', ['$timeout', '$filter', function($timeout, $filter) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/cmlinechart_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/cmlinechart_design.html';            } else {                return '/gcontrols/web/cmlinechart.html';            }        },        link: function(scope, element, attrs, basectrl) {            var chartTempName = 'chartTempName_' + scope.component_id,                component = scope.getComponent(element);            var chartData    = [                {                    key: "Long",                    values: [ [ 1283227200000, 248.308], [ 1285819200000, 278.148], [ 1288497600000, 292.692], [ 1291093200000, 300.842], [ 1293771600000, 326.172]],                    mean: 250                },                {                    key: "Short",                    values: [ [ 1283227200000, -85.397], [ 1285819200000, -94.738], [ 1288497600000, -98.661], [ 1291093200000, -99.609], [ 1293771600000, -103.570]],                    mean: -60                }            ];            var chartOptions = {                chart: {                    type: 'cumulativeLineChart',                    margin : {                        top: 20,                        right: 20,                        bottom: 50,                        left: 55                    },                    x: function(d){ return d[0]; },                    y: function(d){ return d[1]/100; },                    average: function(d) { return d.mean/100; },                    color: d3.scale.category10().range(),                    duration: 300,                    useInteractiveGuideline: true,                    clipVoronoi: false,                    interactive: true,                    rescaleY: true,                    xAxis: {                        axisLabel: 'X Axis',                        tickFormat: function(d) {                            return d3.time.format('%m/%d/%y')(new Date(d))                        },                        showMaxMin: false,                        staggerLabels: true                    },                    yAxis: {                        tickFormat: function(d){                            return d3.format(',.1%')(d);                        },                        axisLabelDistance: 20                    }                },                title: {                    text: 'Cumulative Line Chart',                    enable: true                }            };            basectrl.init(scope, element, component, attrs, 'cmlinechart').then(function () {                if (scope.attributes.dynamicOptions) scope.attributes.dynamicOptions.status = "overridden";                scope.attributes.flex.status = "overridden";                if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) { // DESIGN TIME                    DfxGcChartUtil.setDesignTimeAttributes(scope, $timeout, $filter);                    DfxGcChartUtil.watchDesignTimeAttributes(scope, $timeout, $filter);                } else {                    DfxGcChartUtil.setRunTimeChartNameVariable(scope, basectrl, component, chartTempName);                    basectrl.bindScopeVariable(scope, component.attributes.title.value);                    // dynamicOptions is a priority over all static options, title and events (ex. onclick)                    if (scope.attributes.dynamicOptions && scope.attributes.dynamicOptions.value) {                        scope.attributes.options.value = scope[scope.attributes.dynamicOptions.value];                    } else {                        scope.attributes.options.value = chartOptions;                        var eventsList = {                            onclick: 'elementClick',                            onmouseover: 'elementMouseover',                            onmouseleave: 'elementMouseout',                            onstatechange: 'stateChange',                            onrenderend: 'renderEnd'                        };                        DfxGcChartUtil.setRunTimeAttributes(scope, 'interactiveLayer', eventsList, $timeout);                        DfxGcChartUtil.watchRunTimeAttributes(scope, $timeout);                    }                }                DfxGcChartUtil.adjustContainerHeight(scope);            });            DfxGcChartUtil.setAttributesBeforeInit(scope, attrs, chartOptions, chartData, chartTempName);        }    }}]);dfxGControls.directive('dfxGcWebAreachart', ['$timeout', '$filter', function($timeout, $filter) {    return {        restrict: 'A',        require: '^dfxGcWebBase',        scope: true,        templateUrl: function( el, attrs ) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/areachart_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/areachart_design.html';            } else {                return '/gcontrols/web/areachart.html';            }        },        link: function(scope, element, attrs, basectrl) {            var chartTempName = 'chartTempName_' + scope.component_id,                component = scope.getComponent(element);            var chartData    = [                {                    "key" : "North America" ,                    "values" : [ [ 1320033600000 , 26.672] , [ 1322629200000 , 27.297] , [ 1325307600000 , 20.174] , [ 1327986000000 , 19.631] , [ 1330491600000 , 20.366] , [ 1333166400000 , 19.284] , [ 1335758400000 , 19.157]]                },                {                    "key" : "Europe" ,                    "values" : [ [ 1320033600000 , 35.611] , [ 1322629200000 , 35.320] , [ 1325307600000 , 31.564] , [ 1327986000000 , 32.074] , [ 1330491600000 , 35.053] , [ 1333166400000 , 33.873] , [ 1335758400000 , 32.321]]                },                {                    "key" : "Australia" ,                    "values" : [ [ 1320033600000 , 5.453] , [ 1322629200000 , 7.672] , [ 1325307600000 , 8.014] , [ 1327986000000 , 0] , [ 1330491600000 , 0] , [ 1333166400000 , 0] , [ 1335758400000 , 0]]                }            ];            var chartOptions = {                chart: {                    type: 'stackedAreaChart',                    margin : {                        top: 20,                        right: 20,                        bottom: 50,                        left: 55                    },                    x: function(d){return d[0];},                    y: function(d){return d[1];},                    useVoronoi: false,                    clipEdge: true,                    duration: 100,                    useInteractiveGuideline: true,                    xAxis: {                        showMaxMin: false,                        tickFormat: function(d) {                            return d3.time.format('%x')(new Date(d))                        },                        axisLabel: 'X Axis'                    },                    yAxis: {                        tickFormat: function(d){                            return d3.format(',.2f')(d);                        }                    }                },                title: {                    text: 'Stacked Area Chart',                    enable: true                }            };            basectrl.init(scope, element, component, attrs, 'areachart').then(function () {                if (scope.attributes.dynamicOptions) scope.attributes.dynamicOptions.status = "overridden";                scope.attributes.flex.status = "overridden";                if (angular.isDefined(attrs.dfxGcEdit) || angular.isDefined(attrs.dfxGcDesign)) { // DESIGN TIME                    DfxGcChartUtil.setDesignTimeAttributes(scope, $timeout, $filter);                    DfxGcChartUtil.watchDesignTimeAttributes(scope, $timeout, $filter);                } else {                    DfxGcChartUtil.setRunTimeChartNameVariable(scope, basectrl, component, chartTempName);                    basectrl.bindScopeVariable(scope, component.attributes.title.value);                    // dynamicOptions is a priority over all static options, title and events (ex. onclick)                    if (scope.attributes.dynamicOptions && scope.attributes.dynamicOptions.value) {                        scope.attributes.options.value = scope[scope.attributes.dynamicOptions.value];                    } else {                        scope.attributes.options.value = chartOptions;                        var eventsList = {                            onareaclick: 'areaClick',                            onareamouseover: 'areaMouseover',                            onareamouseleave: 'areaMouseout',                            onstatechange: 'stateChange',                            onrenderend: 'renderEnd'                        };                        DfxGcChartUtil.setRunTimeAttributes(scope, 'stacked', eventsList, $timeout);                        DfxGcChartUtil.watchRunTimeAttributes(scope, $timeout);                    }                }                DfxGcChartUtil.adjustContainerHeight(scope);            });            DfxGcChartUtil.setAttributesBeforeInit(scope, attrs, chartOptions, chartData, chartTempName);        }    }}]);dfxGControls.directive('dfxGcWebKnob', ['$timeout', '$compile', function($timeout, $compile) {    return {        restrict:    'A',        require:     '^dfxGcWebBase',        scope:       true,        templateUrl: function (el, attrs) {            if (angular.isDefined(attrs.dfxGcEdit)) {                return '/gcontrols/web/knob_edit.html';            } else if (angular.isDefined(attrs.dfxGcDesign)) {                return '/gcontrols/web/knob_design.html';            } else {                return '/gcontrols/web/knob.html';            }        },        link: function (scope, element, attrs, basectrl) {            var component = scope.$parent.getComponent(element);            basectrl.init(scope, element, component, attrs, 'knob').then(function () {                 scope.attributes.binding.status = 'overridden';                if ( !scope.attributes.options.value.hasOwnProperty('size') ){                    scope.attributes.options.value = {                        "animate": {"enabled":true,"duration":1000,"ease":"bounce"},                        "barCap": 20,                        "barColor": "#e65d5d",                        "barWidth": 40,                        "bgColor": "",                        "fontSize": "auto",                        "displayInput": true,                        "dynamicOptions": true,                        "displayPrevious": false,                        "size": 300,                        "min": 0,                        "max": 100,                        "step": 1,                        "startAngle": 0,                        "endAngle": 360,                        "textColor": "#222222",                        "prevBarColor": "rgba(0,0,0,0)",                        "trackColor": "#ffe6e6",                        "trackWidth": 50,                        "readOnly": false,                        "unit": "%",                        "subText": {"enabled":true, "text":"Sub text", "color":"#808080", "font":"auto"},                        "skin": {"type":"tron","width":10,"color":"rgba(255,0,0,.5)","spaceWidth":5},                        "scale": {"enabled":true,"type":"lines","color":"#808080","width":3,"quantity":20,"height":10,"spaceWidth":15}                    }                 }                scope.attributes.options.status = 'overridden';                $timeout(function() {                    if (!angular.isDefined(attrs.dfxGcEdit) && !angular.isDefined(attrs.dfxGcDesign)) {                        if(scope.attributes.binding.value!=='' && isNaN(scope.attributes.binding.value)){                            scope.$gcscope = scope;                            basectrl.bindScopeVariable(scope, component.attributes.binding.value);                                   $('#'+component.id+'_dfx_ng_knob').empty().html('<ui-knob value="$gcscope[attributes.binding.value]" options="attributes.options.value"></ui-knob>');                        } else {                            $('#'+component.id+'_dfx_ng_knob').empty().html('<ui-knob value="attributes.binding.value" options="attributes.options.value"></ui-knob>');                        }                    } else {                        $('#'+component.id+'_dfx_ng_knob').empty().html('<ui-knob value="65" options="attributes.options.value"></ui-knob>');                        }                    $timeout(function() {                        $compile($('#'+component.id+'_dfx_ng_knob').contents())(scope);                    }, 0);                }, 0);            });        }    }}]);
var dfxPageEditorApp = angular.module("dfxPageEditorApp", ['ngMaterial', 'dfxStudioApi']);

dfxPageEditorApp.config(function($mdThemingProvider) {
    $mdThemingProvider.theme('altTheme')
        .primaryPalette('blue') // specify primary color, all
    // other color intentions will be inherited
    // from default
    $mdThemingProvider.setDefaultTheme('altTheme');
});

dfxPageEditorApp.controller("dfx_main_controller", [ '$scope', '$rootScope', '$q', '$http', '$mdDialog', '$mdSidenav', 'dfxViews', function($scope, $rootScope, $q, $http, $mdDialog, $mdSidenav, dfxViews) {
	$scope.application_name = $('#dfx-page-editor-body').attr('data-application');
    $scope.page_name = $('#dfx-page-editor-body').attr('data-page');
    $scope.page_platform = $('#dfx-page-editor-body').attr('data-platform');
    $scope.app_view_catalog = {};


    dfxViews.getByApp( $scope, $scope.application_name, $scope.page_platform )
    .then( function(data) {
        for (var i=0; i<data.views.length; i++) {
            if ($scope.app_view_catalog[data.views[i].category]==null) {
                $scope.app_view_catalog[data.views[i].category] = [];
            }
            $scope.app_view_catalog[data.views[i].category].push(data.views[i]);
        }
    });

	$scope.loadPage = function() {
        return '/studio/screen/editui/' + $scope.application_name + '/' + $scope.page_name + '/' + $scope.page_platform;
    };
}]);

dfxPageEditorApp.controller("dfx_page_editor_controller", [ '$scope', '$rootScope', '$compile', '$timeout', '$mdDialog', '$mdToast', '$log', '$mdSidenav', '$window', 'dfxPages','dfxTemplates', 'dfxMessaging', function($scope, $rootScope, $compile, $timeout, $mdDialog, $mdToast, $log, $mdSidenav, $window, dfxPages, dfxTemplates, dfxMessaging) {

    $scope.palette_visible = true;
    $scope.property_visible = true;
    $scope.selected_page = null;
    $scope.selected_template = null;
    $scope.templatePropertyEditMode = false;
    $scope.templates = [];
    $scope.design_visible = true;
    $scope.script_visible = false;
    $scope.design_view_mode = 'Design';
    $scope.script_theme = (localStorage.getItem('DFX_script_theme')!=null) ? localStorage.getItem('DFX_script_theme') : 'monokai';
    $scope.preview_wait_icon_visible = false;

    if ($scope.page_platform=='web') {
        $('#dfx_page_editor_workspace').css( 'width', '100%' );
    } else {
        $('#dfx_page_editor_workspace').css( 'width', '316px' );
        $('#dfx_page_editor_workspace').css( 'margin-top', '110px' );
        $('#dfx_page_editor_workspace').css( 'margin-bottom', '24px' );
        $('#dfx_page_editor_workspace').css( 'max-height', '564px' );
        $('#dfx_page_editor_container').css( 'background', 'url("/images/iphone_5_320x568.png") no-repeat' );
        $('#dfx_page_editor_container').css( 'background-position-x', '50%' );
    }

    $scope.toggleLeft = function() {
        $scope.palette_visible = !$scope.palette_visible;
        if ($scope.palette_visible) {
            $('#dfx-pe-toggle-palette-icon').addClass('fa-angle-double-left');
            $('#dfx-pe-toggle-palette-icon').removeClass('fa-angle-double-right');
            $('#dfx-pe-palette-title').removeClass('dfx-pe-palette-title-collapsed');
            $('#dfx-pe-palette-title-text').removeClass('dfx-pe-palette-title-text-collapsed');
        } else {
            $('#dfx-pe-palette-title').addClass('dfx-pe-palette-title-collapsed');
            $('#dfx-pe-palette-title-text').addClass('dfx-pe-palette-title-text-collapsed');
            $('#dfx-pe-toggle-palette-icon').removeClass('fa-angle-double-left');
            $('#dfx-pe-toggle-palette-icon').addClass('fa-angle-double-right');
        }
    };
    $scope.toggleRight = function() {
        $scope.property_visible = !$scope.property_visible;
        if ($scope.property_visible) {
            $('#dfx-pe-toggle-property-icon').removeClass('fa-angle-double-left');
            $('#dfx-pe-toggle-property-icon').addClass('fa-angle-double-right');
            $('#dfx-pe-property-title').removeClass('dfx-pe-property-title-collapsed');
            $('#dfx-pe-property-title-text').removeClass('dfx-pe-property-title-text-collapsed');
        } else {
            $('#dfx-pe-property-title').addClass('dfx-pe-property-title-collapsed');
            $('#dfx-pe-property-title-text').addClass('dfx-pe-property-title-text-collapsed');
            $('#dfx-pe-toggle-property-icon').addClass('fa-angle-double-left');
            $('#dfx-pe-toggle-property-icon').removeClass('fa-angle-double-right');
        }
    };

    $scope.exitPageEditor = function(ev) {
        var confirm = $mdDialog.confirm()
          .title('Exit')
          .textContent('Do you confirm you want to exit the editor?')
          .ariaLabel('Exit')
          .targetEvent(ev)
          .ok('OK')
          .cancel('Cancel');
        $mdDialog.show(confirm).then(function() {
          $window.close();
        }, function() {
          // do nothing
        });
    };

    $scope.loadPageDefinition = function() {
        dfxPages.getOne( $scope, $scope.application_name, $scope.page_name, $scope.page_platform )
        .then( function(page) {
            $scope.selected_page = page;
            $scope.loadPageTemplate(page.template);

            var htmlTextArea = document.getElementById('dfx_pe_script_editor');
            var src_editor = CodeMirror( function (elt) {
                htmlTextArea.parentNode.replaceChild(elt, htmlTextArea);
                },
                {
                    lineNumbers: true,
                    value: $('#dfx_pe_script_editor').text(),
                    mode: {name: 'application/json', globalVars: true},
                    matchBrackets: true,
                    highlightSelectionMatches: {showToken: /\w/},
                    styleActiveLine: true,
                    viewportMargin : Infinity,
                    extraKeys: {"Alt-F": "findPersistent", "Ctrl-Space": "autocomplete"}
                });
            $(src_editor.getWrapperElement()).attr('id', 'dfx_pe_script_editor');
            src_editor.setValue(page.script);
            src_editor.setSize(null, window.innerHeight - 59);
            src_editor.refresh();
        });
    };

    $scope.loadPageTemplates = function() {
        dfxTemplates.getAll( $scope, $scope.application_name )
        .then( function(templates) {
            $scope.templates = templates;
        });
    };

    $scope.loadPageTemplate = function(template) {
        dfxTemplates.getOne( $scope, $scope.application_name, template )
        .then( function(template) {
            $scope.selected_template = template;
            var snippet = '<div layout="column" flex dfx-page-template="' + template.name + '"></div>';
            $('#dfx_page_editor_workspace').empty();
            angular.element(document.getElementById('dfx_page_editor_workspace')).append($compile(snippet)($scope));
        });
    };

    $scope.changePageTemplate = function() {
        $scope.loadPageTemplate($scope.selected_page.template);
    }

    $scope.changeViewMode = function (view_mode) {
        if (view_mode=='design') {
            $scope.design_view_mode = 'Design';
            $scope.showDesign();
        } else if (view_mode=='script') {
            $scope.design_view_mode = 'Script';
            $scope.showScript();
        }
    };

    $scope.showDesign = function() {
        $scope.design_visible = true;
        $scope.script_visible = false;
        $('#dfx_pe_script_editor').css('display', 'none');
    };
    $scope.showScript = function() {
        $scope.design_visible = false;
        $scope.script_visible = true;
        $('#dfx_pe_script_editor').css('display', 'block');
        $timeout( function() {
            var editor = $('#dfx_pe_script_editor')[0].CodeMirror;
            editor.scrollTo(0, 0);
            editor.refresh();
            $('#dfx_pe_script_editor').click();
        }, 0);
    };

    $scope.addLayoutRow = function() {
        $scope.selected_page.layout.rows.push( {"columns": [{ "width":"100", "views":[] }] } );
    };

    $scope.deleteLayoutRow = function(row_id) {
        $scope.selected_page.layout.rows.splice( row_id, 1 );
    };

    $scope.addLayoutColumn = function(row_id) {
        $scope.selected_page.layout.rows[row_id].columns.push( { "width":"25", "views":[] } );
    };

    $scope.deleteLayoutColumn = function(row_id, col_id) {
        $scope.selected_page.layout.rows[row_id].columns.splice( row_id, 1 );
    };

    $scope.editTemplateProperty = function() {
         $scope.templatePropertyEditMode = true;
    };

    $scope.saveTemplateProperty = function() {
        dfxTemplates.update( $scope, $scope.selected_template )
            .then( function(template) {
               dfxMessaging.showMessage( 'The template ' + $scope.selected_template.name + ' has been updated' );
            });
        $scope.templatePropertyEditMode = false;
    };

    $scope.saveTemplatePropertyAs = function($event) {
        var parentEl = angular.element(document.body);

        $mdDialog.show({
            parent: parentEl,
            targetEvent: $event,
            clickOutsideToClose: true,
            scope: $scope.$new(),
            templateUrl: '/studio/studioviews/saveas_page_template.html',
            controller: DialogController
        });

        function DialogController($scope, $mdDialog) {
            $scope.template = {
                "name":   ''
            }


            $scope.saveAsTemplate = function() {
                var nameExp = /([\\/\-+(){}[\]=<>*~`?\! '\"',.;:$@#])/ig,
                    nameRes = nameExp.exec( $scope.template.name );

                if ( !nameRes && $scope.template.name !== '' ) {
                    $scope.selected_template.name = $scope.template.name;
                    $scope.selected_page.template = $scope.template.name;
                    dfxTemplates.create( $scope, $scope.selected_template )
                        .then( function(template) {
                           dfxMessaging.showMessage( 'The template ' + $scope.template.name + ' has been created' );
                           $scope.loadPageTemplates();
                        });
                    $scope.templatePropertyEditMode = false;
                    $scope.closeDialog();
                } else {
                    dfxMessaging.showWarning('Not a valid Template Name');
                }
            }

            $scope.closeDialog = function() {
                $mdDialog.hide();
            }
        }

    };

    $scope.cancelTemplateProperty = function() {
         $scope.templatePropertyEditMode = false;
    };

    $scope.editContent = function(ev, property) {
        $('#pagebody').css('z-index', '0');
        $mdDialog.show({
            scope: $scope.$new(),
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose:true,
            templateUrl: '/gcontrols/web/page_html_editor_template.html',
            onComplete:function(scope){
                var myTextArea = document.getElementById('dfx_html_editor');
                var scriptEditor = CodeMirror(function (elt) {
                        myTextArea.parentNode.replaceChild(elt, myTextArea);
                    },
                    {
                        lineNumbers: true,
                        value: (scope.selected_template.layout[property].content.value),
                        mode: {name: "xml", globalVars: true},
                        matchBrackets: true,
                        highlightSelectionMatches: {showToken: /\w/},
                        styleActiveLine: true,
                        viewportMargin : Infinity,
                        extraKeys: {"Alt-F": "findPersistent", "Ctrl-Space": "autocomplete"},
                        lineWrapping: true
                    });
                scriptEditor.setSize(800, 400);
                $(scriptEditor.getWrapperElement()).attr("id", "dfx_html_editor");
            },
            controller: function(scope){
                scope.closeDialog = function() {
                    $mdDialog.hide();
                    $('#pagebody').css('z-index', '51');
                }
                scope.saveDialog = function() {
                    var editor = $('#dfx_html_editor.CodeMirror')[0].CodeMirror;
                    scope.selected_template.layout[property].content.value = editor.getValue();
                    $mdDialog.hide();
                    $('#pagebody').css('z-index', '51');
                }
            }
        })
    };

    $scope.savePageDefinition = function() {
        var editor = $('#dfx_pe_script_editor')[0].CodeMirror;
        $scope.selected_page.script = editor.getValue();
        dfxPages.update( $scope, $scope.selected_page ).then( function(data) {
            dfxMessaging.showMessage( 'The page ' + $scope.selected_page.name + ' has been saved' );
        });
    };

    $scope.openPreview = function() {
        $scope.preview_wait_icon_visible = true;
        dfxPages.preview('/studio/screen/preview/' + $scope.application_name + '/' + $scope.page_name + '/' + $scope.page_platform)
            .then(function(response){
                $scope.preview_wait_icon_visible = false;
                if (response.data.indexOf('http') > -1) {
                    $window.open(response.data, '_blank');
                } else {
                    dfxMessaging.showWarning(response.data);
                }
            },function(err){
                $scope.preview_wait_icon_visible = false;
                dfxMessaging.showWarning("Unable to call DreamFace Compiler");
            })
    };

    $scope.moveView = function(item, view_id, view_name, from_row_id, from_col_id) {
        $timeout( function() {
            var target = item.parentElement;
            if (from_row_id>-1) {
                var arr_ref = $scope.selected_page.layout.rows[from_row_id].columns[from_col_id].views;
                for (var i=0; i<arr_ref.length; i++) {
                    if (arr_ref[i].id==view_id) {
                        arr_ref.splice(i, 1);
                        break;
                    }
                }
            }
            $('div', target).each( function(idx) {
                if ($(this).attr('data-view-id')==view_id) {
                    if (from_row_id==-1) {
                        $(this).remove();
                    }
                    var row_id = parseInt($(target).attr('data-row'));
                    var col_id = parseInt($(target).attr('data-column'));
                    $scope.selected_page.layout.rows[row_id].columns[col_id].views.splice(idx, 0, {"id": view_id, "name": view_name});
                    // The following line forces to recalculate the ng-repeat
                    $scope.selected_page.layout.rows[row_id].columns[col_id].views = angular.copy($scope.selected_page.layout.rows[row_id].columns[col_id].views);
                }
            });
        }, 0);
    };

    $scope.loadViewMenu = function($event, row_id, col_id, view_id) {
        $event.stopImmediatePropagation();
        $scope.closeViewMenu();
        var snippet = '<md-whiteframe style="left:'+($event.x-5)+'px;top:'+($event.y-5)+'px;width:175px;" class="md-whiteframe-4dp dfx-view-menu" ng-mouseleave="closeViewMenu()">';
        snippet += '<div><a ng-click="removeView(' + row_id + ', ' + col_id + ', ' + view_id + ')">Remove the view</a></div>';
        snippet += '</md-whiteframe>';
        angular.element(document.getElementById('dfx_page_editor')).append($compile(snippet)($scope));
    };

    $scope.closeViewMenu = function($event) {
        $('.dfx-view-menu').remove();
    };

    $scope.removeView = function(row_id, col_id, view_id) {
        $scope.closeViewMenu();
        $timeout( function() {
            var arr_ref = $scope.selected_page.layout.rows[row_id].columns[col_id].views;
            for (var i=0; i<arr_ref.length; i++) {
                if (arr_ref[i].id==view_id) {
                    arr_ref.splice(i, 1);
                    break;
                }
            }
            // The following line forces to recalculate the ng-repeat
            $scope.selected_page.layout.rows[row_id].columns[col_id].views = angular.copy($scope.selected_page.layout.rows[row_id].columns[col_id].views);
        }, 0);
    };

    $scope.loadPageTemplates();
    $scope.loadPageDefinition();
}]);

dfxPageEditorApp.directive( 'dfxPageIncludeTemplate', function($compile) {
    return{
        restrict: 'A',
        link: function(scope, element, attributes) {
            scope.$watch('selected_template.layout.' + attributes.dfxPageIncludeTemplate + '.content.value', function(new_value) {
                element.html(new_value);
                $compile(element.contents())(scope);
            });
        }
    }
});

dfxPageEditorApp.directive('dfxPageTemplate', ['$compile', '$mdSidenav', function($compile, $mdSidenav) {
    return {
        restrict: 'A',
        link: function($scope, $element, $attrs) {
            var tpl_snippet = '';

            // Header
            tpl_snippet = '<div layout="row" ng-show="selected_template.layout.header.display==\'true\'"><div layout-align="{{selected_template.layout.header.halignment}} {{selected_template.layout.header.valignment}}" flex="100" style="height:{{selected_template.layout.header.height}};{{selected_template.layout.header.style}}" dfx-page-include-template="header"></div></div>';

            // Middle Section Start
            tpl_snippet += '<div layout="row" style="position:relative;{{selected_template.layout.body.style}}" flex>';

            // Left
            tpl_snippet += '<div id="dfxpageleft" ng-show="selected_template.layout.left.display==\'true\'" style="width:{{selected_template.layout.left.width}};{{selected_template.layout.left.style}};z-index:50;" class="{{selected_template.layout.left.whiteframe}}"><md-content layout="column" layout-align="{{selected_template.layout.left.halignment}} {{selected_template.layout.left.valignment}}" style="background:inherit" dfx-page-include-template="left"></md-content></div>';

            // Body
            tpl_snippet += '<div layout="column" style="background:inherit;z-index: 51;border:1px #37474F solid;overflow:auto;" layout-padding class="content-wrapper" flex id="pagebody">';

            tpl_snippet += '<div layout="row" style="" flex="{{row.autoHeight != true ? row.height : \'\'}}" ng-repeat="row in selected_page.layout.rows">';
            tpl_snippet += '<div layout="column" flex="{{col.width}}" class="dfx-page-droppable-column" dfx-page-droppable-column data-row="{{$parent.$index}}" data-column="{{$index}}" ng-repeat="col in row.columns" style="border:1px #999 solid;">';
            tpl_snippet += '<div ng-repeat="view in col.views" dfx-page-sortable-view class="{{(view.fit==\'content\') ? \'\' : \'flex\'}} md-whiteframe-3dp" style="letter-spacing:0.2em;background:#4cd5f3;color:#383838;cursor:pointer;" layout="row" layout-align="center center" data-view-id="{{view.id}}" data-view="{{view.name}}"><div class= "dfx-pe-view-menu"><span>{{view.name}}</span><a ng-click="loadViewMenu($event, $parent.$parent.$index, $parent.$index, view.id)" class="dfx-pe-view-menu-item"><i class="fa fa-gear"></i></a></div></div>';
            tpl_snippet += '</div>';
            tpl_snippet += '</div>';

            tpl_snippet += '</div>';

            // Right
            tpl_snippet += '<div id="dfxpageright" ng-show="selected_template.layout.right.display==\'true\'" style="width:{{selected_template.layout.right.width}};{{selected_template.layout.right.style}};z-index:50;" class="{{selected_template.layout.right.whiteframe}}"><md-content layout layout-align="{{selected_template.layout.right.halignment}} {{selected_template.layout.right.valignment}}" style="background:inherit" dfx-page-include-template="right"></md-content></div>';

            // Middle Section End
            tpl_snippet += '</div>';

            // Footer
            tpl_snippet += '<div layout="row" ng-show="selected_template.layout.footer.display==\'true\'"><div layout layout-align="{{selected_template.layout.footer.halignment}} {{selected_template.layout.footer.valignment}}" flex="100" style="height:{{selected_template.layout.footer.height}};{{selected_template.layout.footer.style}}"  dfx-page-include-template="footer"></div></div>';

            $element.append($compile(tpl_snippet)($scope));
        }
    }
}]);

dfxPageEditorApp.directive('dfxPageDraggableView', [function() {
    return {
        restrict: 'A',
        controller: function($scope, $element, $attrs) {
            $($element).draggable({
                appendTo:          "body",
                cursorAt:          {top: 5, left: 20},
                cursor:            "move",
                helper: function(event) {
                    var helper_snippet = '<div class="md-whiteframe-z2" style="width:120px;height:50px;letter-spacing: 0.2em;color:#383838;background:#4cd5f3;line-height:50px;text-align:center;vertical-align:middle;white-space: nowrap;text-overflow: ellipsis; overflow: hidden; padding: 0 5px;">' + $element.text() + '</div>';
                    return helper_snippet;
                },
                zIndex: 2000,
                connectToSortable: ".dfx-page-droppable-column"
            });

        }
    }
}]);

dfxPageEditorApp.directive('dfxPageSortableView', [function() {
    return {
        restrict: 'A',
        controller: function($scope, $element, $attrs) {

        }
    }
}]);

dfxPageEditorApp.directive('dfxPageDroppableColumn', [function() {
    return {
        restrict: 'A',
        controller: function($scope, $element, $attrs) {
           $($element).sortable({
                appendTo: "body",
                connectWith: ".dfx-page-droppable-column",
                cursor: "move",
                helper: function(event) {
                    var width = $(event.toElement).css( 'width' );
                    var height = $(event.toElement).css( 'height' );
                    var snippet = '<div class="md-whiteframe-z2 layout-align-center-center layout-row" style="letter-spacing: 0.2em;color:#fff;background:#455A64;width:' + width + ';height:' + height + '"><span>' + $(event.toElement).text() + '</span></div>';
                    return snippet;
                },
                start: function (event, ui) {
                    $(ui.placeholder).html('<div style="border:3px #00c3f3 dashed;min-width:50px;height:30px;"></div>');
                },
                stop: function (event, ui) {
                    var draggable_view = ui.item[0];
                    if ($(draggable_view).attr('dfx-page-draggable-view')==null) {
                        var view_id = $(draggable_view).attr('data-view-id');
                        var view_name = $(draggable_view).attr('data-view');
                        var row_id = parseInt($(event.target).attr('data-row'));
                        var col_id = parseInt($(event.target).attr('data-column'));
                        $scope.moveView( draggable_view, view_id, view_name, row_id, col_id );
                    } else {
                        var view_id = Math.floor(Math.random() * 100000);
                        $(draggable_view).css('display', 'none');
                        $(draggable_view).attr('data-view-id', view_id);
                        var view_name = $(draggable_view).text();
                        var row_id = -1;
                        var col_id = -1;
                        $scope.moveView( draggable_view, view_id, view_name, row_id, col_id );
                    }
                }
            });
        }
    }
}]);

dfxPageEditorApp.directive('dfxPageProperties', [ function() {
    return {
        restrict: 'A',
        templateUrl: function( el, attrs ) {
            return '/studio/studioviews/page_properties_edit.html';
        },
        link: function(scope, element, attrs) {
        }
    }
}]);


dfxPageEditorApp.controller("dfx_view_controller", [ '$scope', function($scope) {

}]);

dfxPageEditorApp.directive('dfxView', [ '$http', '$timeout', function($http, $timeout) {
    return {
        restrict: 'A',
        controller: function($scope, $element, $attrs) {
            $element.html( '<div style="width:100%;height:100%;background:#8EC3F1;color:#000;text-align:center"><span style="vertical-align:middle">' + $attrs.dfxView + '</span></div>' );
        }
    }
}]);

var dfxStudioApi = angular.module("dfxStudioApi",[]);

dfxStudioApi.factory('dfxMessaging', ['$mdToast', function($mdToast) {

    var messaging_service = {};

    messaging_service.showMessage = function (message) {
        $mdToast.show(
          $mdToast.simple()
            .textContent(message)
            .theme('success-toast')
            .position('top right')
            .hideDelay(3000)
        );
    };

    messaging_service.showWarning = function (message) {
        $mdToast.show(
          $mdToast.simple()
            .textContent(message)
            .theme('warn-toast')
            .position('top right')
            .hideDelay(3000)
        );
    };

    messaging_service.showError = function (message) {
        $mdToast.show(
          $mdToast.simple()
            .textContent(message)
            .theme('error-toast')
            .position('top right')
            .hideDelay(3000)
        );
    };

    return messaging_service;

}]);

dfxStudioApi.factory('dfxAuthRequest', function() {

    var aut_request = {};

    aut_request.send = function( config, callback) {
        authRequest( config ).then( function(data) {
            callback(data);
        });
    };
    
    return aut_request;
});

dfxStudioApi.factory('dfxStats', [ '$http', '$q', function($http, $q) {

    var api_stats = {};

    api_stats.getMain = function( scope ) {
        var deferred = $q.defer();
        
        $http({
            method: 'GET',
            url: '/studio/stats/main'
        }).then(function successCallback(response) {
            deferred.resolve( response.data );
        });
        
        return deferred.promise;
    }
    return api_stats;
}]);

dfxStudioApi.factory('dfxPlatformBluemix', ['$http', '$q', function($http, $q) {
    var api_bluemix = {};

    api_bluemix.getAppsBuilds = function(){
        var deferred = $q.defer();
        $http({
            url: '/studio/builds',
            method: "GET"
        }).then(function successCallback(response) {
            deferred.resolve( response);
        }, function errorCallback(response){
            deferred.reject( response);
        });
        return deferred.promise;
    }

    api_bluemix.bluemixLogin = function(data){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/loginBlueMix',
            method: "POST",
            data: {
                email:      data.email,
                password:   data.pass
            }
        }).then(function successCallback(response) {
            deferred.resolve( response);
        }, function errorCallback(response){
            deferred.reject( response);
        });
        return deferred.promise;
    }

    api_bluemix.bluemixLogout = function(){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/logout',
            method: "POST"
        }).then(function successCallback(response) {
            deferred.resolve( response);
        }, function errorCallback(response){
            deferred.reject( response);
        });
        return deferred.promise;
    }

    api_bluemix.getOrgsList = function(){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/getOrgsList',
            method: "GET"
        }).then(function successCallback(response) {
            deferred.resolve( response);
        }, function errorCallback(response){
            deferred.reject( response);
        });
        return deferred.promise;
    }

    api_bluemix.saveImage = function (imgname, version, apps){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/build',
            method: "POST",
            data: {
                "cnt": {
                    applications: apps
                },
                imageName:      imgname,
                imageVersion:   version
            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        }, function errorCallback(response){
            deferred.reject( response);
        });
        return deferred.promise;
    }

    /*studio/bm/loginStatus*/

    api_bluemix.getUser = function (){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/loginStatus',
            method: "POST"
        }).then(function successCallback(response) {
            deferred.resolve( response );
        }, function errorCallback(response){
            deferred.reject( response);
        });
        return deferred.promise;
    }

    api_bluemix.deleteImage = function (imgname, version){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/removeImage',
            method: "POST",
            data: {
                imageName:      imgname,
                version:   version
            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        }, function errorCallback(response){
            deferred.reject( response);
        });
        return deferred.promise;
    }

    api_bluemix.setChoosenOrg = function(guid){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/setChoosenOrg',
            method: "POST",
            data: {
                guid: guid
            }
        }).then(function successCallback(response) {
            deferred.resolve( response);
        });
        return deferred.promise;
    }

    api_bluemix.getSpacesList = function(){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/getSpacesList',
            method: "GET"
        }).then(function successCallback(response) {
            deferred.resolve( response);
        });
        return deferred.promise;
    }

    api_bluemix.setChoosenSpace = function(guid){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/setChoosenSpace',
            method: "POST",
            data: {
                guid: guid
            }
        }).then(function successCallback(response) {
            deferred.resolve( response);
        });
        return deferred.promise;
    }

    api_bluemix.getChoosenSpace = function(){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/getChoosenSpace',
            method: "GET"
        }).then(function successCallback(response) {
            deferred.resolve( response);
        });
        return deferred.promise;
    }

    api_bluemix.loginCF = function(){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/loginCF',
            method: "POST"
        }).then(function successCallback(response) {
            deferred.resolve( response);
        });
        return deferred.promise;
    }

    api_bluemix.remoteImagesList = function(){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/remoteImagesList',
            method: "GET"
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data);
        });
        return deferred.promise;
    }

    api_bluemix.getNamespace = function(){
        var deferred = $q.defer();
        $http({
            url: '/studio/bm/getNamespace',
            method: "GET"
        }).then(function successCallback(response) {
            deferred.resolve( response);
        });
        return deferred.promise;
    }

    return api_bluemix;
}]);

dfxStudioApi.factory('dfxPlatformDevelopers', [ '$http', '$q', function($http, $q) {
    var api_developers = {};

    api_developers.getUsers = function (data){
        var deferred = $q.defer();
        $http({
            url: '/studio/users/list',
            method: "POST",
            data: data
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data);
        });
        return deferred.promise;
    }

    api_developers.updateUser = function (user, newpass, passchanged){
        var deferred = $q.defer();
        if(passchanged){
            $http({
                url: '/studio/users/update/',
                method: "POST",
                data: {
                    "login": user.login,
                    "firstName": user.firstName,
                    "lastName": user.lastName,
                    "email": user.email,
                    "pass": newpass,
                    "roles": {
                        "list": user.roles.list,
                        "default": user.roles.default
                    }
                }
            }).then(function successCallback(response) {
                deferred.resolve( response );
            });
        }else{
            $http({
                url: '/studio/users/update/',
                method: "POST",
                data: {
                    "login": user.login,
                    "firstName": user.firstName,
                    "lastName": user.lastName,
                    "email": user.email,
                    "roles": {
                        "list": user.roles.list,
                        "default": user.roles.default
                    }
                }
            }).then(function successCallback(response) {
                deferred.resolve( response );
            });
        }
        return deferred.promise;
    }

    api_developers.createUser = function (user){
        var deferred = $q.defer();
        $http({
            url: '/studio/users/create/',
            method: "POST",
            data: {
                "login": user.login,
                "firstName": user.firstName,
                "lastName": user.lastName,
                "email": user.email,
                "pass": user.pass,
                "kind": "system",
                "roles": {
                    "list": user.roles.list,
                    "default": user.roles.default
                }
            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        }, function errorCallback(response){
            deferred.reject( response );
        });
        return deferred.promise;
    }

    api_developers.deleteUser = function (login){
        var deferred = $q.defer();
        $http({
            url: '/studio/users/remove',
            method: "POST",
            data: {
                "login": login
            }
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data);
        });

        return deferred.promise;
    }

    return api_developers;
}]);

dfxStudioApi.factory('dfxGoogleMapProperties', [ '$http', '$q', function($http, $q) {
    var api = {};

    api.getAPIKey = function (tenantId){
        var deferred = $q.defer();
        $http({
            url: '/api/tenant/get?tenantid=' + tenantId,
            method: "GET"
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data);
        });
        return deferred.promise;
    }

    api.putAPIKey = function (tenantId, APIKey){
        var deferred = $q.defer();
        var data = {"query" : {"googleAPIKey":APIKey}};
        $http({
            url: '/api/tenant/edit?tenantid=' + tenantId,
            method: "POST",
            data: data
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data);
        });
        return deferred.promise;
    }


    return api;
}]);

dfxStudioApi.factory('dfxPhoneGapProperties', [ '$http', '$q', function($http, $q) {
    var api = {};

    api.getData = function (tenantId){
        var deferred = $q.defer();
        $http({
            url: '/api/tenant/get?tenantid=' + tenantId,
            method: "GET"
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data);
        });
        return deferred.promise;
    }

    api.saveData = function (tenantId, data){
        var deferred = $q.defer();
        var query = {"query" : data};
        $http({
            url: '/api/tenant/edit?tenantid=' + tenantId,
            method: "POST",
            data: query
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data);
        });
        return deferred.promise;
    }


    return api;
}]);

dfxStudioApi.factory('dfxEmail', [ '$http', '$q', function($http, $q) {
    var email = {};

    email.sendMail = function(data){
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/studio/support-email/send',
            data: {
                contactName: data.contact_name,
                contactEmail: data.contact_email,
                contactMsg: data.contact_msg,
                subject: data.subject
            }

        }).then(function successCallback(response){
            deferred.resolve(response);
        }, function errorCallback(response){
            deferred.reject( response );
        })
        return deferred.promise;
    }
    return email;
}]);

dfxStudioApi.factory('dfxApplications', [ '$http', '$q', function($http, $q) {
    var api_applications = {};

    api_applications.getUserInfo = function() {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/studio/application/getUserInfo/test'
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data[0]);
        }, function errorCallback(response){
            deferred.reject( response);
        })
        return deferred.promise;
    }

    api_applications.createNewApp = function(appname, title, logo) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/studio/application/create',
            data: {
                "applicationName": appname,
                "platform": "web",
                "ownerId": "",
                "title": title,
                "logo": logo
            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        }, function errorCallback(response){
            deferred.reject( response.message );
        })
        return deferred.promise;
    }

    api_applications.deleteApp = function(appname) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/studio/application/delete',
            data: {
                "applicationName": appname
            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        return deferred.promise;
    }

    api_applications.getAll = function( scope ) {
        var deferred = $q.defer();
        
        $http({
            method: 'GET',
            url: '/studio/tree'
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_applications.getAppTree = function( scope, app_name ) {
        var deferred = $q.defer();
        
        $http({
            method: 'GET',
            url: '/studio/tree?application=' + app_name
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_applications.getGeneral = function(appname) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/studio/application/get/'+ appname
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data );
        });
        return deferred.promise;
    }

    api_applications.saveGeneral = function (title, appname, logo){
        var deferred = $q.defer();
        $http({
            url: '/studio/application/update/'+ appname,
            method: "POST",
            data: {
                    "title": title,
                    "logo": logo
            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });

        return deferred.promise;
    }

    api_applications.saveLoginPage = function (obj){
        var deferred = $q.defer();
        $http({
            url: '/studio/application/update/'+ obj.application,
            method: "POST",
            data: obj.data
        }).then(function successCallback(response) {
            deferred.resolve( response );
        }, function errorCallback(response){
            deferred.reject( response.message );
        });

        return deferred.promise;
    }

    api_applications.saveCollaboration = function (channel, appname){
        var deferred = $q.defer();
        $http({
            url: '/studio/application/update/'+ appname,
            method: "POST",
            data: {
                "channel": channel
            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });

        return deferred.promise;
    }

    api_applications.getGithubData = function (appname){
        var deferred = $q.defer();
        $http({
            url: '/studio/github/fetch-settings/' + appname,
            method: "GET"
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });

        return deferred.promise;
    }

    api_applications.saveGithub = function (data){
        var deferred = $q.defer();
        $http({
            url: '/studio/github/saveSettings/',
            method: "POST",
            data: data
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });

        return deferred.promise;
    }

    api_applications.getImages = function(appname){
        var deferred = $q.defer();
        $http({
            url: '/studio/resources',
            method: "POST",
            data: {
                "action" : "list",
                "applicationName" : appname
            }
        }).then(function successCallback(response) {
            var arr = response.data.data;
            var result = [];
            for(var i =0; i < arr.length; i++){
                if(arr[i].name === "assets"){
                    var images = arr[i].items;
                    for(var j=0; j < images.length; j++){
                        result.push('/studio/resources/preview/' + appname + '/assets/' + images[j].path);
                    };
                }
            }
            deferred.resolve(result);
        });
        return deferred.promise;
    }

    api_applications.getSharedImages = function(){
        var deferred = $q.defer();
        $http({
            url: '/studio/resources',
            method: "POST",
            data: {
                "action" : "list"
            }
        }).then(function successCallback(response) {
            var arr = response.data.data;
            var result = [];
            for(var i =0; i < arr.length; i++){
                if(arr[i].name === "assets"){
                    var images = arr[i].items;
                    for(var j=0; j < images.length; j++){
                        result.push('/studio/resources/preview/' + '_shared/assets/' + images[j].path);
                    };
                }
            }
            deferred.resolve(result);
        });
        return deferred.promise;
    }

    api_applications.saveResources = function(data){
        var deferred = $q.defer();
        $http({
            url: '/studio/resources',
            method: "POST",
            data: data
        }).then(function successCallback(response) {
            deferred.resolve(response);
        });
        return deferred.promise;
    }

    api_applications.saveDictionary = function(appname, data){
        var deferred = $q.defer();
        $http({
            url: '/studio/data_dictionary/put/' + appname,
            method: "POST",
            data: data
        }).then(function successCallback(response) {
            deferred.resolve(response);
        });
        return deferred.promise;
    }

    api_applications.removeDataDictionary = function(name, appname){
        var deferred = $q.defer();
        $http({
            url: '/studio/data_dictionary/remove/' + name + '/' + appname,
            method: "DELETE"
        }).then(function successCallback(response) {
            deferred.resolve(response);
        });
        return deferred.promise;
    }

    api_applications.getDataDictionaries = function(appname){
        var deferred = $q.defer();
        $http({
            url: '/studio/data_dictionary/list/' + appname,
            method: "GET"
        }).then(function successCallback(response) {
            deferred.resolve(response);
        });
        return deferred.promise;
    }

    api_applications.getResources = function(appname){
        var deferred = $q.defer();
        $http({
            url: '/studio/resources',
            method: "POST",
            data: {
                "action" : "list",
                "applicationName" : appname
            }
        }).then(function successCallback(response) {
            deferred.resolve(response);
        });
        return deferred.promise;
    }

    api_applications.createResource = function(data){
        var deferred = $q.defer();
        $http({
            url: '/studio/resources',
            method: "POST",
            data: data
        }).then(function successCallback(response) {
            deferred.resolve(response);
        });
        return deferred.promise;
    }

    api_applications.getResourceContent = function(data){
        var deferred = $q.defer();
        $http({
            url: '/studio/resources',
            method: "POST",
            data: data
        }).then(function successCallback(response) {
            deferred.resolve(response.data.data);
        });
        return deferred.promise;
    }

    api_applications.updateResource = function(data){
        var deferred = $q.defer();
        $http({
            url: '/studio/resources',
            method: "POST",
            data: data
        }).then(function successCallback(response) {
            deferred.resolve(response);
        });
        return deferred.promise;
    }

    api_applications.findAll = function( search ) {
        var deferred = $q.defer();
        
        $http({
            method: 'GET',
            url: '/studio/components/search?q=' + search
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    };

    api_applications.copyObject = function( scope, to_copy ) {
        var deferred = $q.defer();
        
        var data = {
            saveAsName:        to_copy.name,
            applicationName:   to_copy.application,
            applicationTarget: to_copy.applicationTarget,            
            categoryTarget:    to_copy.categoryTarget,
            type:              to_copy.type
        }

        switch ( to_copy.type ) {
            case 'screen': data.screenName = to_copy.queryName; data.platform = to_copy.platform; data.ownerId = ''; break;
            case 'widget': data.widgetName = to_copy.queryName; data.platform = to_copy.platform; break;
            case 'dataquery':
                data.queryName = to_copy.queryName;
                data.prefix    = to_copy.prefix;
                break;
        }

        $http({
            method: 'POST',
            url: '/studio/application/copyObject',
            data: data
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });

        return deferred.promise;
    }

    api_applications.copyCategory = function( scope, category ) {
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/application/copyCategory',
            data: category
        }).then(function successCallback(response) {
            deferred.resolve( response );
        }, function errorCallback(response){
            deferred.reject( response );
        });

        return deferred.promise;
    }

    return api_applications;
}]);

dfxStudioApi.factory('dfxDeployment', [ '$http', '$q', function($http, $q) {
    var api_build = {};

    api_build.getAppBuilds = function(appname, platform) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/studio/compiler/build/list/' + appname + '/' + platform
        }).then(function successCallback(response) {
            deferred.resolve( response.data );
        });
        return deferred.promise;
    }

    api_build.runCompilerTask = function(url) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: url
        }).then(function successCallback(response) {
            deferred.resolve( response );
        },function errorCallback(response) {
            deferred.reject(response);
        });
        return deferred.promise;
    }

    api_build.registerNewBuild = function(data, appname, platform){
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/studio/compiler/build/register/' + appname + '/' + platform,
            data: {
                applicationName:    appname,
                platform:           platform,
                applicationVersion: data.app_version,
                buildNumber:        data.build_number,
                buildDescription:   data.description,
                buildReleaseNotes:  data.release_notes,
                buildDate:          data.build_date,
                error:              data.error
            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        return deferred.promise;
    }

    api_build.deleteBuild = function(data){
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/studio/compiler/build/remove/' + data.applicationName + '/' + data.platform,
            data: {
                applicationName:    data.applicationName,
                applicationVersion: data.applicationVersion,
                buildNumber:        data.buildNumber
            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        return deferred.promise;
    }

    api_build.getLogFile = function(data){
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/studio/compiler/getlogfile' ,
            data: data
        }).then(function successCallback(response) {
            deferred.resolve( response.data );
        });
        return deferred.promise;
    }

    api_build.getDeployedBuilds = function(data){
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/studio/deployment/list'
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data );
        },function failCallback(response) {
            deferred.reject( response );
        });
        return deferred.promise;
    }

    api_build.deleteDeployedBuild = function(appname, build){
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/studio/deployment/delete/' + appname + '/' + build
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        return deferred.promise;
    }

    api_build.deployBuild = function(data){
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/studio/deployment/deploy' ,
            data: data
        }).then(function successCallback(response) {
            if ((response.data.status) && (response.data.status == "failed")){
                deferred.reject("Error");
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    api_build.getMobileApp = function(build) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/studio/phonegap/getByPlatform',
            params: { platform: 'android', appId: build.phoneGapAppId }
        }).then(function successCallback(response) {
            deferred.resolve( response.data );
        });
        return deferred.promise;
    }

    return api_build;
}]);

dfxStudioApi.factory('dfxAuthProviders', [ '$http', '$q', function($http, $q) {
    var api_providers = {};

    api_providers.createProvider = function(protocol, provider, appname) {
        var deferred = $q.defer();
        if(protocol === "none"){
            $http({
                method: 'POST',
                url: '/studio/auth-providers/',
                data:  {
                    "action":           "put",
                    "dataSource":        provider.selected_data_source,
                    "provider":          provider.provider,
                    "schema":            provider.schema,
                    "applicationName":   appname,
                    "route":             provider.rest.route,
                    "credentials": {}
                }
            }).then(function successCallback(response) {
                deferred.resolve( response);
            });
        }else if(protocol === "basic" || protocol === "digest"){
            $http({
                method: 'POST',
                url: '/studio/auth-providers/',
                data:  {
                    "action":           "put",
                    "dataSource":        provider.selected_data_source,
                    "provider":          provider.provider,
                    "schema":            provider.schema,
                    "applicationName":   appname,
                    "credentials": {
                        "username":      provider.ap_basic_digest.credentials.username,
                        "password":      provider.ap_basic_digest.credentials.password
                    }
                }
            }).then(function successCallback(response) {
                deferred.resolve( response);
            });
        }else if(protocol === "oAuth1"){
            $http({
                method: 'POST',
                url: '/studio/auth-providers/',
                data:  {
                    "action" :           "put",
                    "dataSource":        provider.selected_data_source,
                    "provider":          provider.provider,
                    "schema":            "oAuth1",
                    "applicationName":   appname,
                    "credentials" : {
                        "signature_method": provider.ap_oAuth_1.credentials.selected_method,
                        "consumer_key" :    provider.ap_oAuth_1.credentials.consumer_key,
                        "access_token" :    provider.ap_oAuth_1.credentials.access_token,
                        "consumer_secret" : provider.ap_oAuth_1.credentials.consumer_secret,
                        "access_secret" :   provider.ap_oAuth_1.credentials.access_secret
                    }
                }
            }).then(function successCallback(response) {
                deferred.resolve( response);
            });
        }else if(protocol === "oAuth2"){
            if(provider.ap_oAuth_2.selected_type === "facebook"){
                $http({
                    method: 'POST',
                    url: '/studio/auth-providers/',
                    data:  {
                        "action" :           "put",
                        "dataSource":        provider.selected_data_source,
                        "provider":          provider.provider,
                        "schema":            "oAuth2",
                        "applicationName":   appname,
                        "credentials" : {
                            "type":               "facebook",
                            "access_token":       provider.ap_oAuth_2.credentials.access_token,
                            "consumer_key" :      provider.ap_oAuth_2.credentials.consumer_key,
                            "consumer_secret" :   provider.ap_oAuth_2.credentials.consumer_secret,
                            "authorize_path" :    provider.ap_oAuth_2.credentials.authorize_path,
                            "access_token_path" : provider.ap_oAuth_2.credentials.access_token_path,
                            "response_type" :     provider.ap_oAuth_2.credentials.response_type,
                            "scope" :             provider.ap_oAuth_2.credentials.scope
                        }
                    }
                }).then(function successCallback(response) {
                    deferred.resolve( response);
                });
            }else if(provider.ap_oAuth_2.selected_type === "google"){
                $http({
                    method: 'POST',
                    url: '/studio/auth-providers/',
                    data:  {
                        "action" :           "put",
                        "dataSource":        provider.selected_data_source,
                        "provider":          provider.provider,
                        "schema":            "oAuth2",
                        "applicationName":   appname,
                        "credentials" : {
                            "type":               "google",
                            "access_token":       provider.ap_oAuth_2.credentials.access_token,
                            "consumer_key" :      provider.ap_oAuth_2.credentials.consumer_key,
                            "consumer_secret" :   provider.ap_oAuth_2.credentials.consumer_secret,
                            "base_site" :         provider.ap_oAuth_2.credentials.base_provider_url,
                            "authorize_path" :    provider.ap_oAuth_2.credentials.authorize_path,
                            "access_token_path" : provider.ap_oAuth_2.credentials.access_token_path,
                            "response_type" :     provider.ap_oAuth_2.credentials.response_type,
                            "scope" :             provider.ap_oAuth_2.credentials.scope
                        }
                    }
                }).then(function successCallback(response) {
                    deferred.resolve( response);
                });
            }
        }
        return deferred.promise;
    };

    api_providers.saveProvider = function(protocol, provider, appname) {
        var deferred = $q.defer();
        if(protocol === "none"){
            $http({
                method: 'POST',
                url: '/studio/auth-providers/',
                data:  {
                    "action":           "put",
                    "dataSource":        provider.dataSource,
                    "provider":          provider.provider,
                    "schema":            provider.schema,
                    "route":             provider.route,
                    "applicationName":   appname,
                    "credentials": {}
                }
            }).then(function successCallback(response) {
                deferred.resolve( response);
            });
        }else if(protocol === "basic" || protocol === "digest"){
            $http({
                method: 'POST',
                url: '/studio/auth-providers/',
                data:  {
                    "action":           "put",
                    "dataSource":        provider.dataSource,
                    "provider":          provider.provider,
                    "schema":            provider.schema,
                    "applicationName":   appname,
                    "credentials": {
                        "username":      provider.credentials.username,
                        "password":      provider.credentials.password
                    }
                }
            }).then(function successCallback(response) {
                deferred.resolve( response);
            });
        }else if(protocol === "oAuth1"){
            $http({
                method: 'POST',
                url: '/studio/auth-providers/',
                data:  {
                    "action" :           "put",
                    "dataSource":        provider.dataSource,
                    "provider":          provider.provider,
                    "schema":            "oAuth1",
                    "applicationName":   appname,
                    "credentials" : {
                        "signature_method": provider.credentials.signature_method,
                        "consumer_key" :    provider.credentials.consumer_key,
                        "access_token" :    provider.credentials.access_token,
                        "consumer_secret" : provider.credentials.consumer_secret,
                        "access_secret" :   provider.credentials.access_secret
                    }
                }
            }).then(function successCallback(response) {
                deferred.resolve( response);
            });
        }else if(protocol === "oAuth2"){
            if(provider.credentials.type === "facebook"){
                $http({
                    method: 'POST',
                    url: '/studio/auth-providers/',
                    data:  {
                        "action" :           "put",
                        "dataSource":        provider.dataSource,
                        "provider":          provider.provider,
                        "schema":            "oAuth2",
                        "applicationName":   appname,
                        "credentials" : {
                            "type":               "facebook",
                            "access_token":       provider.credentials.access_token,
                            "consumer_key" :      provider.credentials.consumer_key,
                            "consumer_secret" :   provider.credentials.consumer_secret,
                            "authorize_path" :    provider.credentials.authorize_path,
                            "access_token_path" : provider.credentials.access_token_path,
                            "response_type" :     provider.credentials.response_type,
                            "scope" :             provider.credentials.scope
                        }
                    }
                }).then(function successCallback(response) {
                    deferred.resolve( response);
                });
            }else if(provider.credentials.type === "google"){
                $http({
                    method: 'POST',
                    url: '/studio/auth-providers/',
                    data:  {
                        "action" :           "put",
                        "dataSource":        provider.dataSource,
                        "provider":          provider.provider,
                        "schema":            "oAuth2",
                        "applicationName":   appname,
                        "credentials" : {
                            "type":               "google",
                            "access_token":       provider.credentials.access_token,
                            "consumer_key" :      provider.credentials.consumer_key,
                            "consumer_secret" :   provider.credentials.consumer_secret,
                            "base_site" :         provider.credentials.base_site,
                            "authorize_path" :    provider.credentials.authorize_path,
                            "access_token_path" : provider.credentials.access_token_path,
                            "response_type" :     provider.credentials.response_type,
                            "scope" :             provider.credentials.scope
                        }
                    }
                }).then(function successCallback(response) {
                    deferred.resolve( response);
                });
            }
        }
        return deferred.promise;
    };

    api_providers.getProviders = function(appname) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/studio/auth-providers',
            data:{
                action:             'items',
                applicationName:    appname
            }
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data );
        });

        return deferred.promise;
    };

    api_providers.getProvider = function(providername, appname) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/studio/auth-providers',
            data:{
                action:             "get",
                provider:           providername,
                applicationName:    appname
            }
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data );
        });

        return deferred.promise;
    };

    api_providers.removeProvider = function(appname, providername) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/studio/auth-providers',
            data:{
                action:             "remove",
                applicationName:    appname,
                provider:           providername

            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });

        return deferred.promise;
    };


    return api_providers;
}]);

dfxStudioApi.factory('dfxViews', [ '$http', '$q', function($http, $q) {

    var api_views = {};

    api_views.getOne = function( scope, app_name, view_name, platform ) {
        // url: '/studio/widget/item/' + app_name + '/' + view_name  + '/' + view.platform
    	var deferred = $q.defer();
        
        $http({
  			method: 'GET',
  			url: '/studio/widget/item/' + app_name + '/' + view_name + '/' + platform
		}).then(function successCallback(response) {
        	deferred.resolve( response.data.widget );
        });
        
        return deferred.promise;
    };

    api_views.getByApp = function( scope, app_name, platform ) {
        // url: '/studio/widget/search/' + app_name + '/' + platform + '?q='
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/studio/widget/search/' + app_name + '/' + platform + '?q='
        }).then(function successCallback(response) {
            deferred.resolve( { "views": response.data.widgets } );
        });
        
        return deferred.promise;
    };

    api_views.update = function( scope, view ) {
        // add view.platform
        var deferred = $q.defer();

        delete view._id;
        
        $http({
            url: '/studio/widget/update/' + view.name,
            method: 'POST',
            data: {"change":view}
        }).then(function successCallback(response) {
            deferred.resolve( response.data );
        });
        
        return deferred.promise;
    }

    api_views.rename = function( scope, view ) {
        // add view,platform
        var deferred = $q.defer();

        $http({
            url: '/studio/widget/update/' + view.oldname,
            method: 'POST',
            data: {
                "change": {
                    "name": view.name,
                    "application": view.application,
                    "category": view.category,
                    "platform": view.platform,
                    "src_script": view.src_script
                }
            }
        }).then(function successCallback(response) {
            deferred.resolve( response.data );
        }, function failCallback(response) {
            deferred.reject( response );
        });

        return deferred.promise;
    }

    api_views.create = function( scope, view ) {
        var deferred = $q.defer();
        
        $http({
            url: '/studio/widget/create/',
            method: 'POST',
            data: view
        }).then(function successCallback(response) {
            deferred.resolve( response.data.widget );
        }, function errorCallback(response) {
            deferred.reject(response);
        });
        
        return deferred.promise;
    }

    api_views.delete = function( scope, view ) {
        // add view.platform
        var deferred = $q.defer();
        
        $http({
            url: '/studio/widget/delete/',
            method: 'POST',
            data: {
                "widgetName" : view.name,
                "applicationName" : view.application,
                "platform": view.platform
            }
        }).then(function successCallback(response) {
            deferred.resolve( response.data.widget );
        });
        
        return deferred.promise;
    }

    api_views.getCategories = function( scope, app_name, platform ) {
        // url: '/studio/widget/category/list/' + app_name + '/' + platform
        var deferred = $q.defer();
        
        $http({
            url: '/studio/widget/category/list/' + app_name + '/' + platform,
            method: 'GET',
            data: {}
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_views.createCategory = function( scope, category_name, app_name, platform ) {
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/widget/category/createCategory',
            data: { name: category_name, ownerId: "", application: app_name, platform: platform }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_views.editCategory = function( scope, old_name, new_name, app_name, platform ) {
        // data: { name: new_name, application: app_name, platform : platform }
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/widget/category/updateCategory/' + old_name,
            data: { name: new_name, application: app_name, platform : platform }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_views.removeCategory = function( scope, category_name, app_name, platform ) {
        // data: { name: category_name, ownerId: "", application: app_name, platform: platform }
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/widget/category/removeCategory/' + category_name,
            data: { name: category_name, ownerId: "", application: app_name, platform: platform }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_views.createFromModel = function( scope, view ) {
        // Где это используется ? Нужно тоже добавить view.platform
        var deferred = $q.defer();
        
        $http({
            url: '/studio/widget/create-from-model/',
            method: 'POST',
            data: view
        }).then(function successCallback(response) {
            deferred.resolve( response.data.widget );
        }, function errorCallback(response) {
            deferred.reject(response);
        });
        
        return deferred.promise;
    }

    return api_views;
}]);

dfxStudioApi.factory('dfxPages', [ '$http', '$q', function($http, $q) {

    var api_pages = {};

    api_pages.getOne = function( scope, app_name, page_name, platform ) {
        // url: '/studio/screen/item/' + page_name + '/' + app_name + '/' + platform
    	var deferred = $q.defer();
        
        $http({
  			method: 'GET',
  			url: '/studio/screen/item/' + page_name + '/' + app_name + '/' + platform
		}).then(function successCallback(response) {
        	deferred.resolve( response.data.screen );
        });
        
        return deferred.promise;
    }

    api_pages.update = function( scope, page ) {
        // add page.platform
        var deferred = $q.defer();

        delete page._id;
        
        $http({
            url: '/studio/screen/update/',
            method: 'POST',
            data: {"change":page}
        }).then(function successCallback(response) {
            deferred.resolve( response.data );
        });
        
        return deferred.promise;
    }

    api_pages.delete = function( scope, page ) {
        // add page.platform
        var deferred = $q.defer();
        
        $http({
            url: '/studio/screen/delete/',
            method: 'POST',
            data: {
                "screenName" : page.name,
                "screenID" : page._id,
                "applicationName" : page.application,
                "platform": page.platform
            }
        }).then(function successCallback(response) {
            deferred.resolve( response.data.screen );
        });
        
        return deferred.promise;
    }

    api_pages.create = function( scope, page ) {
        // If no, then add page.platform
        var deferred = $q.defer();
        
        $http({
            url: '/studio/screen/create/',
            method: 'POST',
            data: page
        }).then(function successCallback(response) {
            deferred.resolve( response.data.screen );
        }, function errorCallback(response) {
            deferred.reject(response);
        });
        
        return deferred.promise;
    }

    api_pages.getCategories = function( scope, app_name, platform ) {
        // url: '/studio/screen-category/list/' + app_name + '/' + platform
        var deferred = $q.defer();
        
        $http({
            url: '/studio/screen-category/list/' + app_name + '/' + platform,
            method: 'GET'
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_pages.createCategory = function( scope, category_name, app_name, platform ) {
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/screen-category/create',
            data: { name: category_name, application: app_name, title: category_name, platform: platform }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_pages.editCategory = function( scope, old_name, new_name, app_name, platform ) {
        //  data: { name: new_name, application: app_name, platform : platform }
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/screen-category/update/' + old_name,
            data: { name: new_name, application: app_name, platform: platform }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_pages.removeCategory = function( scope, category_name, app_name, platform ) {
        // data: { applicationName: app_name, screenCategoryName: category_name, platform: platform }
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/screen-category/delete/' + category_name,
            data: { applicationName: app_name, screenCategoryName: category_name, platform: platform }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_pages.preview = function( url ) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: url
        }).then(function successCallback(response) {
            deferred.resolve( response );
        },function errorCallback(err){
            deferred.reject(err);
        });

        return deferred.promise;
    }

    return api_pages;
}]);

dfxStudioApi.factory('dfxTemplates', [ '$http', '$q', function($http, $q) {

    var api_templates = {};

    api_templates.getOne = function( scope, app_name, template_name ) {
        var deferred = $q.defer();
        
        $http({
            method: 'GET',
            url: '/studio/screentemplates/item/' + template_name + '/' + app_name
        }).then(function successCallback(response) {
            deferred.resolve(response.data.screenTemplate);
        });
        
        return deferred.promise;
    };

    api_templates.getAll = function( scope, app_name ) {
        var deferred = $q.defer();
        
        $http({
            method: 'GET',
            url: '/studio/screentemplates/list/' + app_name
        }).then(function successCallback(response) {
            deferred.resolve(response.data.screens_templates);
        });
        
        return deferred.promise;
    };

    api_templates.create = function( scope, template ) {
        var deferred = $q.defer();

        delete template._id;
        
        $http({
            url: '/studio/screentemplates/create/',
            method: 'POST',
            data: template
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_templates.update = function( scope, template ) {
        var deferred = $q.defer();

        delete template._id;
        
        $http({
            url: '/studio/screentemplates/update/',
            method: 'POST',
            data: {"change":template}
        }).then(function successCallback(response) {
            deferred.resolve( response.data.screenTemplate );
        });
        
        return deferred.promise;
    }

    return api_templates;
}]);

dfxStudioApi.factory('dfxAppRoles', [ '$http', '$q', function($http, $q) {

    var api_roles = {};

    api_roles.getAll = function( scope, app_name ) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/studio/roles/' + app_name + '/search?q='
        }).then(function successCallback(response) {
            deferred.resolve( response.data.roles );
        });

        return deferred.promise;
    };

    api_roles.getAllRights = function( scope, app_name ) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/studio/query/list-by-app/' + app_name
        }).then(function successCallback(response) {
            var dataqueries = response.data.queries;

            deferred.resolve( dataqueries );
        });

        return deferred.promise;
    };

    api_roles.edit = function( scope, app_name, role_name ) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/studio/query/list-by-app/' + app_name
        }).then(function successCallback(response) {
            var dataqueries = response.data.queries;

            $http({
                url: '/studio/roles/get',
                method: 'POST',
                data: {
                    tenant:      scope.tenant_id,
                    application: app_name,
                    name:        role_name
                }
            }).then(function successCallback(response) {
                var role = response.data;
                role.all_dataqueries = dataqueries;

                //TODO: check if getRights is not redundant because we already have rights in role object
                $http({
                    url: '/studio/roles/getRights',
                    method: 'POST',
                    data: {
                        tenant:      scope.tenant_id,
                        application: app_name,
                        role:        role_name
                    }
                }).then(function successCallback(response) {
                    role.rights = response.data;
                    console.log('role: ', role);

                    deferred.resolve( role );
                });
            });
        });

        return deferred.promise;
    };

    api_roles.update = function( scope, to_update ) {
        var deferred = $q.defer();

        var data = {
            name:        to_update.name,
            application: to_update.app_name,
            description: to_update.description
        };
        if (to_update.rights && to_update.rights.length > 0) {
            data.rights = to_update.rights;//need to pass rights to server only if there are checked ones
        }

        $http({
            url: '/studio/roles/update',
            method: 'POST',
            data: data
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });

        return deferred.promise;
    };

    api_roles.create = function( scope, to_update ) {
        var deferred = $q.defer();

        var data = {
            tenant:      scope.tenant_id,
            name:        to_update.name,
            application: to_update.app_name,
            description: to_update.description
        };
        if (to_update.rights && to_update.rights.length > 0) {
            data.rights = to_update.rights;//need to pass rights to server only if there are checked ones
        }

        $http({
            url: '/studio/roles/create',
            method: 'POST',
            data: data
        }).then(function successCallback(response) {
            deferred.resolve( response );
        }, function failCallback(response) {
            deferred.reject( response );
        });

        return deferred.promise;
    };

    api_roles.delete = function( scope, app_name, role_name ) {
        var deferred = $q.defer();

        $http({
            url: '/studio/roles/remove',
            method: 'POST',
            data: {
                name:        role_name,
                application: app_name
            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });

        return deferred.promise;
    };

    return api_roles;
}]);

dfxStudioApi.factory('dfxAppUsers', [ '$http', '$q', function($http, $q) {

    var api_users = {};

    api_users.getAll = function( scope, app_name ) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/studio/users/' + app_name + '/search?q='
        }).then(function successCallback(response) {
            deferred.resolve( response.data.users );
        });

        return deferred.promise;
    };

    api_users.getAllRoles = function( scope, app_name ) {
        var deferred = $q.defer();

        $http({
            url: '/studio/roles/list',
            method: 'POST',
            data: {
                application: app_name
            }
        }).then(function successCallback(response) {
            deferred.resolve( response.data.data );
        });

        return deferred.promise;
    };

    api_users.edit = function( scope, app_name, user_login ) {
        var deferred = $q.defer();

        $http({
            url: '/studio/roles/list',
            method: 'POST',
            data: {
                application: app_name
            }
        }).then(function successCallback(response) {
            var all_roles = response.data.data;

            $http({
                url: 'metadata/user_definition/' + app_name,
                method: 'GET'
            }).then(function successCallback(response) {
                var user_def = response.data;

                $http({
                    url: '/studio/users/get',
                    method: 'POST',
                    data: {
                        tenant:      scope.tenant_id,
                        application: app_name,
                        login:       user_login
                    }
                }).then(function successCallback(response) {
                    var user = response.data.data;
                    user.all_roles = all_roles;
                    user.user_def = user_def;

                    deferred.resolve( user );
                });
            });
        });

        return deferred.promise;
    };

    api_users.update = function( scope, to_update, new_pass, pass_changed ) {
        var deferred = $q.defer();

        var data = {
            tenant:      scope.tenant_id,
            application: to_update.app_name,
            login:       to_update.login,
            firstName:   to_update.firstName,
            lastName:    to_update.lastName,
            email:       to_update.email,
            roles:       to_update.roles,
            properties:  to_update.properties
        };

        if (pass_changed) data.pass = new_pass;

        $http({
            url: '/studio/users/update',
            method: 'POST',
            data: data
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });

        return deferred.promise;
    };

    api_users.create = function( scope, to_create ) {
        var deferred = $q.defer();

        var data = {
            kind:        'application',
            type:        '',
            tenant:      scope.tenant_id,
            application: to_create.app_name,
            login:       to_create.login,
            firstName:   to_create.firstName,
            lastName:    to_create.lastName,
            email:       to_create.email,
            pass:        to_create.new_pass,
            roles:       to_create.roles,
            properties:  to_create.properties
        };

        $http({
            url: '/studio/users/create',
            method: 'POST',
            data: data
        }).then(function successCallback(response) {
            deferred.resolve( response.config.data );
        }, function failCallback(response) {
            deferred.reject( response );
        });

        return deferred.promise;
    };

    api_users.delete = function( scope, app_name, user_login ) {
        var deferred = $q.defer();

        $http({
            url: '/studio/users/remove',
            method: 'POST',
            data: {
                login:       user_login,
                application: app_name
            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });

        return deferred.promise;
    };

    return api_users;
}]);

dfxStudioApi.factory('dfxUserDefinition', [ '$http', '$q', function($http, $q) {

    var api_user_def = {};

    api_user_def.getUserDefinition = function( scope, app_name ) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: 'metadata/user_definition/' + app_name
        }).then(function successCallback(response) {
            deferred.resolve( response.data );
        });

        return deferred.promise;
    };

    api_user_def.updateUserDefinition = function( scope, app_name, user_definition ) {
        var deferred = $q.defer();

        var data = angular.copy(user_definition);
        data.applicationName = app_name;

        $http({
            url: '/studio/metadata/user_definition/update',
            method: 'POST',
            data: data
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });

        return deferred.promise;
    };

    return api_user_def;
}]);

dfxStudioApi.factory('dfxApiServiceObjects', [ '$http', '$q', function($http, $q) {

    var api_service_objects = {};

    //api_service_objects.execute = function( simulateService ) {
    //    var deferred = $q.defer();
    //
    //    $http.get('/studio/query/execute', { 'params' : simulateService }).then(function successCallback(response) {
    //        deferred.resolve( response );
    //    });
    //
    //    return deferred.promise;
    //}

    api_service_objects.getTenant = function(tenantId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/api/tenant/get?tenantid=' + tenantId
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });

        return deferred.promise;
    }

    api_service_objects.getAll = function( scope, app_name ) {
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/auth-providers',
            data: { action: "fullList", getCreds : true, applicationName : app_name }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.getOne = function( scope, app_name, api_so_name ) {
        var deferred = $q.defer();
        
        $http({
            method: 'GET',
            url: '/studio/query/dataNew/' + app_name + '/' + api_so_name
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.getCategories = function( scope, app_name ) {
        var deferred = $q.defer();
        
        $http({
            method: 'GET',
            url: '/studio/query/category/list/' + app_name
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.createCategory = function( scope, category_name, app_name ) {
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/query/category/createCategory',
            data: { name: category_name, ownerId: "", application: app_name }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.editCategory = function( scope, old_name, new_name, app_name ) {
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/query/category/updateCategory/' + old_name,
            data: { name: new_name, application: app_name }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.removeCategory = function( scope, category_name, app_name ) {
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/query/category/removeCategory/' + category_name,
            data: { name: category_name, ownerId: "", application: app_name }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.createSo = function( scope, so ) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/studio/query/create/' + so.name,
            data: so
        }).then(function successCallback(response) {
            deferred.resolve( response );
        }, function errorCallback(response){
            deferred.reject( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.updateSo = function( scope, so ) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/studio/query/update/' + so.name,
            data: so
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.renameSo = function( scope, so, oldName ) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/studio/query/update/' + oldName,
            data: so
        }).then(function successCallback(response) {
            deferred.resolve( response );
        }, function errorCallback(response){
            deferred.reject( response );
        });

        return deferred.promise;
    }

    api_service_objects.deleteSo = function( scope, so ) {
        var deferred = $q.defer();
        
        $http({
            url: '/studio/query/delete/',
            method: 'POST',
            data: {
                "queryName" : so.name,
                "applicationName" : so.application,
            }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.validateSoName = function( scope, api_so_name, app_name ) {
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/query/validateServiceName',
            data: { name: api_so_name, applicationName: app_name }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.validateSoUrl = function( scope, api_route, app_name, route_id ) {
        var deferred = $q.defer();
        
        $http({
            method: 'POST',
            url: '/studio/query/validateServiceUrl',
            data: { name: api_route, applicationName: app_name, uuid: route_id }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.getCatalog = function( scope ) {
        var deferred = $q.defer();
        
        $http({
            method: 'GET',
            url: '/src/catalog/datasources.json'
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.getStrongLoop = function( scope, server_url ) {
        var deferred = $q.defer();
        
        $http({
            method: 'GET',
            url: server_url + '/explorer/swagger.json'
        }).then(function successCallback(response) {
            deferred.resolve( response );
        });
        
        return deferred.promise;
    }

    api_service_objects.clearCache = function( o ) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/studio/query/clearCache',
            data: { type : o.type, application : o.application, name : o.name }
        }).then(function successCallback(response) {
            deferred.resolve( response );
        },function negativeCallback(err){
            deferred.reject( err );
        });

        return deferred.promise;
    }

    return api_service_objects;
}]);

dfxStudioApi.factory('dfxSamples', [ '$http', '$q', function($http, $q) {

    var api_samples = {};

    api_samples.contents = function( scope, path ) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: 'samples/contents',
            params: {'path': path}
        }).then(function successCallback(response) {
            deferred.resolve( response.data );
        });

        return deferred.promise;
    };

    return api_samples;
}]);

var dfxStudioApp = angular.module("dfxStudioApp", ['ngRoute', 'ngMaterial', 'dfxStudioApi', 'nvd3', 'monospaced.qrcode', 'nsPopover']);

dfxStudioApp.config([ '$routeProvider', '$mdThemingProvider', function($routeProvider, $mdThemingProvider) {

    $routeProvider
        .when('/settings', {
            controller: 'dfx_studio_settings_controller',
            templateUrl: 'studioviews/settings.html'
        })
        .when('/home', {
            controller: 'dfx_studio_home_controller',
            templateUrl: 'studioviews/home.html'
        })
        .when('/release-notes', {
            controller: 'dfx_studio_release_notes_controller',
            templateUrl: 'studioviews/release_notes.html'
        })
        .when('/samples', {
            controller: 'dfx_studio_samples_controller',
            templateUrl: 'studioviews/samples.html'
        })
        .when('/support', {
            controller: 'dfx_studio_support_controller',
            templateUrl: 'studioviews/support.html'
        })
        .when('/contactus', {
            controller: 'dfx_studio_contactus_controller',
            templateUrl: 'studioviews/contactus.html'
        })
        .when('/stackoverflow', {
            controller: 'dfx_studio_stackoverflow_controller',
            templateUrl: 'studioviews/stackoverflow.html'
        })
        .when('/search/:searchquery', {
            controller: 'dfx_studio_search_controller',
            templateUrl: 'studioviews/search.html'
        })
        .when('/application/create', {
            controller: 'dfx_studio_new_application_controller',
            templateUrl: 'studioviews/create_app.html'
        })
        .when('/:appname/configuration/:settings', {
            controller: 'dfx_studio_configuration_controller',
            templateUrl: 'studioviews/configuration.html'
        })
        .when('/page/create/:appname/:platform', {
            controller: 'dfx_studio_page_create_controller',
            templateUrl: 'studioviews/page_create.html'
        })
        .when('/page/create/:appname/:platform/:categoryname', {
            controller: 'dfx_studio_page_create_controller',
            templateUrl: 'studioviews/page_create.html'
        })
        .when('/page/update/:appname/:platform/:pagename', {
            controller: 'dfx_studio_page_controller',
            templateUrl: 'studioviews/page.html'
        })
        .when('/pages_categories/:app_name/:platform', {
            controller: 'dfx_studio_page_category_controller',
            templateUrl: 'studioviews/pages_categories.html'
        })
        .when('/view/create/:appname/:platform', {
            controller: 'dfx_studio_view_create_controller',
            templateUrl: 'studioviews/view_create.html'
        })
        .when('/view/create/:appname/:platform/:categoryname', {
            controller: 'dfx_studio_view_create_controller',
            templateUrl: 'studioviews/view_create.html'
        })
        .when('/view/update/:appname/:platform/:viewname', {
            controller: 'dfx_studio_view_controller',
            templateUrl: 'studioviews/view.html'
        })
        .when('/views_categories/:app_name/:platform', {
            controller: 'dfx_studio_view_category_controller',
            templateUrl: 'studioviews/views_categories.html'
        })
        .when('/api_so/create/:appname', {
            controller: 'dfx_studio_api_so_controller',
            templateUrl: 'studioviews/api_so.html'
        })
        .when('/api_so/create/:appname/:categoryname', {
            controller: 'dfx_studio_api_so_controller',
            templateUrl: 'studioviews/api_so.html'
        })
        .when('/api_so/update/:appname/:api_so_name', {
            controller: 'dfx_studio_api_so_controller',
            templateUrl: 'studioviews/api_so.html'
        })
        .when('/api_so_categories/:appname', {
            controller: 'dfx_studio_api_so_category_controller',
            templateUrl: 'studioviews/api_so_categories.html'
        })
        .when('/category/pages/:appname/:platform', {
            controller: 'dfx_studio_category_controller',
            templateUrl: 'studioviews/category.html'
        })
        .when('/category/views/:appname/:platform', {
            controller: 'dfx_studio_category_controller',
            templateUrl: 'studioviews/category.html'
        })
        .when('/category/api_so/:appname', {
            controller: 'dfx_studio_category_controller',
            templateUrl: 'studioviews/category.html'
        })
        .when('/category/pages/:appname/:platform/:categoryname', {
            controller: 'dfx_studio_category_controller',
            templateUrl: 'studioviews/category.html'
        })
        .when('/category/views/:appname/:platform/:categoryname', {
            controller: 'dfx_studio_category_controller',
            templateUrl: 'studioviews/category.html'
        })
        .when('/category/api_so/:appname/:categoryname', {
            controller: 'dfx_studio_category_controller',
            templateUrl: 'studioviews/category.html'
        })
        .when('/platform/:section', {
            controller: 'dfx_studio_platform_controller',
            templateUrl: 'studioviews/platform.html'
        })
        .when('/categories/:entity/:appname', {
         controller: 'dfx_studio_home_controller',
         templateUrl: 'studioviews/views_pages_apiso.html'
         })
        .otherwise('/home', {
            controller: 'dfx_studio_home_controller',
            templateUrl: 'studioviews/home.html'
        })

    $mdThemingProvider.theme('altTheme')
        .primaryPalette('blue') // specify primary color, all
    // other color intentions will be inherited
    // from default
    $mdThemingProvider.setDefaultTheme('altTheme');
}]);

dfxStudioApp.controller("dfx_studio_controller", [ '$scope', '$rootScope', '$mdDialog', '$mdSidenav', '$mdMedia', '$location', '$window', '$compile', 'dfxApplications', 'dfxPages', 'dfxViews', 'dfxApiServiceObjects', 'dfxMessaging', '$routeParams', '$timeout', '$q', '$route', function($scope, $rootScope, $mdDialog, $mdSidenav, $mdMedia, $location, $window, $compile, dfxApplications, dfxPages, dfxViews, dfxApiServiceObjects, dfxMessaging, $routeParams, $timeout, $q, $route) {
    $scope.tenant_id = $('#dfx-studio-main-body').attr( 'data-tenantid' );
    $scope.studio_explorer_visible = true;
    $scope.dfx_version_major   = '3';
    $scope.dfx_version_minor   = '02';
    $scope.dfx_version_release = 'R6';

    $scope.initStudio = function() {
        return '/studio/home';
    };

    $scope.resourcesClick = function() {
        $scope.resourcesPath = "studioviews/resources.html";
        $scope.javascript = {};
        $scope.dictionary = {};
        $scope.stylesheets = {};
        $scope.assets = {};
    }

    $scope.loadStudioView = function(path) {
        $location.path(path);
    };

    $scope.redirectDocumentation = function(){
        $window.open("http://interactive-clouds.com/documentation/", "_blank") ;
    };    

    $scope.signOut = function(path) {
        $window.location.href = '/studio/' + $scope.tenant_id + '/login';
    };

    $scope.refreshSupportForm = function(){
        var sup_scope = angular.element(document.getElementById('support-scope-id')).scope();
        if(sup_scope){
            sup_scope.refreshForm();
        }
    };

    $rootScope.$on('$routeChangeSuccess', function(scope, next, current){
        $scope.settings = $routeParams.settings;
        $scope.platform_section = $routeParams.section;
    });

    $rootScope.$on('$routeChangeStart', function(scope, next, current){
        $scope.settings = $routeParams.settings;
        $scope.platform_section = $routeParams.section;
    });

    $scope.getAll = function(){
        dfxApplications.getAll($scope).then(function(apps){
            $scope.applications = apps.data;
            $scope.appTrees = [];
            for(var i =0; i < $scope.applications.length; i++){
                $scope.appTrees.push({});
            }
            for(var j =0; j < $scope.applications.length; j++){
                (function(){
                    var local = j;
                    dfxApplications.getAppTree($scope, $scope.applications[local].name).then(function(appTree){
                        $scope.appTrees[local] = appTree;
                    })
                })();
            }
        });
        return $q.when($scope.applications);
    };
    $scope.getAll();

    $scope.toggleLeft = function() {
        $scope.studio_explorer_visible = !$scope.studio_explorer_visible;
        if ($scope.studio_explorer_visible) {
            $('#dfx-studio-toggle-explorer-icon').addClass('fa-angle-double-left');
            $('#dfx-studio-toggle-explorer-icon').removeClass('fa-angle-double-right');
            $('#dfx-studio-explorer-title').removeClass('dfx-studio-explorer-title-collapsed');
            $('#dfx-studio-explorer-title-text').removeClass('dfx-studio-explorer-title-text-collapsed');
        } else {
            $('#dfx-studio-explorer-title').addClass('dfx-studio-explorer-title-collapsed');
            $('#dfx-studio-explorer-title-text').addClass('dfx-studio-explorer-title-text-collapsed');
            $('#dfx-studio-toggle-explorer-icon').removeClass('fa-angle-double-left');
            $('#dfx-studio-toggle-explorer-icon').addClass('fa-angle-double-right');
        }
    };

    $scope.loadExplorerMenu = function($event, entity, element, category, type, name, platform) {
        $scope.platform = platform;
        $event.stopImmediatePropagation();
        $scope.closeExplorerMenu();
        $scope.isHomePage = false;
        var snippet = '<md-menu-content width="4" style="left:'+($event.x-5)+'px;top:'+($event.y-5)+'px;" layout="column" class="md-whiteframe-4dp dfx-studio-explorer-popmenu md-menu-bar-menu md-dense .md-button" ng-mouseleave="closeExplorerMenu()">';
        if (entity=='application') {
            snippet += '<md-menu-item><md-button ng-href="#/application/create"><md-icon class="fa fa-plus" aria-label="Create a new Application"></md-icon>Create a new Application</md-button></md-menu-item>';
        } else if (entity=='page') {
            snippet +=  '<md-menu-item><md-button ng-href="#/page/create/'+element+'/'+platform+'"><md-icon class="fa fa-plus" aria-label="Create Page"></md-icon>Create Page</md-button></md-menu-item><md-menu-item><md-button ng-href="#/pages_categories/'+element+'/'+platform+'"><md-icon class="fa fa-list" aria-label="Manage Categories"></md-icon>Manage Categories</md-button></md-menu-item>';
        } else if (entity=='view') {
            snippet +=  '<md-menu-item><md-button ng-href="#/view/create/'+element+'/'+platform+'"><md-icon class="fa fa-plus" aria-label="Create View"></md-icon>Create View</md-button></md-menu-item><md-menu-item><md-button ng-href="#/views_categories/'+element+'/'+platform+'"><md-icon class="fa fa-list" aria-label="Manage Categories"></md-icon>Manage Categories</md-button></md-menu-item>';
        } else if (entity=='api_so') {
            snippet +=  '<md-menu-item><md-button ng-href="#/api_so/create/'+element+'"><md-icon class="fa fa-plus" aria-label="Create API Service Object"></md-icon>Create API Service Object</md-button></md-menu-item><md-menu-item><md-button ng-href="#/api_so_categories/'+element+'"><md-icon class="fa fa-list" aria-label="Manage Categories"></md-icon>Manage Categories</md-button></md-menu-item>';
        } else if (entity=='category') {
            $scope.cat_app = element;
            $scope.cat_name = category;
            $scope.cat_type = type;
            $scope.cat_platform = platform;
            if ( category === 'Default' ) {
                switch ( type ) {
                    case 'page':  snippet += '<md-menu-item><md-button ng-href="#/category/pages/'+element+'/'+platform+'"><md-icon class="fa fa-list-alt" aria-label="List Pages"></md-icon>List Pages</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-href="#/page/create/'+element+'/'+platform+'"><md-icon class="fa fa-plus" aria-label="Create Page"></md-icon>Create Page</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-click="copyCatBtn($event)"><md-icon class="fa fa-copy" aria-label="Copy"></md-icon>Copy Category to ...</md-button></md-menu-item>'; break;
                    case 'view':  snippet += '<md-menu-item><md-button ng-href="#/category/views/'+element+'/'+platform+'"><md-icon class="fa fa-list-alt" aria-label="List Views"></md-icon>List Views</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-href="#/view/create/'+element+'/'+platform+'"><md-icon class="fa fa-plus" aria-label="Create View"></md-icon>Create View</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-click="copyCatBtn($event)"><md-icon class="fa fa-copy" aria-label="Copy"></md-icon>Copy Category to ...</md-button></md-menu-item>'; break;
                    case 'apiso': snippet += '<md-menu-item><md-button ng-href="#/category/api_so/'+element+'"><md-icon class="fa fa-list-alt" aria-label="List API SOs"></md-icon>List API SOs</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-href="#/api_so/create/'+element+'"><md-icon class="fa fa-plus" aria-label="Create API Service Object"></md-icon>Create API Service Object</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-click="copyCatBtn($event)"><md-icon class="fa fa-copy" aria-label="Copy"></md-icon>Copy Category to ...</md-button></md-menu-item>'; break;
                }
            } else {
                switch ( type ) {
                    case 'page':  snippet += '<md-menu-item><md-button ng-href="#/category/pages/'+element+'/'+platform+'/'+category+'"><md-icon class="fa fa-list-alt" aria-label="List Pages"></md-icon>List Pages</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-href="#/page/create/'+element+'/'+platform+'/'+category+'"><md-icon class="fa fa-plus" aria-label="Create Page"></md-icon>Create Page</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-click="renameCategoryBtn($event)"><md-icon class="fa fa-retweet" aria-label="Rename"></md-icon>Rename Category</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-click="copyCatBtn($event)"><md-icon class="fa fa-copy" aria-label="Copy"></md-icon>Copy Category to ...</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-click="confirmDelete($event)"><md-icon class="fa fa-trash" aria-label="Delete"></md-icon>Delete Category</md-button></md-menu-item>'; break;
                    case 'view':  snippet += '<md-menu-item><md-button ng-href="#/category/views/'+element+'/'+platform+'/'+category+'"><md-icon class="fa fa-list-alt" aria-label="List Views"></md-icon>List Views</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-href="#/view/create/'+element+'/'+platform+'/'+category+'"><md-icon class="fa fa-plus" aria-label="Create View"></md-icon>Create View</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-click="renameCategoryBtn($event)"><md-icon class="fa fa-retweet" aria-label="Rename"></md-icon>Rename Category</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-click="copyCatBtn($event)"><md-icon class="fa fa-copy" aria-label="Copy"></md-icon>Copy Category to ...</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-click="confirmDelete($event)"><md-icon class="fa fa-trash" aria-label="Delete"></md-icon>Delete Category</md-button></md-menu-item>'; break;
                    case 'apiso': snippet += '<md-menu-item><md-button ng-href="#/category/api_so/'+element+'/'+category+'"><md-icon class="fa fa-list-alt" aria-label="List API SOs"></md-icon>List API SOs</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-href="#/api_so/create/'+element+'/'+category+'"><md-icon class="fa fa-plus" aria-label="Create API Service Object"></md-icon>Create API Service Object</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-click="renameCategoryBtn($event)"><md-icon class="fa fa-retweet" aria-label="Rename"></md-icon>Rename Category</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-click="copyCatBtn($event)"><md-icon class="fa fa-copy" aria-label="Copy"></md-icon>Copy Category to ...</md-button></md-menu-item>' +
                                             '<md-menu-item><md-button ng-click="confirmDelete($event)"><md-icon class="fa fa-trash" aria-label="Delete"></md-icon>Delete Category</md-button></md-menu-item>'; break;
                }
            }            
        } else if (entity === 'menuItem') {
            $scope.targetComponent = {
                "name":        name,
                "application": element,
                "category":    category,
                "type":        type,
                "platform":    platform
            }
            if ( name === 'Home' && category === 'Default' && type === 'page' ) {
                $scope.isHomePage = true;
            }
            switch (type) {
                case 'page':  snippet +=  '<md-menu-item><md-button ng-click="copyToBtn($event)"><md-icon class="fa fa-copy" aria-label="Copy"></md-icon>Copy to ...</md-button></md-menu-item>' +
                                          '<md-menu-item ng-if="!(isHomePage)"><md-button ng-click="moveToBtn($event)"><md-icon class="fa fa-exchange" aria-label="Move"></md-icon>Move to ...</md-button></md-menu-item>'; break;
                case 'view':  snippet +=  '<md-menu-item><md-button ng-click="renameViewBtn($event)"><md-icon class="fa fa-retweet" aria-label="Rename"></md-icon>Rename</md-button></md-menu-item>' +
                                          '<md-menu-item><md-button ng-click="copyToBtn($event)"><md-icon class="fa fa-copy" aria-label="Copy"></md-icon>Copy to ...</md-button></md-menu-item>' +
                                          '<md-menu-item><md-button ng-click="moveToBtn($event)"><md-icon class="fa fa-exchange" aria-label="Move"></md-icon>Move to ...</md-button></md-menu-item>'; break;
                case 'apiso':  snippet += '<md-menu-item><md-button ng-click="copyToBtn($event)"><md-icon class="fa fa-copy" aria-label="Copy"></md-icon>Copy to ...</md-button></md-menu-item>' +
                                          '<md-menu-item><md-button ng-click="moveToBtn($event)"><md-icon class="fa fa-exchange" aria-label="Move"></md-icon>Move to ...</md-button></md-menu-item>'; break;
            }

        }
        snippet += '</md-menu-content>';
        angular.element(document.getElementById('dfx-studio-main-body')).append($compile(snippet)($scope));
    };

    $scope.closeExplorerMenu = function($event) {
        $('.dfx-studio-explorer-popmenu').remove();
    };

    $scope.renameCategoryBtn = function($event) {
        var parentEl = angular.element(document.body);
        
        $mdDialog.show({
            parent: parentEl,
            targetEvent: $event,
            clickOutsideToClose: true,
            scope: $scope.$new(),
            templateUrl: 'studioviews/category_rename.html',
            controller: DialogController
        });
        
        function DialogController($scope, $mdDialog) {
            $scope.renameCategory = function( newName ) {
                if ( (newName !== '') && (/^[-a-zA-Z0-9_]+$/.test( newName )) ) {
                    if ( $scope.cat_type === 'page' ) {                
                        dfxPages.editCategory( $scope, $scope.cat_name, newName, $scope.cat_app, $scope.cat_platform ).then(function( data ) {
                            if ( data.data.data !== 'Current category name already exists!' ) {
                                dfxMessaging.showMessage(data.data.data);                                
                                $scope.getAll();
                                $route.reload();
                                $mdDialog.hide();
                            } else {
                                dfxMessaging.showWarning(data.data.data);
                            }
                        });
                    } else if ( $scope.cat_type === 'view' ) {                
                        dfxViews.editCategory( $scope, $scope.cat_name, newName, $scope.cat_app, $scope.cat_platform ).then(function( data ) {
                            if ( data.data.data !== 'Current category name already exists!' ) {
                                dfxMessaging.showMessage(data.data.data);                                
                                $scope.getAll();
                                $route.reload();
                                $mdDialog.hide();
                            } else {
                                dfxMessaging.showWarning(data.data.data);
                            }
                        });
                    } else if ( $scope.cat_type === 'apiso' ) {                
                        dfxApiServiceObjects.editCategory( $scope, $scope.cat_name, newName, $scope.cat_app ).then(function( data ) {                            
                            if ( data.data.data !== 'Current category name already exists!' ) {
                                dfxMessaging.showMessage(data.data.data);                                
                                $scope.getAll();
                                $route.reload();
                                $mdDialog.hide();
                            } else {
                                dfxMessaging.showWarning(data.data.data);
                            }
                        });
                    }
                } else {
                    dfxMessaging.showWarning('Not valid Category Name');
                }
            }
            
            $scope.closeDialog = function() {
                $mdDialog.hide();
            }
        }
    }

    $scope.deleteCategory = function() {
        if ( $scope.cat_type === 'page' ) {
            dfxPages.removeCategory( $scope, $scope.cat_name, $scope.cat_app, $scope.cat_platform ).then(function( data ) {
                if ( data.status && data.status === 200 ) {
                    dfxMessaging.showMessage(data.data.data);
                    $scope.getAll();
                    $route.reload();
                } else {
                    dfxMessaging.showWarning(data.data.data);
                }
            });
        } else if ( $scope.cat_type === 'view' ) {                
            dfxViews.removeCategory( $scope, $scope.cat_name, $scope.cat_app, $scope.cat_platform ).then(function( data ) {
                if ( data.status && data.status === 200 ) {
                    dfxMessaging.showMessage(data.data.data);
                    $scope.getAll();
                    $route.reload();
                } else {
                    dfxMessaging.showWarning(data.data.data);
                }
            });
        } else if ( $scope.cat_type === 'apiso' ) {                
            dfxApiServiceObjects.removeCategory( $scope, $scope.cat_name, $scope.cat_app ).then(function( data ) {
                if ( data.status && data.status === 200 ) {
                    dfxMessaging.showMessage(data.data.data);
                    $scope.getAll();
                    $route.reload();
                } else {
                    dfxMessaging.showWarning(data.data.data);
                }
            });
        }
    }

    $scope.confirmDelete = function($event) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to remove this category?')
            .textContent('Category will be removed from the repository.')
            .ariaLabel('remove service')
            .targetEvent($event)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.deleteCategory();
        }, function() {
        });
    }

    $scope.renameViewBtn = function($event) {
        var parentEl = angular.element(document.body);

        $mdDialog.show({
            parent: parentEl,
            targetEvent: $event,
            clickOutsideToClose: true,
            scope: $scope.$new(),
            templateUrl: 'studioviews/view_rename.html',
            controller: DialogController
        });

        function DialogController($scope, $mdDialog) {
            $scope.rename = function( newName ) {
                var testName = /^[-a-zA-Z0-9_]+$/.test( newName );

                if ( newName && testName ) {
                    dfxViews.getOne( $scope, $scope.targetComponent.application, $scope.targetComponent.name, $scope.targetComponent.platform ).then( function(data) {
                        var to_rename = {
                            "name": $scope.newName.value,
                            "oldname": data.name,
                            "application": data.application,
                            "category": data.category,
                            "platform": data.platform,
                            "src_script": data.src_script
                        }
                        dfxViews.rename( $scope, to_rename ).then( function(data) {
                            dfxMessaging.showMessage('View has been successfully renamed');
                            $scope.getAll();
                            $mdDialog.hide();
                            if ( $location.$$path === ('/view/update/' + to_rename.application + '/' + to_rename.oldname) ) {
                                $location.path('/view/update/' + to_rename.application + '/' + to_rename.name);
                            }
                        }, function(data) {
                            dfxMessaging.showWarning('View with name "' + newName + '" already exists');
                        });
                    });
                } else {
                    dfxMessaging.showWarning('Not valid View Name');
                }
            }

            $scope.closeDialog = function () {
                $mdDialog.hide();
            }

        }
    }

    $scope.copyToBtn = function($event, callback) {
        var parentEl = angular.element(document.body);

        $mdDialog.show({
            parent: parentEl,
            targetEvent: $event,
            clickOutsideToClose: true,
            scope: $scope.$new(),
            templateUrl: 'studioviews/copy_component_dialog.html',
            controller: DialogController
        });

        function DialogController($scope, $mdDialog) {
            $scope.toCopy = {
                "name":              $scope.targetComponent.name,
                "application":       $scope.targetComponent.application,
                "applicationTarget": $scope.targetComponent.application,
                "queryName":         $scope.targetComponent.name,
                "categoryTarget":    $scope.targetComponent.category,
                "type":              "",
                "platform":          $scope.targetComponent.platform
            }
            $scope.validPrefix = true;

            $scope.chooseCategories = function( appName ) {
                $scope.categories = [];
                $scope.appAllRoutes = [];
                dfxApplications.getAppTree( $scope, appName ).then(function( data ) {
                    switch ( $scope.targetComponent.type ) {
                        case 'page': for ( var cat in data.data['pages'][$scope.targetComponent.platform] ) { $scope.categories.push(cat); } break;
                        case 'view': for ( var cat in data.data['views'][$scope.targetComponent.platform] ) { $scope.categories.push(cat); } break;
                        case 'apiso':
                            for ( var cat in data.data['apiServices'] ) {
                                $scope.categories.push(cat);
                                for ( var i = 0; i < data.data['apiServices'][cat].length; i++ ) {
                                    for ( var j = 0; j < data.data['apiServices'][cat][i]['services'].length; j++ ) {
                                        $scope.appAllRoutes.push( data.data['apiServices'][cat][i]['services'][j] );
                                    }
                                }
                            }
                            break;
                    }
                    $scope.toCopy.categoryTarget = $scope.categories[0];
                });
            }

            $scope.chooseCategories( $scope.targetComponent.application );

            if ( $scope.targetComponent.type === 'apiso' ) {
                $scope.validPrefix = false;
                $scope.prefix = {
                    "value": $scope.targetComponent.name
                };
            }

            $scope.copyComponent = function() {
                var nameExp = /([\\/\-+(){}[\]=<>*~`?\! '\"',.;:$@#])/ig,
                    nameRes = nameExp.exec( $scope.toCopy.name);

                if ( $scope.targetComponent.type === 'apiso' ) {
                    var prefixRes = nameExp.exec( $scope.prefix.value );

                    if ( !prefixRes && $scope.prefix.value !=='' ) {
                        var prefixMatch = 0;
                        for ( var i=0; i < $scope.appAllRoutes.length; i++ ){
                            if ( $scope.appAllRoutes[i].indexOf($scope.prefix.value + '/') === 0 ) {
                                ++prefixMatch;
                            }
                        }
                        prefixMatch === 0 ? $scope.validPrefix = true : $scope.validPrefix = false;
                    }
                }

                if ( $scope.validPrefix && !nameRes && !prefixRes && $scope.toCopy.name !== '' ) {
                    switch ( $scope.targetComponent.type ) {
                        case 'page': $scope.toCopy.type = 'screen'; break;
                        case 'view': $scope.toCopy.type = 'widget'; break;
                        case 'apiso':
                            $scope.toCopy.type = 'dataquery';
                            $scope.toCopy.prefix = $scope.prefix.value;
                            break;
                    }

                    dfxApplications.copyObject( $scope, $scope.toCopy ).then(function( data ) {
                        if ( data.data.data.type === 'error' ) {
                            dfxMessaging.showWarning( data.data.data.message );
                        } else {
                            switch ( $scope.targetComponent.type ) {
                                case 'page': dfxMessaging.showMessage( 'Page ' + $scope.toCopy.name + ' has been copyied successfully' ); break;
                                case 'view': dfxMessaging.showMessage( 'View ' + $scope.toCopy.name + ' has been copyied successfully' ); break;
                                case 'apiso': dfxMessaging.showMessage( 'API Service Object ' + $scope.toCopy.name + ' has been copyied successfully' ); break;
                            }
                            $scope.getAll();
                            if (callback != null) {
                                callback();
                            }
                            $mdDialog.hide();
                        }
                    });
                } else {
                    switch ( $scope.targetComponent.type ) {
                        case 'page': dfxMessaging.showWarning( 'Not valid Page Name' ); break;
                        case 'view': dfxMessaging.showWarning( 'Not valid View Name' ); break;
                        case 'apiso':
                            if ( nameRes ) {
                                dfxMessaging.showWarning( 'Not valid API Service Object Name' );
                                break;
                            } else if ( prefixRes || $scope.prefix.value === '' ) {
                                dfxMessaging.showWarning( 'Not valid API Route Prefix' );
                                break;
                            } else {
                                dfxMessaging.showWarning( 'API Route Prefix "' + $scope.prefix.value + '" already exists' );
                                break;
                            }
                    }
                }
            }

            $scope.closeDialog = function() {
                $mdDialog.hide();
            }
        }
    }

    $scope.moveToBtn = function($event) {
        var parentEl = angular.element(document.body);

        $mdDialog.show({
            parent: parentEl,
            targetEvent: $event,
            clickOutsideToClose: true,
            scope: $scope.$new(),
            templateUrl: 'studioviews/move_component_dialog.html',
            controller: DialogController
        });

        function DialogController($scope, $mdDialog) {
            $scope.categories = [];
            $scope.toMove = {};

            switch ( $scope.targetComponent.type ) {
                case 'page':
                    dfxPages.getOne( $scope, $scope.targetComponent.application, $scope.targetComponent.name, $scope.targetComponent.platform ).then(function( data ) {
                        $scope.toMove = data;
                    });
                    dfxPages.getCategories( $scope, $scope.targetComponent.application, $scope.targetComponent.platform ).then(function( data ) {
                        for ( var i = 0; i < data.data[$scope.targetComponent.platform].length; i++ ){
                            $scope.categories.push( data.data[$scope.targetComponent.platform][i].name );
                        }
                    });
                    break;
                case 'view':
                    dfxViews.getOne( $scope, $scope.targetComponent.application, $scope.targetComponent.name, $scope.targetComponent.platform ).then(function( data ) {
                        $scope.toMove = data;
                    });
                    dfxViews.getCategories( $scope, $scope.targetComponent.application, $scope.targetComponent.platform ).then(function( data ) {
                        for ( var i = 0; i < data.data[$scope.targetComponent.platform].length; i++ ){
                            $scope.categories.push( data.data[$scope.targetComponent.platform][i].name );
                        }
                    });
                    break;
                case 'apiso':
                    dfxApiServiceObjects.getOne( $scope, $scope.targetComponent.application, $scope.targetComponent.name ).then(function( data ) {
                        $scope.toMove = data.data.query;
                    });
                    dfxApiServiceObjects.getCategories( $scope, $scope.targetComponent.application ).then(function( data ) {
                        for ( var i = 0; i < data.data.querycats.length; i++ ){
                            $scope.categories.push( data.data.querycats[i].name );
                        }
                    });
                    break;
            }

            $scope.toMove.category = $scope.categories[0];

            $scope.moveComponent = function() {
                switch ( $scope.targetComponent.type ) {
                    case 'page':
                        dfxPages.update( $scope, $scope.toMove ).then(function( data ) {
                            data.result === 'success' ? dfxMessaging.showMessage('Page has been successfully moved') : dfxMessaging.showWarning('There was an error during moving Page');
                            $scope.getAll();
                            $mdDialog.hide();
                            if ( $location.path() === '/page/update/' + $scope.targetComponent.application + '/' + $scope.targetComponent.name ) {
                                $route.reload();
                            }
                        });
                        break;
                    case 'view':
                        dfxViews.update( $scope, $scope.toMove ).then(function( data ) {
                            data.result === 'success' ? dfxMessaging.showMessage('View has been successfully moved') : dfxMessaging.showWarning('There was an error during moving View');
                            $scope.getAll();
                            $mdDialog.hide();
                            if ( $location.path() === '/view/update/' + $scope.targetComponent.application + '/' + $scope.targetComponent.name ) {
                                $route.reload();
                            }
                        });
                        break;
                    case 'apiso':
                        delete $scope.toMove._id;
                        var movedRoutes = [];
                        for ( var key in $scope.toMove.apiRoutes ) {
                            var movedRoute = {};
                            movedRoute.data = $scope.toMove.apiRoutes[key];
                            movedRoute.name = key;
                            movedRoutes.push( movedRoute );
                        }
                        $scope.toMove.apiRoutes = movedRoutes ;
                        dfxApiServiceObjects.updateSo( $scope, $scope.toMove ).then(function( data ) {
                            data.data.result === 'success' ? dfxMessaging.showMessage('API Service Object has been successfully moved') : dfxMessaging.showWarning('There was an error during moving API Service Object');
                            $scope.getAll();
                            $mdDialog.hide();
                            if ( $location.path() === '/api_so/update/' + $scope.targetComponent.application + '/' + $scope.targetComponent.name ) {
                                $route.reload();
                            }
                        });
                        break;
                }
            }

            $scope.closeDialog = function() {
                $mdDialog.hide();
            }
        }
    }

    $scope.copyCatBtn = function($event) {
        var parentEl = angular.element(document.body);

        $mdDialog.show({
            parent: parentEl,
            targetEvent: $event,
            clickOutsideToClose: true,
            scope: $scope.$new(),
            templateUrl: 'studioviews/copy_category_dialog.html',
            controller: DialogController
        });

        function DialogController($scope, $mdDialog) {
            $scope.categoryObject = {
                "applicationName":   $scope.cat_app,
                "applicationTarget": $scope.cat_app,
                "categoryName":      $scope.cat_name,
                "categoryTarget":    $scope.cat_name,
                "type":              ""
            }
            $scope.copyType = '';
            $scope.validPrefix = true;

            switch ( $scope.cat_type ) {
                case 'page': $scope.categoryObject.type = 'screen'; $scope.categoryObject.platform = $scope.cat_platform; $scope.categoryObject.ownerId = ''; $scope.copyType = 'pages'; break;
                case 'view': $scope.categoryObject.type = 'widget'; $scope.categoryObject.platform = $scope.cat_platform; $scope.categoryObject.ownerId = ''; $scope.copyType = 'views'; break;
                case 'apiso':
                    $scope.categoryObject.type = 'dataquery';
                    $scope.categoryObject.prefix = $scope.cat_name;
                    $scope.copyType = 'API Service Objects';
                    $scope.validPrefix = false;
                    break;
            }

            $scope.chooseApp = function( appName ) {
                $scope.categories = [];
                $scope.appAllRoutes = [];
                dfxApplications.getAppTree( $scope, appName ).then(function( data ) {
                    switch ( $scope.cat_type ) {
                        case 'page': for ( var cat in data.data['pages'] ) { $scope.categories.push(cat); } break;
                        case 'view': for ( var cat in data.data['views'] ) { $scope.categories.push(cat); } break;
                        case 'apiso':
                            //var hasServices = 0;
                            //$scope.showPrefix = false;
                            //
                            //if ( data.data.apiServices[$scope.cat_name].length > 0 ) {
                            //    for ( var i = 0; i < data.data.apiServices[$scope.cat_name].length; i++ ) {
                            //        if ( data.data.apiServices[$scope.cat_name][i].services.length > 0 ) {
                            //            ++hasServices;
                            //        }
                            //    }
                            //}
                            //
                            //if ( hasServices > 0 ) {
                            //    $scope.showPrefix = true;
                            //    $scope.validPrefix = false;
                            //} else {
                            //    $scope.validPrefix = true;
                            //}

                            for ( var cat in data.data['apiServices'] ) {
                                $scope.categories.push(cat);
                                for ( var i = 0; i < data.data['apiServices'][cat].length; i++ ) {
                                    for ( var j = 0; j < data.data['apiServices'][cat][i]['services'].length; j++ ) {
                                        $scope.appAllRoutes.push( data.data['apiServices'][cat][i]['services'][j] );
                                    }
                                }
                            }
                            break;
                    }
                });
            }

            $scope.chooseApp( $scope.cat_app );

            $scope.copyCat = function() {
                var nameExp = /([\\/\-+(){}[\]=<>*~`?\! '\"',.;:$@#])/ig,
                    nameRes = nameExp.exec( $scope.categoryObject.categoryTarget );

                if ( $scope.cat_type === 'apiso' ) {
                    var prefixRes = nameExp.exec( $scope.categoryObject.prefix );

                    if ( !prefixRes && $scope.categoryObject.prefix !=='' ) {
                        var prefixMatch = 0;
                        for ( var i=0; i < $scope.appAllRoutes.length; i++ ){
                            if ( $scope.appAllRoutes[i].indexOf($scope.categoryObject.prefix + '/') === 0 ) {
                                ++prefixMatch;
                            }
                        }
                        prefixMatch === 0 ? $scope.validPrefix = true : $scope.validPrefix = false;
                    }
                }

                if ( $scope.validPrefix && !nameRes && !prefixRes && $scope.categoryObject.categoryTarget !== '' ) {
                    dfxApplications.copyCategory( $scope, $scope.categoryObject ).then(function( data ) {
                        dfxMessaging.showMessage( 'Category ' + $scope.categoryObject.categoryTarget + ' has been copyied successfully' );
                        $scope.getAll();
                        $mdDialog.hide();
                    }, function( data ) {
                        var errorData = data.data.error.message;
                        if ( errorData.indexOf('category') === -1 ) {
                            dfxMessaging.showMessage( 'Category ' + $scope.categoryObject.categoryTarget + ' has been copyied successfully but without existing ' + $scope.copyType + '.' );
                            $scope.getAll();
                            $mdDialog.hide();
                        } else {
                            dfxMessaging.showWarning( errorData );
                        }
                    });
                } else if ( $scope.cat_type !== 'apiso' || nameRes ) {
                    dfxMessaging.showWarning('Not valid Category Name');
                } else if ( prefixRes || $scope.categoryObject.prefix === '' ) {
                    dfxMessaging.showWarning( 'Not valid API Route Prefix' );
                } else {
                    dfxMessaging.showWarning( 'API Route Prefix "' + $scope.categoryObject.prefix + '" already exists' );
                }
            }

            $scope.closeDialog = function() {
                $mdDialog.hide();
            }
        }
    }
}]);

dfxStudioApp.controller("dfx_studio_search_controller", [ '$scope', '$routeParams', '$location', 'dfxApplications', function($scope, $routeParams, $location, dfxApplications) {
    var bodyHeight = parseFloat($("body").css('height')),
        searchResults = document.getElementById('search-results');
    $(searchResults).css('height', bodyHeight-110);

    $scope.runSearch = function() {
        if ( $routeParams.searchquery ) {
            dfxApplications.findAll( $routeParams.searchquery ).then( function( data ) {
                $scope.pagesArray = [];
                $scope.viewsArray = [];
                $scope.apiSoArray = [];
                if ( data.data.screens.length > 0 ) {
                    $scope.pagesArray = data.data.screens;
                }
                if ( data.data.widgets.length > 0 ) {
                    $scope.viewsArray = data.data.widgets;
                }
                if ( data.data.queries.length > 0 ) {
                    $scope.apiSoArray = data.data.queries;
                }
            });
        }
    }

    $scope.runSearch();

    $scope.editPage = function( app_name, page_platform, page_name ) {
        $location.path('/page/update/' + app_name + '/' + page_platform + '/' + page_name);
    }

    $scope.editView = function( app_name, view_platform, view_name ) {
        $location.path('/view/update/' + app_name + '/' + view_platform + '/' + view_name);
    }

    $scope.editApiSo = function( app_name, api_so_name ) {
        $location.path('/api_so/update/' + app_name + '/' + api_so_name);
    }
}]);

dfxStudioApp.controller("dfx_studio_category_controller", [ '$scope', '$routeParams', '$location', 'dfxApplications', function($scope, $routeParams, $location, dfxApplications) {
    if ( $location.$$path.indexOf('pages') === 10 ) {
        $scope.entity = 'pages';
    } else if ( $location.$$path.indexOf('views') === 10 ) {
        $scope.entity = 'views';
    } else if ( $location.$$path.indexOf('api_so') === 10  ) {
        $scope.entity = 'apiServices';
    }

    $scope.app_name = $routeParams.appname;
    if ( $routeParams.platform ) {
        $scope.cat_platform = $routeParams.platform;
    }
    $scope.category = $routeParams.categoryname ? $routeParams.categoryname : 'Default';
    $scope.table_data = [];

    dfxApplications.getAppTree( $scope, $scope.app_name ).then(function( data ) {
        if ( $scope.entity === 'apiServices' ) {
            for ( var cat in data.data['apiServices'] ) {
                if ( cat === $scope.category ) {
                    $scope.table_data = data.data['apiServices'][cat];
                }
            }
        } else if ( $scope.entity === 'pages' || $scope.entity === 'views' ) {
            $scope.table_data = data.data[$scope.entity][$scope.cat_platform][$scope.category];
        }
    });
    
    $scope.edit = function( name ) {
        switch ( $scope.entity ) {
            case 'pages':       $location.path('/page/update/' + $scope.app_name + '/' + $scope.cat_platform + '/'+ name); break;
            case 'views':       $location.path('/view/update/' + $scope.app_name + '/' + $scope.cat_platform + '/' + name); break;
            case 'apiServices': $location.path('/api_so/update/' + $scope.app_name + '/' + name); break;
        }
    };

    $scope.addEntity = function( name, platform ) {
        switch ( $scope.entity ) {
            case 'pages':       $location.path('/page/create/' + $scope.app_name + '/' + platform + '/' + name); break;
            case 'views':       $location.path('/view/create/' + $scope.app_name + '/' + platform + '/' + name); break;
            case 'apiServices': $location.path('/api_so/create/' + $scope.app_name + '/' + name); break;
        }
    };
}]);

dfxStudioApp.controller("dfx_studio_platform_controller", [ '$scope', '$mdSidenav', 'dfxMessaging', '$mdDialog', '$timeout', function($scope, $mdSidenav, dfxMessaging, $mdDialog, $timeout) {
    $scope.developers = {};
    $scope.cloud = {};
    $scope.$watch('$parent.platform_section', function(newVal){
        var platform_tabs = ['developers','cloud','settings'];
        if(platform_tabs.indexOf(newVal) !== -1){
            $scope.section = newVal;
            $timeout(function(){
                $scope.platformTabs = $('#dfx-studio-main-content > div > md-tabs > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper').children();
                $($scope.platformTabs[platform_tabs.indexOf(newVal)]).trigger('click');
            },0);
        }
    });

    $scope.defineSection = function(section){
        for(var i= 0; i < 2; i++){
            if($scope.platformTabs && $($scope.platformTabs[i]).hasClass('md-active')){
                $scope.section = section;
            }
        }
    };
}]);

dfxStudioApp.controller("dfx_studio_cloud_controller", [ '$scope', 'dfxPlatformBluemix', 'dfxPhoneGapProperties', '$mdSidenav', 'dfxMessaging', '$mdDialog', '$timeout', 'dfxDeployment', 'dfxApplications', function($scope, dfxPlatformBluemix, dfxPhoneGapProperties, $mdSidenav, dfxMessaging, $mdDialog, $timeout, dfxDeployment, dfxApplications) {
    var parentScope = $scope.$parent;
    parentScope.cloud = $scope;
    $scope.bluemix = {};
    $scope.bluemix.credentials = {
        email:                  "",
        password:               "",
        selected_organization:  "",
        selected_space:         ""
    };

    // PhoneGap
    var tenantId = $scope.$parent.$parent.tenant_id;
    dfxPhoneGapProperties.getData(tenantId).then(function(tenant){
        $scope.phoneGapLogin = tenant.phoneGapLogin;
        $scope.phoneGapPassword = tenant.phoneGapPassword;
    });
    $scope.savePhoneGapData = function() {
        var data = {"phoneGapLogin" : $('#phoneGapLogin').val(), "phoneGapPassword" : $('#phoneGapPassword').val()};
        dfxPhoneGapProperties.saveData(tenantId, data).then(function(){
            dfxMessaging.showMessage('PhoneGap properties has been successfully updated.');
        });
    }

    GLOBAL_SOCKET.on('tenant_'+ $scope.tenant_id +'_bmImageBuild', function(data){
        if (data.result === 'success')  {
            $scope.$apply(function(){
                $scope.bluemix.images.map(function(image){
                    if ((image.clearImageName === data.clearImageName) && (image.version == data.version)){
                        image.created = (new Date).toISOString();
                        delete image.started;
                    }
                });
            })
        }
    });

    $scope.bluemix.toggleImageApps = function(index){
        if($scope.bluemix.images[index].show_apps){
            $scope.bluemix.images[index].show_apps = false ;
            $scope.bluemix.images_counter = $scope.bluemix.images_counter -1;
        }else{
            $scope.bluemix.images[index].show_apps = true ;
            $scope.bluemix.images_counter = $scope.bluemix.images_counter +1;
        }
    };

    $scope.bluemix.closeSidenav = function(){
        var sideNavInstance = $mdSidenav('side_nav_left');
        sideNavInstance.toggle();
    };

    $scope.getAppsBuilds = function(){
        dfxPlatformBluemix.getAppsBuilds().then(function(data){
            var apps = data.data;
            for(var i = 0; i < apps.length; i++){
                for(key in apps[i]){
                    $scope.bluemix.new_image.applications.push({
                        application_name: key,
                        builds: apps[i][key],
                        display_builds: false
                    });
                }
            }
            $scope.bluemix.builds_counter = 0;
        });
    };

    $scope.bluemix.saveImage = function(){
        $scope.bluemix.disabled_button = true ;
        $scope.bluemix.show_sidenav_content = false;
        var alert = '';
        if ($.isEmptyObject($scope.bluemix.new_image.name)) {
            alert = "Image name cannot be empty";
        }else if (!/^[-a-zA-Z0-9]+$/.test($scope.bluemix.new_image.name)) {
            alert = "Image name can have only letters, numbers or dash symbols";
        }else if($.isEmptyObject($scope.bluemix.new_image.version)){
            alert = "Image version cannot be empty";
        }else if (!/^[-a-zA-Z0-9]+$/.test($scope.bluemix.new_image.version)) {
            alert = "Image version can have only letters, numbers or dash symbols";
        }
        if(alert!==''){
            $scope.bluemix.disabled_button = false ;
            $scope.bluemix.show_sidenav_content = true;
            dfxMessaging.showWarning(alert) ;
            return;
        }
        var is_unique = true;
        for(var z = 0; z < $scope.bluemix.images.length; z++){
            if(($scope.bluemix.images[z].clearImageName + $scope.bluemix.images[z].version) === ($scope.bluemix.new_image.name + $scope.bluemix.new_image.version)){
                is_unique = false;
            }
        }
        if(is_unique){
            var result = [];
            var content = [];
            for(var i= 0; i < $scope.bluemix.new_image.applications.length; i++){
                for(var j= 0; j < $scope.bluemix.new_image.applications[i].builds.length; j++){
                    if($scope.bluemix.new_image.applications[i].builds[j].selected){
                        $scope.bluemix.new_image.applications[i].selected = true;
                        result.push({name: $scope.bluemix.new_image.applications[i].application_name,
                            build: ($scope.bluemix.new_image.applications[i].builds[j].app_version + '.' +  $scope.bluemix.new_image.applications[i].builds[j].build_number),
                            platform : $scope.bluemix.new_image.applications[i].builds[j].platform});
                    }
                }
            }

            for(var q= 0; q < $scope.bluemix.new_image.applications.length; q++){
                if($scope.bluemix.new_image.applications[q].selected){
                    content.push({
                        name: $scope.bluemix.new_image.applications[q].application_name,
                        builds: [],
                        display_builds: false
                    })
                    for(var t =0; t < $scope.bluemix.new_image.applications[q].builds.length; t++){
                        if($scope.bluemix.new_image.applications[q].builds[t].selected){
                            content[content.length - 1].builds.push($scope.bluemix.new_image.applications[q].builds[t].app_version + '.' + $scope.bluemix.new_image.applications[q].builds[t].build_number);
                        }
                    }
                }
            }
            $scope.bluemix.builds_counter = 0;

            dfxPlatformBluemix.saveImage($scope.bluemix.new_image.name, $scope.bluemix.new_image.version, result).then(function(){
                $scope.bluemix.disabled_button = false ;
                $scope.bluemix.show_sidenav_content = true;
                dfxMessaging.showMessage('Started creating Bluemix Image!');
                $scope.bluemix.images.push({
                    clearImageName:     $scope.bluemix.new_image.name,
                    version:            $scope.bluemix.new_image.version,
                    content:            content
                })
                var sideNavInstance = $mdSidenav('side_nav_left');
                sideNavInstance.toggle();
            }, function(){
                $scope.bluemix.disabled_button = false ;
                $scope.bluemix.show_sidenav_content = true;
            });
        }else{
            dfxMessaging.showWarning('Can\'t save. Image with such name and version is already exist!');
            $scope.bluemix.disabled_button = false ;
            $scope.bluemix.show_sidenav_content = true;
        }
    };

    $scope.bluemix.confirmImageDelete = function(ev, image, index) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to delete this image?')
            .textContent('Image will be removed from Bluemix.')
            .ariaLabel('remove image')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.bluemix.deleteImage(image, index);
        }, function() {
        });
    };

    $scope.bluemix.deleteImage = function(image, index){
        dfxPlatformBluemix.deleteImage(image.clearImageName, image.version).then(function(){
            $scope.bluemix.images.splice(index, 1);
            dfxMessaging.showMessage('Image data has been successfully deleted.');
        }, function(){
            dfxMessaging.showWarning('Can\'t delete.');
        });
    };

    $scope.bluemix.runImage = function(image){
        /*dfxPlatformBluemix.runImage().then(function(){

         });*/
    };

    $scope.bluemix.toggleNewImageBuilds = function(index, val){
        if($scope.bluemix.new_image.applications[index].display_builds){
            $scope.bluemix.new_image.applications[index].display_builds = false;
            $scope.bluemix.builds_counter = $scope.bluemix.builds_counter - 1;
        }else{
            $scope.bluemix.new_image.applications[index].display_builds = true;
            $scope.bluemix.builds_counter = $scope.bluemix.builds_counter + 1;
        }
    };

    $scope.initBluemixImage = function(){
        $scope.bluemix.show_sidenav_content = true;
        $scope.bluemix.new_image = {
            applications :      [],
            name:               "",
            version:            ""
        };
        $scope.getAppsBuilds();
        var sideNavInstance = $mdSidenav('side_nav_left');
        sideNavInstance.toggle();
    };

    dfxPlatformBluemix.getUser().then(function(res){
        var user = res.data.data ;
        if(user.email){
            $scope.bluemix.credentials.email = user.email ;
            $scope.bluemix.logged_in = true;
            $scope.bluemix.authenticated = false;
            $scope.bluemix.organizations_list = user.organizations ;
            $scope.bluemix.credentials.selected_organization = user.choosenOrg ;
            $scope.bluemix.space_list = user.spaces ;
            $scope.bluemix.credentials.selected_space = user.choosenSpace ;
            $scope.bluemix.space_spinner = true ;
                dfxPlatformBluemix.loginCF().then(function(){
                    dfxPlatformBluemix.remoteImagesList().then(function(images){
                        $scope.bluemix.images = images ;
                        for(var x = 0; x < $scope.bluemix.images.length; x++){
                            $scope.bluemix.images[x].show_apps = false ;
                        }
                        $scope.bluemix.images_counter = 0;
                        $scope.bluemix.space_spinner = false ;
                        $scope.bluemix.authenticated = true ;
                    });
                });
        }else{
            $scope.bluemix.logged_in = false;
            $scope.bluemix.authenticated = false ;
        }

    }, function(){

    });

    /*
    var data = {
        email : "vova@interactive-clouds.com",
        pass  : "anSp5G5zzy9guIkP1sKPy6Sd"
    };
   */

    $scope.bluemix.logout = function(){
        dfxPlatformBluemix.bluemixLogout().then(function(res){
            $scope.bluemix.credentials = {}
            $scope.bluemix.organizations_list = "" ;
            $scope.bluemix.space_list = "" ;
            $scope.bluemix.authenticated = false ;
            $scope.bluemix.logged_in = false ;
        });
    };

    $scope.bluemix.getOrgsList = function(){
        dfxPlatformBluemix.getOrgsList().then(function(res){
            $scope.bluemix.organizations_list = res.data.data;
            if(Object.keys($scope.bluemix.organizations_list).length === 1){
                $scope.bluemix.credentials.selected_organization = Object.keys($scope.bluemix.organizations_list)[0];
                $scope.bluemix.setChoosenOrg($scope.bluemix.credentials.selected_organization);
            }
        }, function(){
            $scope.bluemix.organization_spinner = false ;
        });
    };

    $scope.bluemix.setChoosenOrg = function(guid){
        $scope.bluemix.organization_spinner = true ;
        dfxPlatformBluemix.setChoosenOrg(guid).then(function(){
            $scope.bluemix.getSpacesList() ;
        }, function(){
            $scope.bluemix.organization_spinner = false ;
        });
    };

    $scope.bluemix.getSpacesList = function(){
        dfxPlatformBluemix.getSpacesList().then(function(res){
            $scope.bluemix.organization_spinner = false ;
            $scope.bluemix.space_list = res.data.data ;
            if(Object.keys($scope.bluemix.space_list).length === 1){
                $scope.bluemix.credentials.selected_space = Object.keys($scope.bluemix.space_list)[0];
                $scope.bluemix.setChoosenSpace($scope.bluemix.credentials.selected_space);
            }
        });
    };

    $scope.bluemix.setChoosenSpace = function(guid){
        $scope.bluemix.space_spinner = true ;
        dfxPlatformBluemix.setChoosenSpace(guid).then(function(){
            dfxPlatformBluemix.loginCF().then(function(){
                dfxPlatformBluemix.remoteImagesList().then(function(images){
                    $scope.bluemix.images = images ;
                    for(var x = 0; x < $scope.bluemix.images.length; x++){
                        $scope.bluemix.images[x].show_apps = false ;
                    }
                    $scope.bluemix.images_counter = 0;
                    $scope.bluemix.space_spinner = false ;
                    $scope.bluemix.authenticated = true ;
                });
            });
        });
    };

    $scope.bluemix.loginDialog = function() {
        $mdDialog.show({
            scope: $scope.$new(),
            controller: DialogController,
            templateUrl: 'studioviews/bluemix_login_dialog.html',
            parent: angular.element(document.body),
            clickOutsideToClose:true
        }).then(function() {

        }, function() {
            // if cancel
        });

        function DialogController($scope, $mdDialog) {
            $scope.bluemix.login = function(){
                $scope.bluemix.email_pass_spinner = true;
                var data = {
                    email : $scope.bluemix.credentials.email,
                    pass  : $scope.bluemix.credentials.password
                };
                dfxPlatformBluemix.bluemixLogin(data).then(function(res){
                    $scope.bluemix.logged_in = true ;
                    $scope.bluemix.email_pass_spinner = false;
                    dfxMessaging.showMessage('You have logged in successfully.Choose organization and space in order to finish authentication.') ;
                    $scope.bluemix.getOrgsList();
                }, function(){
                    $scope.bluemix.logged_in = false ;
                    $scope.bluemix.email_pass_spinner = false;
                    dfxMessaging.showWarning('The email address or password you entered is not valid.') ;
                });
            };
            $scope.bluemix.hide = function() {
                $mdDialog.hide();
            };
            $scope.bluemix.cancel = function() {
                $mdDialog.cancel();
            };
        }
    };
}]);

dfxStudioApp.controller("dfx_studio_platform_settings_controller", [ '$scope', 'dfxGoogleMapProperties','dfxMessaging', function($scope, dfxGoogleMapProperties, dfxMessaging) {
    var tenantId = $scope.$parent.$parent.tenant_id;
    dfxGoogleMapProperties.getAPIKey(tenantId).then(function(tenant){
        $scope.googleAPIKey = tenant.googleAPIKey;
    });
    $scope.saveGoogleKey = function() {
        dfxGoogleMapProperties.putAPIKey(tenantId, $('#googleAPIKey').val()).then(function(){
            dfxMessaging.showMessage('Google API key has been successfully updated.');
        });
    }
}]);

dfxStudioApp.controller("dfx_studio_developers_controller", [ '$scope', 'dfxPlatformDevelopers', '$mdSidenav', 'dfxMessaging', '$mdDialog', function($scope, dfxPlatformDevelopers, $mdSidenav, dfxMessaging, $mdDialog) {
    var parentScope = $scope.$parent;
    parentScope.developers = $scope;
    $scope.users = [];
    $scope.current_user = {};
    $scope.new_user = {};
    $scope.isSidenavOpen = false;

    $scope.initNewUser = function(){
        $scope.operation = 'create';
        $scope.new_user.login = "";
        $scope.new_user.firstName = "";
        $scope.new_user.lastName = "";
        $scope.new_user.email = "";
        $scope.new_user.pass = "";
        $scope.new_user.repeat_pass = "";
        $scope.new_user.pass_matching = false;
        $scope.new_user.roles = {};
        $scope.new_user.roles.default = 'admin';
        $scope.new_user.roles.list = [];
        $scope.new_user.admin_role = true;
        $scope.new_user.dev_role = false;
        $scope.new_user.show_pass_message = false;

        var sideNavInstance = $mdSidenav('side_nav_left');
        sideNavInstance.toggle();
    };

    $scope.getUsers = function(){
        dfxPlatformDevelopers.getUsers($scope.app_name).then(function(data){
            $scope.users = data;
        });
    };

    $scope.getUsers();

    $scope.editCurrentUser = function(user){
        $scope.operation = 'update';
        $scope.current_user = user;
        $scope.current_user.pass_changed = false;
        $scope.current_user.new_pass = "newpass";
        $scope.current_user.repeat_pass = "";
        $scope.current_user.pass_matching = false;
        $scope.current_user.show_pass_message = false;

        if(user.roles.list.indexOf('admin') !== -1){
            $scope.current_user.admin_role = true;
        }else{
            $scope.current_user.admin_role = false;
        }

        if(user.roles.list.indexOf('developer') !== -1){
            $scope.current_user.dev_role = true;
        }else{
            $scope.current_user.dev_role = false;
        }
        var sideNavInstance = $mdSidenav('side_nav_left');
        sideNavInstance.toggle();
    };

    $scope.closeSidenav = function(){
        var sideNavInstance = $mdSidenav('side_nav_left');
        sideNavInstance.toggle();
    };

    $scope.changePass = function(){
        $scope.current_user.pass_changed = true;
    };

    $scope.showPassMessage = function(user){
        user.show_pass_message = true;
    };

    $scope.updateUser = function(){
        var roles_list = [];
        if($scope.current_user.admin_role){
            roles_list.push('admin');
        }
        if($scope.current_user.dev_role){
            roles_list.push('developer');
        }
        if(roles_list.length !==0){
            $scope.current_user.roles.list = roles_list;
        }
        dfxPlatformDevelopers.updateUser($scope.current_user, $scope.current_user.new_pass, $scope.current_user.pass_changed).then(function(){
            var sideNavInstance = $mdSidenav('side_nav_left');
            sideNavInstance.toggle();
            dfxMessaging.showMessage('Developer data has been successfully updated.');
        }, function(){
            dfxMessaging.showWarning('Can\'t update developer data.');
        });
    };

    $scope.createUser = function(){
        var alert = '';
        if ($scope.new_user.login.indexOf(" ") != -1) {
            alert = "Login cannot have empty spaces";
        }
        else if ($.isEmptyObject($scope.new_user.login)) {
            alert = "Login cannot be empty";
        }
        else if (!/^[a-zA-Z0-9-_.]+$/.test($scope.new_user.login)) {
            alert = "Login can have only letters, numbers, underscore or dash symbols";
        }
        if (alert) {
            dfxMessaging.showWarning(alert);
        } else {
            var is_unique = true;
            for(var i=0; i < $scope.users.length; i++){
                if($scope.users[i].login === $scope.new_user.login){
                    is_unique = false;
                    break;
                }
            }
            if(is_unique){
                var roles_list = [];
                if($scope.new_user.admin_role){
                    roles_list.push('admin');
                }
                if($scope.new_user.dev_role){
                    roles_list.push('developer');
                }
                if(roles_list.length !==0){
                    $scope.new_user.roles.list = roles_list;
                }
                dfxPlatformDevelopers.createUser($scope.new_user).then(function(){
                    var sideNavInstance = $mdSidenav('side_nav_left');
                    var added_user = $scope.new_user;
                    $scope.new_user = {};
                    $scope.users.push(added_user);
                    sideNavInstance.toggle();
                    dfxMessaging.showMessage('New developer has been successfully created.');
                }, function(res){
                    dfxMessaging.showWarning('Can\'t create new developer. ' + res.data.data);
                });
            }else{
                dfxMessaging.showWarning("Developer with such login is already exist!");
            }
        }
    };

    $scope.confirmUserDelete = function(ev, userlogin) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to delete this developer?')
            .textContent('Developer will be removed from the repository.')
            .ariaLabel('remove user')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.deleteUser(userlogin);
        }, function() {
        });
    };

    $scope.deleteUser = function(userlogin){
        dfxPlatformDevelopers.deleteUser(userlogin).then(function(){
            for(var i =0; i < $scope.users.length; i++){
                if($scope.users[i].login === userlogin){
                    $scope.users.splice(i, 1);
                    break;
                }
            }
            dfxMessaging.showMessage('Developer data has been successfully deleted.');
        });
    };

    $scope.$watch("current_user.repeat_pass", function(newValue){
        if(newValue){
            if(newValue===$scope.current_user.new_pass){
                $scope.current_user.pass_matching = true;
            }else{
                $scope.current_user.pass_matching = false;
            }
        }
    });

    $scope.$watch("new_user.repeat_pass", function(newValue){
        if(newValue){
            if(newValue===$scope.new_user.pass){
                $scope.new_user.pass_matching = true;
            }else{
                $scope.new_user.pass_matching = false;
            }
        }
    });

    $scope.$watch("current_user.roles.default", function(newValue){
        if(newValue){
            if(newValue === 'admin'){
                $scope.current_user.admin_role = true;
                $scope.current_user.admin_disabled = true;
            }else{
                $scope.current_user.admin_disabled = false;
            }
            if(newValue === 'developer'){
                $scope.current_user.dev_role = true;
                $scope.current_user.dev_disabled = true;
            }else{
                $scope.current_user.dev_disabled = false;
            }
        }
    });

    $scope.$watch("new_user.roles.default", function(newValue){
        if(newValue){
            if(newValue === 'admin'){
                $scope.new_user.admin_role = true;
                $scope.new_user.admin_disabled = true;
            }else{
                $scope.new_user.admin_disabled = false;
            }
            if(newValue === 'developer'){
                $scope.new_user.dev_role = true;
                $scope.new_user.dev_disabled = true;
            }else{
                $scope.new_user.dev_disabled = false;
            }
        }
    });

    $scope.$watch('isSidenavOpen', function(newValue){
        if(!newValue){
            $scope.getUsers();
        }
    });

}]);


dfxStudioApp.controller("dfx_studio_home_controller", [ '$scope', 'dfxStats', '$timeout', '$compile', '$window', '$route', '$routeParams', '$mdDialog', 'dfxApplications', 'dfxViews', 'dfxPages', 'dfxApiServiceObjects', 'dfxMessaging', '$location', function($scope, dfxStats, $timeout, $compile, $window, $route, $routeParams, $mdDialog, dfxApplications, dfxViews, dfxPages, dfxApiServiceObjects, dfxMessaging, $location) {
    $scope.display_activity_panel = false;
    $scope.platform_stats = {};
    $scope.chart_pages_data = [];
    $scope.chart_pages_option = {
        chart: {
            type: 'discreteBarChart',
            margin : {
                top: 20,
                right: 20,
                bottom: 50,
                left: 55
            },
            x: function(d){return d.label;},
            y: function(d){return d.value;},
            showValues:  true,
            valueFormat: function (d) {
                return d3.format(',.')(d);
            },
            duration:    500,
            xAxis:       {
                axisLabel: 'Components',
                axisLabelDistance: -5
            },
            yAxis:       {
                axisLabel: 'Count',
                axisLabelDistance: -5,
                tickFormat: function (d) {
                    return d3.format(',.')(d);
                }
            }
        },
        title: {
            text: 'App Statistics',
            enable: true
        }
    };

    dfxStats.getMain( $scope ).then( function(data) {
        if (data.apps != null) {
            for (var i=0; i<data.apps.length; i++) {
                data.apps[i].chartData = [
                    {
                        key: "Cumulative Components",
                        values: [
                            {
                                "label" : "Pages" ,
                                "value" : data.apps[i].pages.count
                            },
                            {
                                "label" : "Views" ,
                                "value" : data.apps[i].views.count
                            },
                            {
                                "label" : "API" ,
                                "value" : data.apps[i].apiServices.count
                            }
                        ]}
                ];
            }
        }
        $scope.platform_stats = data;
    });

    $scope.loadActivity = function(app_name, channel) {
        $scope.display_activity_panel = true;
    };

    $scope.navigateToApp = function(appname){
        if(appname!=='Shared Catalog'){
            $scope.loadStudioView(appname + '/configuration/general') ;
        }
    };

    $scope.entity = $routeParams.entity === 'api_so' ? 'apiServices' : $routeParams.entity;
    $scope.appname = $routeParams.appname ;

    if($scope.appname){
        $timeout(function(){
            dfxApplications.getAppTree( $scope, $scope.appname ).then(function( data ) {
                var entityData = data.data[$scope.entity];
                $scope.table_data = [];
                if ( $scope.entity === 'pages' || $scope.entity === 'views' ) {
                    for ( var platform in entityData ) {
                        for ( var cat in entityData[platform] ) {
                            for ( var i=0; i < entityData[platform][cat].length; i++ ) {
                                var table_data_item = entityData[platform][cat][i];
                                table_data_item.category = cat;
                                table_data_item.platform = platform;
                                $scope.table_data.push(table_data_item);
                            }
                        }
                    }
                } else if ( $scope.entity === 'apiServices' ) {
                    for(var k in entityData){
                        for(var n=0; n < entityData[k].length; n++){
                            $scope.table_data.push({
                                category    :  k,
                                name        :  entityData[k][n].name,
                                description :  entityData[k][n].description
                            });
                        }
                    }
                }
            });
        },0);
    }

    $scope.navigateToPages = function(appname){
        $scope.appname = appname;
        if(appname !== 'Shared Catalog'){
            var arr = $scope.platform_stats.apps ;
            for(var j=0; j < arr.length; j++){
                if(arr[j].name === appname && arr[j]){
                    $scope.loadStudioView('/categories/pages/' + appname);
                    break;
                }
            }
        }
    };

    $scope.navigateToViews = function(appname){
        $scope.appname = appname;
        if(appname !== 'Shared Catalog'){
            var arr = $scope.platform_stats.apps ;
            for(var j=0; j < arr.length; j++){
                if(arr[j].name === appname && arr[j]){
                    $scope.loadStudioView('/categories/views/' + appname);
                    break;
                }
            }
        }
    };

    $scope.navigateToApis = function(appname){
        $scope.appname = appname;
        if(appname !== 'Shared Catalog'){
            var arr = $scope.platform_stats.apps ;
            for(var j=0; j < arr.length; j++){
                if(arr[j].name === appname && arr[j]){
                    $scope.loadStudioView('/categories/api_so/' + appname);
                    break;
                }
            }
        }
    };

    $scope.addEntity = function() {
        switch ( $scope.entity ) {
            case 'pages':       $location.path('/page/create/' + $scope.appname + '/web/Default'); break;
            case 'views':       $location.path('/view/create/' + $scope.appname + '/web/Default'); break;
            case 'apiServices': $location.path('/api_so/create/' + $scope.appname + '/Default'); break;
        }
    };

    $scope.edit = function( item ) {
        switch ( $scope.entity ) {
            case 'pages':       $location.path('/page/update/' + $scope.appname + '/' + item.platform + '/' + item.name); break;
            //case 'views':       $location.path('/view/update/' + $scope.appname + '/' + item.platform + '/' + item.name); break;
            case 'views':
                window.localStorage.removeItem('pagePreviewName');
                $window.open( '/studio/widget/' + item.platform + '/' + $scope.appname + '/' + item.name + '/index.html', '_blank' );
                break;
            case 'apiServices': $location.path('/api_so/update/' + $scope.appname + '/' + item.name); break;
        }
    };

    $scope.copyEntity = function( item ) {
        $scope.$parent.targetComponent = {
            "name":        item.name,
            "application": $scope.appname,
            "category":    item.category,
        }
        if ($scope.entity=='views') {
            $scope.$parent.targetComponent.type = 'view';
            $scope.$parent.targetComponent.platform = item.platform;
        } else if ($scope.entity=='pages') {
            $scope.$parent.targetComponent.type = 'page';
            $scope.$parent.targetComponent.platform = item.platform;
        } else {
            $scope.$parent.targetComponent.type = 'apiso';
        }
        $scope.copyToBtn(null, function() {
            $route.reload();
        });
    };

    $scope.infoEntity = function( item ) {
        $location.path('/view/update/' + $scope.appname + '/' + item.platform + '/' + item.name);
    };


    $scope.removeEntity = function( item, ev ) {
        $scope.$parent.targetComponent = {
            "name":        item.name,
            "application": $scope.appname,
            "category":    item.category,
        }
        if ($scope.entity=='views') {
            $scope.$parent.targetComponent.type = 'view';
            $scope.$parent.targetComponent.platform = item.platform;
        } else if ($scope.entity=='pages') {
            $scope.$parent.targetComponent.type = 'page';
            $scope.$parent.targetComponent.platform = item.platform;
        } else {
            $scope.$parent.targetComponent.type = 'apiso';
        }
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want delete this component?')
            .textContent('The component will be removed permanently from the repository.')
            .ariaLabel('delete component')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            if ($scope.entity=='views') {
                dfxViews.delete( $scope, $scope.$parent.targetComponent ).then( function(data) {
                    dfxMessaging.showMessage( 'The view has been deleted' );
                    $scope.getAll();
                    $route.reload();
                });
            } else if ($scope.entity=='pages') {
                dfxPages.delete( $scope, $scope.$parent.targetComponent ).then( function(data) {
                    dfxMessaging.showMessage( 'The page has been deleted' );
                    $scope.getAll();
                    $route.reload();
                });
            } else {
                dfxApiServiceObjects.deleteSo( $scope, $scope.$parent.targetComponent ).then( function(data) {
                    dfxMessaging.showMessage( 'The API Service Object has been deleted' );
                    $scope.getAll();
                    $route.reload();
                });
            }
        }, function() {
        });
    };

    $timeout(function(){
        var arr = $scope.platform_stats.apps;
        if (arr!=null) {
            for(var i =0; i < arr.length; i++ ){

                var bar = $('#chart_' + arr[i].name.replace(' ', '_') + ' > nvd3 > svg > g > g > g.nv-barsWrap.nvd3-svg > g > g > g > g > g:nth-child(1) > rect').parent();
                var barHtml = bar.html();
                if(barHtml){
                    barHtml = barHtml.replace('class="discreteBar"', 'class="discreteBar" ng-click="navigateToPages(\'' + arr[i].name.replace(' ', '_') + '\')" style="cursor: pointer;"') ;
                    bar.html(barHtml);
                    $compile(bar.contents())($scope);
                }

                var bar = $('#chart_' + arr[i].name.replace(' ', '_') + ' > nvd3 > svg > g > g > g.nv-barsWrap.nvd3-svg > g > g > g > g > g:nth-child(2) > rect').parent();
                var barHtml = bar.html();
                if(barHtml){
                    barHtml = barHtml.replace('class="discreteBar"', 'class="discreteBar" ng-click="navigateToViews(\'' + arr[i].name.replace(' ', '_') + '\')" style="cursor: pointer;"') ;
                    bar.html(barHtml);
                    $compile(bar.contents())($scope);
                }

                var bar = $('#chart_' + arr[i].name.replace(' ', '_') + ' > nvd3 > svg > g > g > g.nv-barsWrap.nvd3-svg > g > g > g > g > g:nth-child(3) > rect').parent();
                var barHtml = bar.html();
                if(barHtml){
                    barHtml = barHtml.replace('class="discreteBar"', 'class="discreteBar" ng-click="navigateToApis(\'' + arr[i].name.replace(' ', '_') + '\')" style="cursor: pointer;"') ;
                    bar.html(barHtml);
                    $compile(bar.contents())($scope);
                }
            }
        }
    }, 1000);

    var bodyHeight = parseFloat($("body").css('height'));
    $("#home-page-apps").css('height', bodyHeight - 59);
}]);

dfxStudioApp.controller("dfx_studio_stackoverflow_controller", [ '$scope', '$window', function($scope, $window) {
    $scope.serch_parameters = ['dreamface'] ;
    $scope.serchOnStackoverflow = function(){
        var parameters = $scope.serch_parameters.join('+') ;
        var path = 'http://stackoverflow.com/search?q=' + parameters;
        $window.open(path, "_blank") ;
    };
}]);

dfxStudioApp.controller("dfx_studio_samples_controller", [ '$scope', '$http', '$window', '$mdDialog', 'dfxMessaging', 'dfxSamples', 'dfxApplications', 'dfxViews', function($scope, $http, $window, $mdDialog, dfxMessaging, dfxSamples, dfxApplications, dfxViews) {
    
    $scope.categories = [];
    $scope.samples = [];
    $scope.isCategoriesLoaded = false;
    $scope.isCategoryLoaded = false;
    $scope.isSampleLoaded = false;

    dfxSamples.contents( $scope, '' ).then( function(contents) {
        if (contents.data != null) {
            for (var i=0; i<contents.data.length; i++) {
                if (contents.data[i].type=='dir') {
                    $scope.loadCategory( contents.data[i].name, contents.data[i].path );
                }
            }
        }
        $scope.isCategoriesLoaded = true;
    });

    $scope.loadCategory = function(cat_name, cat_path) {
        $scope.isCategoryLoaded = false;
        dfxSamples.contents( $scope, cat_path ).then( function(contents) {
            for (var i=0; i<contents.data.length; i++) {
                if (contents.data[i].type=='dir') {
                    $scope.loadSample( contents.data[i].name, contents.data[i].path, cat_name );
                } else {
                    dfxSamples.contents( $scope, contents.data[i].path ).then( function(file_contents) {
                        $scope.loadFile( file_contents.data.url, $scope.categories, cat_name );
                    });
                }
            }
            $scope.isCategoryLoaded = true;
        });
    };

    $scope.loadSample = function(sample_name, sample_path, cat_name) {
        $scope.isSampleLoaded = false;
        dfxSamples.contents( $scope, sample_path ).then( function(contents) {
            for (var i=0; i<contents.data.length; i++) {
                if (contents.data[i].type=='file') {
                    dfxSamples.contents( $scope, contents.data[i].path ).then( function(file_contents) {
                       $scope.loadFile( file_contents.data.url, $scope.samples, sample_name, cat_name ); 
                    });
                }
            }
            $scope.isSampleLoaded = true;
        });
    };

    $scope.loadFile = function(file_url, collection, property, cat_name) {
        $http.get( file_url ).then( function(file_contents) {
            var new_item = {
                'name': property,
                'content': JSON.parse(atob(file_contents.data.content)),
                'category': cat_name
            };
            collection.push(new_item);
        });
    };

    $scope.readDocumentation = function(sample) {
        $window( sample.content.documentation, '_blank' );
    };

    $scope.openInstallSample = function(sample) {
        $scope.selected_sample = sample;
        dfxApplications.getAll( $scope ).then( function(apps) {
            $scope.applications = apps.data;
            $mdDialog.show({
                scope: $scope,
                controller: DialogController,
                templateUrl: 'studioviews/samples_install_dialog.html',
                parent: angular.element(document.body),
                clickOutsideToClose:true
            }).then(function() {

            }, function() {
                // if cancel

            });
        });
    };

    function DialogController($scope, $mdDialog) {
        $scope.install = function() {
            $mdDialog.hide();
            $scope.installSample();
        };
        $scope.hide = function() {
            $mdDialog.hide();
        };
        $scope.cancel = function() {
            $mdDialog.cancel();
        };
    }

    $scope.installSample = function() {
        // Install View
        dfxSamples.contents( $scope, $scope.selected_sample.category + '/' + $scope.selected_sample.name + '/view/source.json' ).then( function(view_source) {
            dfxSamples.contents( $scope, $scope.selected_sample.category + '/' + $scope.selected_sample.name + '/view/script.js' ).then( function(view_script) {
                dfxSamples.contents( $scope, $scope.selected_sample.category + '/' + $scope.selected_sample.name + '/view/styles.css' ).then( function(view_styles) {
                    var new_view = {
                        'name': $scope.selected_sample.name,
                        'description': $scope.selected_sample.content.title,
                        'category': 'Default',
                        'wtype': 'visual',
                        'application': $scope.selected_application,
                        'platform': 'web',
                        'src': atob(view_source.data.content),
                        'src_script': atob(view_script.data.content),
                        'src_styles': atob(view_styles.data.content)
                    }
                    dfxViews.createFromModel( $scope, new_view ).then( function(view) {
                        dfxMessaging.showMessage( $scope.selected_sample.content.title + ' has been installed!' );
                        $scope.getAll();
                    });
                });
            });
        });

        // Install Resources
       dfxSamples.contents( $scope, $scope.selected_sample.category + '/' + $scope.selected_sample.name + '/resources' ).then( function(resources) {
            for (var i=0; i<resources.data.length; i++) {
                var mime_type;
                var resource_cat;
                var re = /[.]\w+$/;
                var m;
                 
                if ((m = re.exec(resources.data[0].name)) !== null) {
                    if (m.index === re.lastIndex) {
                        re.lastIndex++;
                    }
                    switch (m[0]) {
                        case '.jpg':
                            mime_type = 'image/jpeg';
                            resource_cat = 'assets';
                            break;
                        case '.jpeg':
                            mime_type = 'image/jpeg';
                            resource_cat = 'assets';
                            break;
                        case '.png':
                            mime_type = 'image/png';
                            resource_cat = 'assets';
                            break;
                        case '.gif':
                            mime_type = 'image/gif';
                            resource_cat = 'assets';
                            break;
                        case '.pdf':
                            mime_type = 'application/pdf';
                            resource_cat = 'assets';
                            break;
                        case '.js':
                            mime_type = 'text/javascript';
                            resource_cat = 'javascript';
                            break;
                        case '.json':
                            mime_type = 'text/javascript';
                            resource_cat = 'javascript';
                            break;
                        case '.css':
                            mime_type = 'text/css';
                            resource_cat = 'javascript';
                            break;
                        default:
                            mime_type = 'text/javascript';
                            resource_cat = 'javascript';
                            break;
                    }
                }
                
                $scope.installSampleResource( resources.data[i].name, resources.data[i].path, mime_type, resource_cat );
            }
        });
        

    };

    $scope.installSampleResource = function(resource_name, resource_path, mime_type, resource_cat) {
        
        dfxSamples.contents( $scope, resource_path ).then( function(resource_content) {
            
            var form_data = new FormData();
            
            var bytes;

            if (resource_cat=='assets') {
                var binary = atob(resource_content.data.content);
                var array = [];
                for (var i = 0; i < binary.length; i++) {
                    array.push(binary.charCodeAt(i));
                }

                // Convert the string to bytes
                bytes = new Uint8Array(array);
            } else {
                // Convert the string to bytes
                bytes = atob(resource_content.data.content);
            }
            
            var blob = new Blob([bytes], { type: mime_type});
            form_data.append( 'file', blob, resource_content.data.name);

            $.ajax({
                url: '/studio/resources/simulate_upload/' + $scope.selected_application + '/' + resource_cat,
                type: 'POST',
                data: form_data,
                headers : {'X-DREAMFACE-TENANT' : $('body').attr('data-tenantid')},
                processData: false,
                contentType: false 
            });

        });

    };

}]);

dfxStudioApp.controller("dfx_studio_release_notes_controller", [ '$scope', function($scope) {

}]);

dfxStudioApp.controller("dfx_studio_support_controller", [ '$scope', '$window', function($scope, $window) {
    $scope.openSupportPage = function () {
        $window.open( 'https://interactive-clouds.atlassian.net/servicedesk/customer/portal/1/user/login?destination=portal', '_blank' );
    };
}]);

dfxStudioApp.controller("dfx_studio_contactus_controller", [ '$scope', 'dfxEmail', 'dfxMessaging', 'dfxApplications', function($scope, dfxEmail, dfxMessaging, dfxApplications) {
    $scope.refreshForm = function(){
        $scope.contact_name = {value: ''};
        $scope.contact_email = {value: ''};
        $scope.contact_msg = {value: ''};
        $scope.subject = {value: 'Request for assistance'};
        $scope.show_form = true;

        dfxApplications.getUserInfo().then(function(data){
            if(data.email !== null && data.email !== ""){
                $scope.contact_email.value = data.email;
            }
            if(data.firstName!==""){
                $scope.contact_name.value = data.firstName + ' ' + data.lastName ;
            }else{
                $scope.contact_name.value = data.login ;
            }
        });
    };

    $scope.refreshForm();

    $scope.sendMail = function(){
        var data = {
            contact_name: $scope.contact_name.value,
            contact_email: $scope.contact_email.value,
            contact_msg: $scope.contact_msg.value,
            subject: $scope.subject.value
        };
        dfxEmail.sendMail(data).then(function(res){
            $scope.show_form = false;
        }, function(res){
            dfxMessaging.showWarning('Error occured while trying to send your message.');
        });
    };
}]);

dfxStudioApp.controller("dfx_studio_configuration_controller", [ '$rootScope', '$scope','dfxApplications', '$timeout', '$routeParams', function($rootScope, $scope, dfxApplications, $timeout, $routeParams) {
    $scope.general = {};
    $scope.devops = {};
    $scope.resources = {};
    $scope.api_sources = {};
    $scope.isSidenavOpen = false;
    if(!$scope.app_name){
        $scope.app_name = $routeParams.appname;
    }

    $scope.$watch('$parent.settings', function(newVal){
        var configurations = ['general','devops', 'api_sources', 'resources','users','personalization','deployment'];
        if(configurations.indexOf(newVal) !== -1){
            $scope.settings = newVal;
            $timeout(function(){
                $scope.configurationTabs = $('#dfx-studio-main-content > div > md-tabs > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper').children();
                $($scope.configurationTabs[configurations.indexOf(newVal)]).trigger('click');
            },0);
        }
    });

    $scope.logo_initialized = false;
    $scope.defineAppData = function(appname){
        if($scope.applications){
            for(var i =0; i < $scope.applications.length; i++){
                if($scope.applications[i].name === appname){
                    $scope.general.title = $scope.applications[i].title;
                    if($scope.applications[i].logo){
                        $scope.general.selected_logo_image = $scope.applications[i].logo ;
                    }else{
                        $scope.general.selected_logo_image = "/images/dfx_login_logo_black.png";
                    }
                    $scope.logo_initialized = true;
                    if($scope.applications[i].channel){
                        $scope.devops.channel = $scope.applications[i].channel;
                    }else{
                        $scope.devops.channel = "";
                    }
                }
            }
        }
    };

    $scope.getGithubData = function(){
        dfxApplications.getGithubData($scope.app_name).then(function(data){
            $scope.devops.repository = data.data.reponame;
            $scope.devops.access_token = data.data.access_token;
            $scope.devops.github_username = data.data.username ;
        });
    };

    $scope.defineSettings = function(tab){
        for(var i= 0; i < 7; i++){
            if($scope.configurationTabs && $($scope.configurationTabs[i]).hasClass('md-active')){
                $scope.settings = tab;                                                              // $scope.settings != $scope.$parent.settings
            }
        }
    };

    $scope.initApps = function(){
        dfxApplications.getAll($scope).then(function(apps){
            $scope.applications = apps.data;
            $scope.appTrees = [];
            for(var i =0; i < $scope.applications.length; i++){
                $scope.appTrees.push({});
            }
            $scope.defineAppData($scope.app_name);
            for(var j =0; j < $scope.applications.length; j++){
                (function(){
                    var local = j;
                    dfxApplications.getAppTree($scope, $scope.applications[local].name).then(function(appTree){
                        $scope.appTrees[local] = appTree;
                    })
                })();
            }
        });
    };
    $scope.initApps();
    $scope.getGithubData();
}]);


dfxStudioApp.controller("dfx_studio_new_application_controller", [ '$scope','dfxApplications', '$mdDialog', '$timeout', 'dfxMessaging', function($scope, dfxApplications, $mdDialog, $timeout, dfxMessaging) {
    $scope.current_date = new Date();
    $scope.appl_name = "";
    $scope.appl_title = "";
    $scope.selected_logo_image_input = "" ;
    $scope.isCreate = true;
    $scope.selected_logo_image = '/images/dfx_login_logo_black.png';
    $scope.isLogo = true;

    $timeout(function(){
        dfxApplications.getSharedImages($scope.app_name).then(function(images){
            $scope.sharedImages = images;
        });
    }, 0);

    $scope.createNewApp = function(){
        var alert = '';
        if ($scope.appl_name.indexOf(" ") != -1) {
            alert = "Application name cannot have empty spaces";
        }
        else if ($.isEmptyObject($scope.appl_name)) {
            alert = "Application name cannot be empty";
        }
        else if (!/^[a-zA-Z0-9-_.]+$/.test($scope.appl_name)) {
            alert = "Application name can have only letters, numbers, underscore or dash symbols";
        }
        if (alert) {
            dfxMessaging.showWarning(alert);
        } else {
            var is_unique = true;
            for(var i=0; i < $scope.applications.length; i++){
                if($scope.applications[i].name === $scope.appl_name){
                    is_unique = false;
                    break;
                }
            }
            if(is_unique){
                dfxApplications.createNewApp($scope.appl_name, $scope.appl_title, $scope.selected_logo_image).then(function(){
                    dfxMessaging.showMessage('New application has been successfully created.');
                    $scope.getAll().then(function(){
                        $scope.loadStudioView($scope.appl_name + '/configuration/general') ;
                    });
                }, function(message){
                dfxMessaging.showWarning('Can\'t create new application. ' + message);
                });
            }else{
                dfxMessaging.showWarning("Application with such name is already exist!");
            }
        }
    };

    $scope.chooseLogoImage = function(ev){
        $mdDialog.show({
            scope: $scope.$new(),
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true,
            ariaLabel: 'picker-images',
            templateUrl: '/gcontrols/web/picker_images_form.html',
            controller: function(){
                $scope.setImage = function(src) {
                    $scope.selected_logo_image = src ;
                    $scope.selected_logo_image_input = src ;
                    $mdDialog.hide();
                }
                $scope.closeDialog = function(){
                    $mdDialog.hide();
                }
            }
        })
    };

    $scope.changeLogo = function(logo){
        if(logo === ''){
            $scope.selected_logo_image = '/images/dfx_login_logo_black.png';
        }else{
            $scope.selected_logo_image = logo;
        }
    };

}]);

dfxStudioApp.controller("dfx_studio_general_settings_controller", [ '$scope','dfxApplications', '$mdDialog', 'dfxMessaging', '$timeout', function($scope, dfxApplications, $mdDialog, dfxMessaging, $timeout) {
    var parentScope = $scope.$parent;
    parentScope.general = $scope;
    $scope.isCreate = false;
    $scope.selected_logo_image_input = {value: ""} ;
    $scope.isLogo = true;

    $scope.getGeneral = function(){
        dfxApplications.getGeneral($scope.app_name).then(function(general){
            $scope.general.creationDate = general.creationDate;
        });
    };

    $scope.chooseLogoImage = function(ev){
        $mdDialog.show({
            scope: $scope.$new(),
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true,
            ariaLabel: 'picker-images',
            templateUrl: '/gcontrols/web/picker_images_form.html',
            controller: function(){
                $scope.setImage = function(src) {
                    $scope.selected_logo_image = src ;
                    $scope.selected_logo_image_input.value = src;
                    $mdDialog.hide();
                }
                $scope.closeDialog = function(){
                    $mdDialog.hide();
                }
            }
        })
    };

    $scope.$watch('$parent.logo_initialized', function(newVal){
        if(newVal){
            $scope.selected_logo_image_input.value = $scope.selected_logo_image ;
            $timeout(function(){
                dfxApplications.getImages($scope.app_name).then(function(images){
                    $scope.appImages = images;
                });
                dfxApplications.getSharedImages($scope.app_name).then(function(images){
                    $scope.sharedImages = images;
                });
            }, 0);
        }
    });

    $scope.changeLogo = function(logo){
        if(logo === ''){
            $scope.selected_logo_image = '/images/dfx_login_logo_black.png';
        }else{
            $scope.selected_logo_image = logo;
        }
    };

    $scope.getGeneral();

    $scope.saveGeneral = function(){
        dfxApplications.saveGeneral($scope.general.title, $scope.app_name, $scope.selected_logo_image).then(function(){
            $scope.initApps();
            dfxMessaging.showMessage("General application settings has been successfully saved.");
        }, function(){
            dfxMessaging.showWarning("Can\'t save.");
        });
    };

    $scope.deleteApp = function(){
        dfxApplications.deleteApp($scope.app_name).then(function(){
            $scope.getAll().then(function(){
                $scope.loadStudioView('/home') ;
            });
        });
    };

    $scope.confirmAppDelete = function(ev) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to delete this application?')
            .textContent('Application will be removed permanently from the repository.')
            .ariaLabel('remove app')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.deleteApp();
        }, function() {
        });
    };

    $scope.loadLoginPage = function() {
        dfxApplications.getGeneral($scope.app_name).then(function(data){
            var editor_parent = document.getElementById('login_editor_web');
            $scope.login_editor_web = CodeMirror(function (elt) {
                    $(editor_parent).empty();
                    $(editor_parent).append(elt);
                },
                {
                    lineNumbers: true,
                    value: data.templates.login_page_web,
                    mode: {name: "xml", globalVars: true},
                    matchBrackets: true,
                    highlightSelectionMatches: {showToken: /\w/},
                    styleActiveLine: true,
                    viewportMargin : Infinity,
                    extraKeys: {"Alt-F": "findPersistent", "Ctrl-Space": "autocomplete"},
                    lineWrapping: true
                });
            $scope.login_editor_web.setSize(null, ($(window).height() - 400) + 'px');

            var editor_parent = document.getElementById('login_editor_mobile');
            $scope.login_editor_mobile = CodeMirror(function (elt) {
                    $(editor_parent).empty();
                    $(editor_parent).append(elt);
                },
                {
                    lineNumbers: true,
                    value: data.templates.login_page_mobile,
                    mode: {name: "xml", globalVars: true},
                    matchBrackets: true,
                    highlightSelectionMatches: {showToken: /\w/},
                    styleActiveLine: true,
                    viewportMargin : Infinity,
                    extraKeys: {"Alt-F": "findPersistent", "Ctrl-Space": "autocomplete"},
                    lineWrapping: true
                });
            $scope.login_editor_mobile.setSize(null, ($(window).height() - 400) + 'px')
        });
    };

    $scope.saveLoginPage = function() {
        var obj = {
            application : $scope.app_name,
            data : {
                templates : {
                    login_page_mobile : $scope.login_editor_mobile.getValue(),
                    login_page_web : $scope.login_editor_web.getValue()
                }
            }
        }
        dfxApplications.saveLoginPage(obj).then(function(){
            dfxMessaging.showMessage("Login page has been successfully saved.");
        }, function(){
            dfxMessaging.showWarning("Can\'t save.");
        });
    }

}]);

dfxStudioApp.controller("dfx_studio_devops_controller", [ '$scope','dfxApplications', 'dfxMessaging', function($scope, dfxApplications, dfxMessaging) {
    var parentScope = $scope.$parent;
    parentScope.devops = $scope;

    $scope.saveCollaboration = function(){
        dfxApplications.saveCollaboration($scope.devops.channel, $scope.app_name).then(function(){
            $scope.initApps();
            dfxMessaging.showMessage("Collaboration data has been successfully saved.");
        }, function(){
            dfxMessaging.showWarning("Can\'t save.");
        });
    };

    $scope.saveGithub = function(){
        var body = {
            "application": $scope.app_name,
            "provider": "github",
            "access_token": $scope.access_token,
            "repository": $scope.repository,
            "repositories": [
                {
                    "reponame": $scope.repository,
                    "username": $scope.github_username
                }
            ]
        };
        dfxApplications.saveGithub(body).then(function(){
            $scope.getGithubData();
            dfxMessaging.showMessage("Github data has been successfully saved.");
        }, function(){
            dfxMessaging.showWarning("Can\'t save.");
        });
    };
}]);

dfxStudioApp.controller("dfx_studio_api_sources_controller", [ '$scope','dfxAuthProviders', 'dfxMessaging', '$mdDialog', '$mdSidenav', 'dfxApiServiceObjects', '$timeout', function($scope, dfxAuthProviders, dfxMessaging, $mdDialog, $mdSidenav, dfxApiServiceObjects, $timeout) {
    var parentScope = $scope.$parent;
    parentScope.api_sources = $scope;
    $scope.auth_providers = [];
    $scope.operation = 'create' ;
    $scope.new_auth_provider = {} ;
    $scope.current_auth_provider = {} ;
    $scope.dataSources = [];
    $scope.schemas = [];
    $scope.schema_on_open = "init";
    $scope.schema_on_close = "init";
    $scope.type_on_open = "init";
    $scope.type_on_close = "init";
    dfxApiServiceObjects.getCatalog().then(function(data){
        var sources = data.data ;
        $scope.dataSources.push({name: 'REST', schemas:['none', 'basic','digest', 'oAuth1', 'oAuth2']}) ;
        $scope.dataSources.push({name: 'StrongLoop', schemas:['none','basic','digest']}) ;
        for(var key in sources){
            if(sources[key].auth){
                $scope.dataSources.push({
                    name: key,  schemas: sources[key].schemas
                }) ;
            }
        }
    });

    $scope.$watch('new_auth_provider.selected_data_source', function(newVal){
        if(newVal){
            for(var i = 0; i < $scope.dataSources.length; i++){
                if($scope.dataSources[i].name === newVal){
                    $scope.schemas = $scope.dataSources[i].schemas ;
                }
            }
        }
    });

    $scope.$watch('current_auth_provider.dataSource', function(newVal){
        if(newVal){
            for(var i = 0; i < $scope.dataSources.length; i++){
                if($scope.dataSources[i].name === newVal){
                    $scope.schemas = $scope.dataSources[i].schemas ;
                }
            }
        }
    });

    $scope.getProviders = function(){
        dfxAuthProviders.getProviders($scope.app_name).then(function(data){
            $scope.auth_providers = data;
        });
    };

    $scope.getProviders();

    var facebook_credentials = {
        type:               "facebook",
        access_token:       "",
        consumer_key:       "",
        consumer_secret:    "",
        authorize_path:     "https://www.facebook.com/dialog/oauth",
        access_token_path:  "https://graph.facebook.com/v2.3/oauth/access_token",
        response_type:      "code",
        scope:              ""
    };
    var google_credentials = {
        type:               "google",
        access_token:       "",
        base_provider_url:  "https://accounts.google.com",
        consumer_key:       "",
        consumer_secret:    "",
        authorize_path:     "/o/oauth2/auth",
        access_token_path:  "/o/oauth2/token",
        response_type:      "code",
        scope:              ""
    };

    $scope.initNewAuthProvider = function(){
        $scope.operation = 'create';
        $scope.schemas = ['none','basic','digest', 'oAuth1', 'oAuth2'];
        $scope.new_auth_provider = {
            provider:                    "",
            selected_data_source:        "REST",
            schema:                      "",
            ap_basic_digest:             {credentials: {username: "", password: ""}},
            ap_oAuth_1:                  {credentials: {selected_method: "HMAC-SHA1", consumer_key:"", consumer_secret:"", access_token:"", access_secret:""}},
            ap_oAuth_2:                  {selected_type: "", credentials: {}},
            rest:                         {credentials: {}, route: ""}
        };
        var sideNavInstance = $mdSidenav('side_nav_left');
        sideNavInstance.toggle();
    };

    $scope.saveProvider = function(){
        if($scope.operation === "create"){
            var alert = '';
            if ($scope.new_auth_provider.provider.indexOf(" ") != -1) {
                alert = "The name cannot have empty spaces";
            }
            else if ($.isEmptyObject($scope.new_auth_provider.provider)) {
                alert = "The name cannot be empty";
            }
            else if (!/^[a-zA-Z0-9-_.]+$/.test($scope.new_auth_provider.provider)) {
                alert = "The name can have only letters, numbers, underscore or dash symbols";
            }
            if (alert) {
                dfxMessaging.showWarning(alert);
            } else {
                var is_unique = true;
                for(var i=0; i < $scope.auth_providers.length; i++){
                    if($scope.auth_providers[i].provider === $scope.new_auth_provider.provider){
                        is_unique = false;
                        break;
                    }
                }
                if(is_unique){
                    dfxAuthProviders.createProvider($scope.new_auth_provider.schema, $scope.new_auth_provider, $scope.app_name).then(function(data){
                        $scope.auth_providers.push($scope.new_auth_provider);
                        dfxMessaging.showMessage("New API source data has been successfully created.");
                        var sideNavInstance = $mdSidenav('side_nav_left');
                        sideNavInstance.toggle();
                    });
                }else{
                    dfxMessaging.showWarning("API source with such name is already exist!");
                }
            }
        }else if($scope.operation === "update"){
            dfxAuthProviders.saveProvider($scope.current_auth_provider.schema, $scope.current_auth_provider, $scope.app_name).then(function(data){
                $scope.getProviders();
                dfxMessaging.showMessage("API source data has been successfully saved.");
                var sideNavInstance = $mdSidenav('side_nav_left');
                sideNavInstance.toggle();
            });
        }
    };

    $scope.closeSidenav = function(){
        var sideNavInstance = $mdSidenav('side_nav_left');
        sideNavInstance.toggle();
    };

    $scope.editAuthProvider = function(providername) {
        $scope.operation = "update" ;
        $scope.schema_on_open = "init";
        $scope.schema_on_close = "init";
        $scope.type_on_open = "init";
        $scope.type_on_close = "init";
        dfxAuthProviders.getProvider(providername, $scope.app_name).then(function (data) {
            $scope.current_auth_provider = data;
            if (!$scope.current_auth_provider.credentials.type) {
                $scope.current_auth_provider.selected_type = "";
            }
            for(var i = 0; i < $scope.dataSources.length; i++){
                if($scope.dataSources[i].name === $scope.current_auth_provider.dataSource){
                    $scope.schemas = $scope.dataSources[i].schemas ;
                }
            }

            var sideNavInstance = $mdSidenav('side_nav_left');
            sideNavInstance.toggle();
        });
    };

    $scope.confirmProviderRemove = function(ev, providername) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to delete this API source?')
            .textContent('API source will be removed from the repository.')
            .ariaLabel('remove api_source')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.removeProvider(providername);
        }, function() {
        });
    };

    $scope.removeProvider = function(providername){
        dfxAuthProviders.removeProvider($scope.app_name, providername).then(function(){
            for(var i =0; i < $scope.auth_providers.length; i++){
                if($scope.auth_providers[i].provider === providername){
                    $scope.auth_providers.splice(i, 1);
                    break;
                }
            }
            dfxMessaging.showMessage('Api source data has been successfully deleted.');
        });
    };

    $scope.$watch('new_auth_provider.ap_oAuth_2.selected_type', function(newVal){
        if(newVal === 'facebook'){
            $scope.api_sources.new_auth_provider.ap_oAuth_2.credentials = facebook_credentials ;
        }else if(newVal === 'google'){
            $scope.api_sources.new_auth_provider.ap_oAuth_2.credentials = google_credentials ;
        }
    });

    $scope.setSchemaOnOpen = function(schema){
        $scope.schema_on_open = schema;
    };

    $scope.setSchemaOnClose = function(schema){
        $scope.schema_on_close = schema;
    };

    $scope.setTypeOnOpen = function(type){
        $scope.type_on_open = type;
    };

    $scope.setTypeOnClose = function(type){
        $scope.type_on_close = type;
    };

    $scope.$watch('current_auth_provider.schema',  function(newVal){
        if($scope.schema_on_open !== $scope.schema_on_close){
            if(newVal === 'basic' || newVal === 'digest'){
                $scope.current_auth_provider.credentials = {username: "", password: ""};
            }else if(newVal === 'oAuth1'){
                $scope.current_auth_provider.credentials = {
                    signature_method:       "HMAC-SHA1",
                    consumer_key:           "",
                    consumer_secret:        "",
                    access_token:           "",
                    access_secret :         ""
                };
            }else if(newVal === 'none'){
                $scope.current_auth_provider.route = "" ;
                $scope.current_auth_provider.credentials = {};
            }else if(newVal === 'oAuth2'){
                $scope.current_auth_provider.credentials = {
                    type:               "",
                    access_token:       "",
                    consumer_key:       "",
                    consumer_secret:    "",
                    authorize_path:     "",
                    base_site:          "",
                    access_token_path:  "",
                    response_type:      "",
                    scope:              ""
                };
            }
        }
    });

    $scope.$watch('current_auth_provider.credentials.type', function(newVal){
        if($scope.type_on_open !== $scope.type_on_close){
            if(newVal === 'facebook'){
                $scope.current_auth_provider.credentials = {
                    type:               "facebook",
                    access_token:       "",
                    consumer_key:       "",
                    consumer_secret:    "",
                    authorize_path:     "https://www.facebook.com/dialog/oauth",
                    access_token_path:  "https://graph.facebook.com/v2.3/oauth/access_token",
                    response_type:      "code",
                    scope:              ""
                };
            }else if(newVal === 'google'){
                $scope.current_auth_provider.credentials = {
                    type:               "google",
                    access_token:       "",
                    base_provider_url:  "https://accounts.google.com",
                    consumer_key:       "",
                    consumer_secret:    "",
                    authorize_path:     "/o/oauth2/auth",
                    access_token_path:  "/o/oauth2/token",
                    response_type:      "code",
                    scope:              ""
                };
            }
            $scope.current_auth_provider.selected_type = $scope.current_auth_provider.credentials.type ;
        }
    });

    /*$scope.$watch('new_auth_provider.schema', function(newVal){
     if(newVal){
     $scope.new_auth_provider.selected_data_source = "";
     if(newVal = 'public/rest'){
     $scope.new_auth_provider.rest.route = "";
     $scope.new_auth_provider.selected_data_source = "StrongLoop" ;
     $scope.new_auth_provider.credentials = {};
     }
     }
     });*/
}]);

//dfxStudioApp.controller("dfx_studio_resources_controller", [ '$scope', function($scope) {
//    $scope.click = function() {
//        $scope.path = "studioviews/resources.html";
//    }
//    $scope.javascript = {};
//    $scope.dictionary = {};
//    $scope.stylesheets = {};
//    $scope.assets = {};
//
//}]);

dfxStudioApp.directive('dropzone', ['dfxApplications','$timeout', '$mdDialog', 'dfxMessaging', '$compile', '$parse', function(dfxApplications, $timeout, $mdDialog, dfxMessaging, $compile, $parse) {
    return {
        restrict: 'C',
        scope: true,
        link: function(scope, element, attrs) {
            var mimeTypes = {
                dictionary:  '.json',
                javascript:  'text/javascript,application/javascript',
                stylesheets: 'text/css',
                assets:      'image/jpeg,image/png,image/gif,application/pdf,text/xml'
            };

            var dropzone_id = $(element[0]).attr("id");
            scope.resource_name = {value : ""};
            scope.dictionary_name = {value : ""};
            scope.current_resource_type = "javascript";
            scope.hide_areas = false;
            scope.create_new = true;

            switch(dropzone_id){
                case "dfx_resource_dictionary_folder_upload":
                    scope.current_resource_type = "dictionary";
                    break;
                case "dfx_resource_javascript_folder_upload":
                    scope.current_resource_type = "javascript";
                    break;
                case "dfx_resource_stylesheets_folder_upload":
                    scope.current_resource_type = "stylesheets";
                    break;
                case "dfx_resource_assets_folder_upload":
                    scope.current_resource_type = "assets";
            }

            var parentScope = scope.$parent;
            if(scope.current_resource_type === "dictionary"){
                parentScope.dictionary = scope;
            }else if (scope.current_resource_type === "javascript"){
                parentScope.javascript = scope;
            }else if(scope.current_resource_type === "stylesheets"){
                parentScope.stylesheets = scope;
            }else if(scope.current_resource_type === "assets"){
                parentScope.assets = scope;
            }

            if(!parentScope.dictionary.data){
                parentScope.dictionary.data = {
                    application: scope.app_name,
                    name: "dictionary",
                    description: '',
                    action: 'put',
                    items: []
                };
            }

            if(!parentScope.javascript.data){
                parentScope.javascript.data = {
                    application: scope.app_name,
                    name: "javascript",
                    description: '',
                    action: 'put',
                    items: []
                };
            }

            if(!parentScope.stylesheets.data){
                parentScope.stylesheets.data = {
                    application: scope.app_name,
                    name: "stylesheets",
                    description: '',
                    action: 'put',
                    items: []
                };
            }

            if(!parentScope.assets.data){
                parentScope.assets.data = {
                    application: scope.app_name,
                    name: "assets",
                    description: '',
                    action: 'put',
                    items: []
                };
            }

            scope.getResources = function(){
                dfxApplications.getResources(scope.app_name).then(function(response){
                    var arr = response.data.data;
                    for(var i =0; i < arr.length; i++){
                        if(arr[i].name === "javascript" && scope.current_resource_type === "javascript"){
                            parentScope.javascript.data.items = arr[i].items;
                            for(var j=0; j < parentScope.javascript.data.items.length; j++){
                                parentScope.javascript.data.items[j].is_uploaded = true;
                            }
                        }else if(arr[i].name === "stylesheets" && scope.current_resource_type === "stylesheets"){
                            parentScope.stylesheets.data.items = arr[i].items;
                            for(var j=0; j < parentScope.stylesheets.data.items.length; j++){
                                parentScope.stylesheets.data.items[j].is_uploaded = true;
                            }
                        }else if(arr[i].name === "assets" && scope.current_resource_type === "assets"){
                            parentScope.assets.data.items = arr[i].items;
                            for(var j=0; j < parentScope.assets.data.items.length; j++){
                                parentScope.assets.data.items[j].is_uploaded = true;
                            }
                        }
                    }
                }, function(){
                    dfxMessaging.showWarning("Can\'t get list of resources");
                });
            };

            scope.getDataDictionaries = function(){
                dfxApplications.getDataDictionaries(scope.app_name).then(function(response){
                    parentScope.dictionary.data.items = response.data.data;
                }, function(){
                    dfxMessaging.showWarning("Can\'t get list of data dictionaries.");
                });
            };

            if(scope.current_resource_type === 'dictionary'){
                $timeout(function(){
                    scope.getDataDictionaries();
                },0);
            }else{
                scope.getResources();
            };

            scope.uploadResources = function(){
                dfxApplications.saveResources(scope.data).then(function(response){
                    for(var i =0; i < scope.data.items.length; i++){
                        scope.data.items[i].is_uploaded = true;
                    }
                    scope.processDropzone();
                    dfxMessaging.showMessage("Resources data has been successfully updated.");
                }, function(){
                    dfxMessaging.showWarning("Can\'t save.");
                });
            };

            scope.confirmResourceDelete = function(ev, item) {
                var confirm = $mdDialog.confirm()
                    .title('Are you sure you want to delete this file?')
                    .textContent('The file will be removed permanently from the repository.')
                    .ariaLabel('remove file')
                    .targetEvent(ev)
                    .cancel('Cancel')
                    .ok('OK');
                $mdDialog.show(confirm).then(function() {
                    scope.deleteItem(item);
                }, function() {
                });
            };

            scope.confirmDictionaryDelete = function(ev, item) {
                var confirm = $mdDialog.confirm()
                    .title('Are you sure you want to delete this item?')
                    .textContent('This item will be removed permanently from the repository.')
                    .ariaLabel('remove dictionary')
                    .targetEvent(ev)
                    .cancel('Cancel')
                    .ok('OK');
                $mdDialog.show(confirm).then(function() {
                    scope.deleteDictionaryItem(item);
                }, function() {
                });
            };

            scope.deleteDictionaryItem = function(item){
                dfxApplications.removeDataDictionary(item.name, scope.app_name).then(function(){
                    scope.getDataDictionaries();
                    dfxMessaging.showMessage("Data dictionary " + item.name + " has been successfully deleted.");
                });
            };

                scope.deleteItem = function(item){
                if(scope.current_resource_type === "javascript"){
                    for(var i=0; i < parentScope.javascript.data.items.length; i++){
                        if(parentScope.javascript.data.items[i].path === item.path){
                            parentScope.javascript.data.items.splice(i, 1);
                            $timeout(function(){
                                $('#upload-javascript-resources').trigger('click');
                            },0);
                            break;
                        }
                    }
                }else if(scope.current_resource_type === "stylesheets"){
                    for(var j=0; j < parentScope.stylesheets.data.items.length; j++){
                        if(parentScope.stylesheets.data.items[j].path === item.path){
                            parentScope.stylesheets.data.items.splice(j, 1);
                            $timeout(function(){
                                $('#upload-stylesheets-resources').trigger('click');
                            },0);
                            break;
                        }
                    }
                }else if(scope.current_resource_type === "assets"){
                    for(var j=0; j < parentScope.assets.data.items.length; j++){
                        if(parentScope.assets.data.items[j].path === item.path){
                            parentScope.assets.data.items.splice(j, 1);
                            $timeout(function(){
                                $('#upload-assets-resources').trigger('click');
                            },0);
                            break;
                        }
                    }
                }
            };

            scope.config = {
                maxFilesize: 100,
                paramName: "uploadfile",
                maxThumbnailFilesize: 10,
                url: '/studio/resources/upload/' + scope.app_name + '/' + scope.current_resource_type,
                acceptedFiles:    mimeTypes[scope.current_resource_type],
                uploadMultiple:   true,
                autoProcessQueue: false,
                maxFiles:         1000,
                parallelUploads:  1000
            };

            scope.dropzone = new Dropzone(element[0], scope.config);

            var eventHandlers = {
                'addedfile': function(file) {
                    var is_unique = true;
                    for(var i =0; i < scope.data.items.length; i++){
                        if(file.name === scope.data.items[i].path){
                            dfxMessaging.showWarning("Current file name " + file.name + " is already exist!");
                            is_unique = false;
                            this.removeFile(file);
                            break;
                        }
                    }
                    if(is_unique){
                        scope.data.items.push({
                            'path': file.name,
                            'type': file.type,
                            'size': (file.size/1000).toFixed(1),
                            'is_uploaded': false
                        });
                    }

                    if(scope.current_resource_type === "javascript"){
                        $( "#dfx_resource_javascript_folder_upload .dz-file-preview").remove();
                        $("#dfx_resource_javascript_folder_upload > div.dz-default.dz-message").css('opacity', '1');
                        $timeout(function(){
                            $('#upload-javascript-resources').trigger('click');
                        },0);
                    }else if(scope.current_resource_type === "stylesheets"){
                        $( "#dfx_resource_stylesheets_folder_upload .dz-file-preview" ).remove();
                        $("#dfx_resource_stylesheets_folder_upload > div.dz-default.dz-message").css('opacity', '1');
                        $timeout(function(){
                            $('#upload-stylesheets-resources').trigger('click');
                        },0);
                    }else if(scope.current_resource_type === "assets"){
                        $( "#dfx_resource_assets_folder_upload .dz-file-preview" ).remove();
                        $("#dfx_resource_assets_folder_upload > div.dz-default.dz-message").css('opacity', '1');
                        $timeout(function(){
                            $('#upload-assets-resources').trigger('click');
                        },0);
                    }
                },
                'success': function (file, response) {

                }
            };

            scope.createResource = function(ev) {
                scope.create_new = true;
                $mdDialog.show({
                    scope: scope.$new(),
                    controller: DialogController,
                    templateUrl: 'studioviews/create_resource_dialog.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose:true
                })
                    .then(function() {
                        var alert = '';
                        if(scope.current_resource_type === "dictionary"){
                            if (scope.dictionary_name.value.indexOf(" ") != -1) {
                                alert = "The name cannot have empty spaces";
                            }
                            else if ($.isEmptyObject(scope.dictionary_name.value)) {
                                alert = "The name cannot be empty";
                            }
                            else if (!/^[a-zA-Z0-9-_.]+$/.test(scope.dictionary_name.value)) {
                                alert = "The name can have only letters, numbers, underscore or dash symbols";
                            }
                        }else{
                            if (scope.resource_name.value.indexOf(" ") != -1) {
                                alert = "The name cannot have empty spaces";
                            }
                            else if ($.isEmptyObject(scope.resource_name.value)) {
                                alert = "The name cannot be empty";
                            }
                            else if (!/^[a-zA-Z0-9-_.]+$/.test(scope.resource_name.value)) {
                                alert = "The name can have only letters, numbers, underscore or dash symbols";
                            }
                        }

                        if (alert) {
                            dfxMessaging.showWarning(alert);
                        } else {
                            var is_unique = true;
                            if(scope.current_resource_type === "dictionary"){
                                for(var i =0; i < scope.data.items.length; i++){
                                    if((scope.dictionary_name.value) === scope.data.items[i].name){
                                        dfxMessaging.showWarning("Current item name " + scope.dictionary_name.value + " is already exist!");
                                        is_unique = false;
                                        break;
                                    }
                                }
                            }else if(scope.current_resource_type === "javascript"){
                                for(var i =0; i < scope.data.items.length; i++){
                                    if((scope.resource_name.value+'.js') === scope.data.items[i].path){
                                        dfxMessaging.showWarning("Current file name " + scope.resource_name.value + ".js is already exist!");
                                        is_unique = false;
                                        break;
                                    }
                                }
                            }else if(scope.current_resource_type === "stylesheets"){
                                for(var j =0; j < scope.data.items.length; j++){
                                    if((scope.resource_name.value+'.css') === scope.data.items[j].path){
                                        dfxMessaging.showWarning("Current file name " + scope.resource_name.value + ".css is already exist!");
                                        is_unique = false;
                                        break;
                                    }
                                }
                            }
                            if(is_unique){
                                if(scope.current_resource_type === 'dictionary'){
                                    scope.saveNewDictionary() ;
                                }else{
                                    scope.scriptEditorBuilder(scope.current_resource_type, "");
                                }
                            }
                        }

                    }, function() {
                        // if cancel
                    });

                function DialogController($scope, $mdDialog) {
                    $scope.hide = function() {
                        $mdDialog.hide();
                    };
                    $scope.cancel = function() {
                        scope.resource_name.value = "";
                        scope.dictionary_name.value = "";
                        $mdDialog.cancel();
                    };
                }
            };

            scope.editResource = function(filename, index){
                scope.create_new = false;
                var edited = {
                    applicationName: scope.app_name,
                    component: "resources",
                    name: scope.current_resource_type,
                    number: index,
                    action: "getResourceContent"
                };
                scope.resource_name.value = filename.substring(0, filename.lastIndexOf('.'));

                dfxApplications.getResourceContent(edited).then(function(data){
                    scope.scriptEditorBuilder(scope.current_resource_type, data.content);
                });
            };

            scope.editDataDictionary = function(item){
                scope.edited_dictionary_name = item.name;
                var temp = JSON.parse(item.content);
                scope.scriptEditorBuilder(scope.current_resource_type, JSON.stringify(temp, null, "\t"));
            };

            scope.scriptEditorBuilder = function(resource_type, value){
                $timeout(function() {
                    var editor_parent;
                    if(resource_type === "dictionary"){
                        editor_parent = document.getElementById('dd_code_mirror_parent');
                    } if(resource_type === "javascript"){
                        editor_parent = document.getElementById('js_code_mirror_parent');
                    }else if(resource_type === "stylesheets"){
                        editor_parent = document.getElementById('css_code_mirror_parent');
                    }
                    scope.script_editor = CodeMirror(function (elt) {
                            $(editor_parent).empty();
                            $(editor_parent).append(elt);
                        },
                        {
                            lineNumbers: true,
                            value: value,
                            mode: {name: resource_type, globalVars: true},
                            matchBrackets: true,
                            highlightSelectionMatches: {showToken: /\w/},
                            styleActiveLine: true,
                            viewportMargin : Infinity,
                            extraKeys: {"Alt-F": "findPersistent", "Ctrl-Space": "autocomplete"},
                            lineWrapping: true
                        });
                    scope.script_editor.setSize(null, ($(window).height() - 400) + 'px');
                    $timeout(function(){
                        scope.script_editor.refresh();
                        scope.script_editor.focus();
                    },0);
                    scope.hide_areas = true;
                }, 0);
            };

            scope.itemJsonEditor = function(value){
                $timeout(function() {
                    var editor_parent = document.getElementById('dd_editor_code_mirror_parent');
                    scope.dd_script_editor = CodeMirror(function (elt) {
                            $(editor_parent).empty();
                            $(editor_parent).append(elt);
                        },
                        {
                            lineNumbers: true,
                            value: value,
                            mode: {name: 'javascript', globalVars: true, json: true},
                            matchBrackets: true,
                            highlightSelectionMatches: {showToken: /\w/},
                            styleActiveLine: true,
                            viewportMargin : Infinity,
                            extraKeys: {"Alt-F": "findPersistent", "Ctrl-Space": "autocomplete"},
                            lineWrapping: true,
                            readOnly: true
                        });
                    scope.dd_script_editor.setSize(null, '340px');
                    $timeout(function(){
                        scope.dd_script_editor.refresh();
                    },0);
                }, 0);
            };

            scope.closeEditor = function(){
                scope.hide_areas = false;
                scope.resource_name.value = "";
                scope.dictionary_name.value = "";
            };

            scope.saveNewResource = function(){
                var content = scope.script_editor.getValue();
                var file_name = scope.resource_name.value + (scope.current_resource_type==="javascript"? ".js" :(scope.current_resource_type==="stylesheets"? ".css": ".json"));
                var body = {
                    action : "createResourceFile",
                    fileName : file_name,
                    content : content,
                    name : scope.current_resource_type,
                    applicationName : scope.app_name
                }
                dfxApplications.createResource(body).then(function(){
                    scope.getResources();
                    scope.closeEditor();
                    dfxMessaging.showMessage("File " + file_name + " was created!");
                });
            };

            scope.saveNewDictionary = function(){
                var content = {Item: "empty"} ;
                var name = scope.dictionary_name.value;
                var data = {
                    name      : scope.dictionary_name.value,
                    content   : JSON.stringify(content)
                };
                dfxApplications.saveDictionary(scope.app_name, data).then(function(res){
                    scope.getDataDictionaries();
                    dfxMessaging.showMessage("Data dictionary " + name + " was created!");
                });
            };

            scope.updateDictionary = function(){
                var content = scope.script_editor.getValue();
                var valid = true;
                try{
                    JSON.parse(content) ;
                }catch(e){
                    valid = false;
                    dfxMessaging.showMessage("Can'\t save. JSON string is not valid!");
                }
                if(valid){
                    var data = {
                        name      : scope.edited_dictionary_name,
                        content   : content
                    };
                    dfxApplications.saveDictionary(scope.app_name, data).then(function(res){
                        scope.getDataDictionaries();
                        scope.closeEditor();
                        dfxMessaging.showMessage("Data dictionary " + scope.edited_dictionary_name + " has been successfully saved.");
                    });
                }
            };

            scope.updateResource = function(){
                var content = scope.script_editor.getValue();
                var file_name = scope.resource_name.value + (scope.current_resource_type==="javascript"? ".js" :(scope.current_resource_type==="stylesheets"? ".css": ".json"));
                var body = {
                    action : "updateResourceFile",
                    fileName : file_name,
                    content : content,
                    name : scope.current_resource_type,
                    applicationName : scope.app_name
                };
                dfxApplications.updateResource(body).then(function(){
                    scope.getResources();
                    scope.closeEditor();
                    dfxMessaging.showMessage("File " + file_name + " was saved!");
                });
            };

            scope.iterate = function(obj, path) {
                scope.result += "<ul>" ;
                for (var property in obj) {
                    scope.result += "<li class='menu-tree-item' item-id='" + scope.counter + "' id='jsonitem_" + scope.counter + "'>" ;
                    scope.result += "<a style='cursor:pointer;' ng-click='selectItem(" + scope.counter + ")'>" + property+ "</a>";
                    if (obj.hasOwnProperty(property)) {
                        if (typeof obj[property] == "object" && obj[property].constructor !== Array) {
                            var path1 = path + "." + property;
                            scope.buffer.push({key: property, value: obj[property], itemId: scope.counter++, path: path1, type: "Object" });
                            scope.iterate(obj[property], path1);
                        }else if(obj[property].constructor === Array){
                            var path1 = path + "." + property;
                            scope.buffer.push({key: property, value: obj[property], itemId: scope.counter++, path: path1, type: "Array" });
                        }else{
                            var path1 = path + "." + property;
                            scope.buffer.push({key: property, value: obj[property], itemId: scope.counter++, path: path1, type: "String"});
                        }
                    }
                    scope.result += "</li>" ;
                }
                scope.result += "</ul>" ;
            };

            scope.refreshBuffer = function(){
                var obj = scope.obj;
                scope.buffer = [];
                scope.result = "";
                scope.counter = 0;
                scope.iterate(obj, "");
            };

            scope.buildStructure = function(){
                $('#items-list').html(scope.result);
                $compile($('#items-list').contents())(scope);
            };

            scope.graphicalEdit = function(ev, item){
                $mdDialog.show({
                    scope: scope.$new(),
                    templateUrl: 'studioviews/json_graphical_editor.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose:true,
                    onComplete: function() {

                        scope.saveDictionary = function(){
                            var temp = JSON.stringify(scope.obj);
                            var data = {
                                name      : item.name,
                                content   : temp
                            };
                            dfxApplications.saveDictionary(scope.app_name, data).then(function(res){
                                scope.getDataDictionaries();
                                scope.closeDialog();
                                dfxMessaging.showMessage("Data dictionary " + item.name + " has been successfully saved.");
                            });
                        };

                        scope.selectItem = function(id){
                            scope.refreshBuffer();
                            scope.selectedItem = scope.buffer[id];
                            scope.selectedItem.displayValue = false;
                            if(scope.selectedItem.value.constructor === Array){
                                scope.selectedItem.displayValue = true;
                                scope.arrayValue = scope.selectedItem.value[0];
                            }else if(typeof scope.selectedItem.value !== "object"){
                                scope.selectedItem.displayValue = true;
                            }
                            $timeout(function(){
                                $($('#items-list').find('.active')[0]).removeClass('active');
                                $('#jsonitem_'+id).addClass('active');
                            },0);
                            scope.itemJsonEditor(JSON.stringify(scope.selectedItem.value, null, "\t"));

                            scope.parentItem = eval(('scope.obj' + scope.selectedItem.path).substring(0, ('scope.obj' + scope.selectedItem.path).lastIndexOf('.')));

                            scope.levelItems = Object.keys(scope.parentItem);
                            var levelHtmlList = $($('#jsonitem_'+id).parent()[0]).children();

                            scope.htmlLevelIds = [];
                            for(var i=0; i < levelHtmlList.length; i++){
                                var temp = parseInt($(levelHtmlList[i]).attr('item-id')) ;
                                scope.htmlLevelIds.push(temp) ;
                            }

                            scope.isTopLevel = false;

                            for(var j=0; j < scope.htmlLevelIds.length; j++){
                                if(scope.htmlLevelIds[j]=== 0){
                                    scope.isTopLevel = true;
                                    break;
                                }
                            }
                        };

                        scope.selectItem(0);

                        scope.addNewItem = function(){
                            var isKeyUnique = true;
                                for(var key in scope.obj){
                                    if(key === scope.keyName){
                                        isKeyUnique = false;
                                        dfxMessaging.showWarning('Can\'t add new item because such key name is already exist in this object.');
                                        break;
                                    }
                                }
                                if(scope.keyName === ""){
                                    dfxMessaging.showWarning('Can\'t add new item because of empty key name.');
                                    return;
                                }
                                if(isKeyUnique){
                                    if(scope.selectedItem === null){
                                    if(scope.defaultType === 'String'){
                                        scope.obj[scope.keyName] = "" ;
                                    }else if(scope.defaultType === 'Object'){
                                        scope.obj[scope.keyName] = {} ;
                                    }else if(scope.defaultType === 'Array'){
                                        scope.obj[scope.keyName] = [];
                                    }
                                }else{
                                        if(scope.defaultType === 'String'){
                                            eval("scope.obj" + scope.selectedItem.path.substring(0, scope.selectedItem.path.lastIndexOf('.')) + "[scope.keyName]=''");
                                        }else if(scope.defaultType === 'Object'){
                                            eval("scope.obj" + scope.selectedItem.path.substring(0, scope.selectedItem.path.lastIndexOf('.')) + "[scope.keyName]={}");
                                        }else if(scope.defaultType === 'Array'){
                                            eval("scope.obj" + scope.selectedItem.path.substring(0, scope.selectedItem.path.lastIndexOf('.')) + "[scope.keyName]=[]");
                                        }
                                    }
                            }
                            var parentCounter = 0;
                            var parentIndex = 0;
                            var parentIndexDefind = false;
                            var arr = scope.selectedItem.path.split('.');
                            arr.pop();
                            var path = arr.join('.') ;

                            for(var i = 0; i < scope.buffer.length; i++){
                                if(scope.buffer[i].path.indexOf(path)!== -1){
                                    if(!parentIndexDefind){
                                        parentIndex = i;
                                        parentIndexDefind = true;
                                    }
                                    parentCounter ++;
                                }
                            }
                            var index = parentIndex + parentCounter;
                            scope.refreshBuffer();
                            scope.buildStructure();
                            scope.selectItem(index);
                        };

                        scope.indent = function(){
                            for(var j =1; j < scope.htmlLevelIds.length; j++){
                                if(scope.htmlLevelIds[j] === scope.selectedItem.itemId){
                                    var index = scope.htmlLevelIds[j-1];
                                    var prevObj = scope.buffer[index] ;
                                }
                            }
                            if(prevObj){
                                if(prevObj.type==='Object'){
                                    var index = scope.selectedItem.itemId;
                                    eval('scope.obj' + prevObj.path + "[scope.selectedItem.key] = scope.selectedItem.value ;");
                                    scope.removeItem();
                                    scope.refreshBuffer();
                                    scope.buildStructure();
                                    scope.selectItem(index);
                                }
                            }
                        };

                        scope.outdent = function(){
                            if(!scope.isTopLevel){
                                    var itemCounter = 0;
                                    var parentCounter = 0;
                                    var parentIndex = 0;
                                    var parentIndexDefind = false;
                                    var arr = scope.selectedItem.path.split('.');
                                    arr.pop(); arr.pop();
                                    var path = arr.join('.') ;

                                    for(var i = 0; i < scope.buffer.length; i++){
                                        if(scope.buffer[i].path.indexOf(path)!== -1){
                                            if(!parentIndexDefind){
                                                parentIndex = i;
                                                parentIndexDefind = true;
                                            }
                                            parentCounter ++;
                                        }
                                    }

                                    for(var j = scope.selectedItem.itemId; j < scope.buffer.length; j++){
                                        if(scope.buffer[j].path.indexOf(scope.selectedItem.path)!== -1){
                                            itemCounter ++;
                                        }
                                    }
                                    var index = parentIndex + parentCounter - itemCounter;

                                eval('scope.obj' + path + "[scope.selectedItem.key] = scope.selectedItem.value ;");
                                scope.removeItem();
                                scope.refreshBuffer();
                                scope.buildStructure();
                                scope.selectItem(index);
                            }
                        };

                        scope.moveUp = function(){
                            var doModify = false;
                            for(var j =1; j < scope.htmlLevelIds.length; j++){
                                if(scope.htmlLevelIds[j] === scope.selectedItem.itemId){
                                    var index = scope.htmlLevelIds[j-1];
                                }
                            }
                            for(var i =1; i < scope.levelItems.length; i++){
                                if(scope.selectedItem.key === scope.levelItems[i]){
                                    doModify = true;
                                    var temp = scope.levelItems[i-1];
                                    scope.levelItems[i-1] = scope.levelItems[i];
                                    scope.levelItems[i] = temp;
                                    break;
                                }
                            }
                            if(doModify){
                                var modified = JSON.parse(JSON.stringify(scope.parentItem, scope.levelItems));
                                for(var key1 in modified){
                                    for(var key2 in scope.parentItem){
                                        if (key1 === key2){
                                            modified[key1] = scope.parentItem[key2];
                                        }
                                    }
                                }
                                eval(('scope.obj' + scope.selectedItem.path).substring(0, ('scope.obj' + scope.selectedItem.path).lastIndexOf('.')) + " = modified ;");
                                scope.refreshBuffer();
                                scope.buildStructure();
                                scope.selectItem(index);
                            }
                        };

                        scope.moveDown = function(){
                            var doModify = false;
                            var index = 0;
                            for(var j =0; j < scope.htmlLevelIds.length-1; j++){
                                if(scope.htmlLevelIds[j] === scope.selectedItem.itemId){
                                    var nextItemIndex = scope.htmlLevelIds[j+1];
                                }
                            }
                            if(nextItemIndex){
                                var nexItem = scope.buffer[nextItemIndex];
                                var nextItemLength = 0;
                                for(var n = nexItem.itemId; n < scope.buffer.length; n++){
                                    if(scope.buffer[n].path.indexOf(nexItem.path)!== -1){
                                        nextItemLength ++;
                                        continue ;
                                    }
                                    break;
                                }

                                index = scope.selectedItem.itemId + nextItemLength;
                            }

                            for(var i =0; i < scope.levelItems.length-1; i++){
                                if(scope.selectedItem.key === scope.levelItems[i]){
                                    doModify = true;
                                    var temp = scope.levelItems[i+1];
                                    scope.levelItems[i+1] = scope.levelItems[i];
                                    scope.levelItems[i] = temp;
                                    break;
                                }
                            }

                            if(doModify){
                                var modified = JSON.parse(JSON.stringify(scope.parentItem, scope.levelItems));
                                for(var key1 in modified){
                                    for(var key2 in scope.parentItem){
                                        if (key1 === key2){
                                            modified[key1] = scope.parentItem[key2];
                                        }
                                    }
                                }
                                eval(('scope.obj' + scope.selectedItem.path).substring(0, ('scope.obj' + scope.selectedItem.path).lastIndexOf('.')) + " = modified ;");
                                scope.refreshBuffer();
                                scope.buildStructure();
                                scope.selectItem(index);
                            }
                        };

                        scope.confirmRemoveItem = function() {
                            var confirm = $mdDialog.confirm()
                                .title('Are you sure you want to remove this ' + scope.selectedItem.type +'?')
                                .textContent(scope.selectedItem.type +  ' will be removed permanently from the data dictionary.')
                                .ariaLabel('remove property')
                                .targetEvent(ev)
                                .cancel('Cancel')
                                .ok('OK');
                            $mdDialog.show(confirm).then(function() {
                                scope.removeItem();
                            }, function() {
                            });
                        };

                        scope.removeItem = function(){
                            if(scope.selectedItem !== null){
                                var path = "obj" + scope.selectedItem.path;
                                var partials = path.split('.');
                                var deepKey = partials.pop();
                                var deepPath = partials.join('.');
                                var deep = $parse(deepPath);
                                delete deep(scope)[deepKey];
                                scope.refreshBuffer();
                                scope.buildStructure();
                                scope.selectedItem = null;
                            }
                        };

                        scope.addArrayItem = function(){
                            scope.selectedItem.value.push(scope.newArrayItem);
                            scope.arrayValue = scope.newArrayItem;
                            dfxMessaging.showMessage("New element successfully added to array.");
                            scope.refreshBuffer();
                        };

                        scope.removeArrayItem = function(){
                            if(scope.selectedItem.value.length > 0){
                                for(var i = 0;  i < scope.selectedItem.value.length; i++){
                                    if(scope.selectedItem.value[i] === scope.arrayValue){
                                        if(i>0){
                                            scope.arrayValue = scope.selectedItem.value[i-1]
                                            scope.selectedItem.value.splice(i, 1);
                                            scope.refreshBuffer();
                                        }else if(i === 0 && scope.selectedItem.value.length > 1){
                                            scope.arrayValue = scope.selectedItem.value[i+1]
                                            scope.selectedItem.value.splice(0, 1);
                                            scope.refreshBuffer();
                                        }else if(i === 0 && scope.selectedItem.value.length === 1){
                                            scope.selectedItem.value.splice(0, 1);
                                            scope.refreshBuffer();
                                        }
                                        break;
                                    }
                                }
                                scope.newArrayItem = "";
                                dfxMessaging.showMessage("Array element has been successfully deleted.");

                            }
                        };
                    },
                    controller: function() {
                        scope.selectedItem = null;
                            try{
                                scope.obj = JSON.parse(item.content);
                                var obj = JSON.parse(item.content);
                            }catch(e){
                                dfxMessaging.showWarning('JSON string is not valid.');
                                var obj = {};
                            }
                            scope.buffer = [];
                            scope.counter = 0;
                            scope.result = "";
                            scope.iterate(obj, "");
                            $timeout(function(){
                                $('#items-list').html(scope.result);
                                $compile($('#items-list').contents())(scope);
                            },0)

                        scope.defaultType = "String" ;
                        scope.newJsonItem = {
                            itemName:          "newItem",
                            keyName:           "keyName",
                            value:             "value",
                            selectedType:      "String"
                        };
                        scope.keyName = "";

                        scope.closeDialog = function() {
                            $mdDialog.hide();
                        };

                        scope.updateValue = function(){
                                eval("scope.obj" + scope.selectedItem.path + " = scope.selectedItem.value ;");
                                scope.refreshBuffer();
                        };
                    }
                })

            };

            angular.forEach(eventHandlers, function(handler, event) {
                scope.dropzone.on(event, handler);
            });

            scope.processDropzone = function() {
                scope.dropzone.processQueue();
            };

        }
    }
}]);

dfxStudioApp.controller("dfx_studio_deployment_controller", [ '$scope', '$mdDialog', 'dfxDeployment', 'dfxMessaging', '$filter', '$timeout', '$location', function($scope, $mdDialog, dfxDeployment, dfxMessaging, $filter, $timeout, $location) {
    $scope.description = {value : ""};
    $scope.builds = {'web': [], 'mobile': []};
    $scope.application_version = "1.0";
    $scope.build_number = {};

    /*$timeout(function(){
        for(var i =0; i < $scope.applications.length; i++){
            if($scope.applications[i].name === $scope.app_name){
                $scope.application_version = $scope.applications[i].version ;
            }
        }
    },0);*/

    $scope.platform = 0;
    $scope.building_status = 'pending...';
    $scope.new_build = {};
    $scope.host_port = $('body').attr('deploymenturl') ;

    //dfxDeployment.getAppBuilds($scope.app_name).then(function(data){
    //    $scope.platform = data.platform;
    //    $scope.compiler = data.compiler ;
    //});

    $scope.getAppBuilds = function(platform){
        dfxDeployment.getAppBuilds($scope.app_name, platform).then(function(data){
            $scope.builds[platform] = data.items;
            var max = 0;
            for(var i = 0; i < $scope.builds[platform].length; i++){
                $scope.builds[platform][i].logs = [];
                if(parseInt($scope.builds[platform][i].build_number) > max){
                    max = parseInt($scope.builds[platform][i].build_number);
                }
            }

            $scope.build_number[platform] = max;

            if(!$scope.compiler){
                $scope.compiler = data.compiler ;
            }

            dfxDeployment.getDeployedBuilds().then(function(data){
                var builds = data[$scope.app_name];
                for(var key in builds){
                    for(var i =0; i < $scope.builds[platform].length; i++){
                        if(($scope.builds[platform][i].app_version + '.' + $scope.builds[platform][i].build_number) === key){
                            $scope.builds[platform][i].is_deployed = true;
                            $scope.builds[platform][i].link = $scope.host_port + "/deploy/" + $scope.tenant_id + '/' + $scope.app_name + '/' + platform + '/' + key + "/login.html" ;
                        }
                    }
                }
            }, function(err){
                console.log('Seems deployment server doesn\'t respond');
            });
        });
    };

    $scope.getAppBuilds('web');
    $scope.getAppBuilds('mobile');

    $scope.doRebuild = function(build, platform) {
        for(var i =0; i < $scope.builds[platform].length; i++){
            if($scope.builds[platform][i].build_number === build.build_number && $scope.builds[platform][i].app_version === build.app_version){
                $scope.builds[platform][i].status = "pending..." ;
            }
        }
        var removingBuildData = {
            applicationName:    $scope.app_name,
            platform:           platform,
            applicationVersion: build.app_version,
            buildNumber:        build.build_number
        };
        dfxDeployment.deleteBuild(removingBuildData).then(function(data){
            if(build.is_deployed && build.platfrom != 'mobile'){
                dfxDeployment.deleteDeployedBuild($scope.app_name, (build.app_version + "." + build.build_number)).then(function(){
                });
            }
            $scope.doCreateNew(build, platform);
        });
    };

    $scope.doCreateNew = function(new_build, platform){
        var isBuildSaved = false;
        var url = 'http://' + $scope.compiler.host + ':' + $scope.compiler.port + '/compile?server=' + $scope.compiler.serverInfo['server-uuid'] +
            '&tenant=' + $scope.tenant_id +
            '&appid=' + $scope.app_name +
            '&platform=' + new_build.platform +
            '&build=' + $scope.application_version + '.' + new_build.build_number +
            '&schemaId=' + platform +
            '&deployto=29cd8260-e168-11e4-905f-e91235c968e0';

        dfxDeployment.runCompilerTask(url).then(function(){
            /*if(!$scope.compilerSocket){*/
            try {
                $scope.compilerSocket = io(
                    'http://' + $scope.compiler.host + ':' + $scope.compiler.port + '/' +
                    $scope.compiler.serverInfo['server-uuid'] + '_' + $scope.tenant_id,
                    {
                        'force new connection': true
                    }
                );
            } catch(err) {
                /*console.log(err);*/
            }
            /*}*/


            $scope.compilerSocket.on('status', function (data) {
                var newBuildDataForSockets = new_build;
                $scope.description = {value : ""};

                var m = data.message,
                    s = JSON.parse(m.text);

                if (s.done == s.total) {
                    newBuildDataForSockets.error = parseInt(s.errors) != 0;
                    if (!isBuildSaved) {
                        isBuildSaved = true;
                        dfxDeployment.registerNewBuild(newBuildDataForSockets, $scope.app_name, platform).then(function (res) {
                            $scope.getAppBuilds(platform);
                        });
                    }
                }
            });

            $scope.compilerSocket.on('missedStatus', function (list) {
                var newBuildDataForSockets = new_build;
                $scope.description = {value : ""};

                var log = list.log;
                var m   = log[log.length - 1],
                    s   = JSON.parse(m.text);

                if (s.done == s.total) {
                    newBuildDataForSockets.error = parseInt(s.errors) != 0;
                    if (!isBuildSaved) {
                        isBuildSaved = true;
                        dfxDeployment.registerNewBuild(newBuildDataForSockets, $scope.app_name, platform).then(function (res) {
                            $scope.getAppBuilds(platform);
                        });
                    }
                }
            });

            $scope.compilerSocket.on('update', function (data) {
                for(var i = 0; i < $scope.builds[platform].length; i++){
                    if($scope.builds[platform][i].build === data.message.build) {
                        $scope.builds[platform][i].logs.push(data.message);
                    }
                }
            });

        },function(err){
            dfxMessaging.showWarning("Seems compiler not reachable!");
            $scope.getAppBuilds('web');
            $scope.getAppBuilds('mobile');
        })
    };

    $scope.buildDialog = function(ev, platform) {
        $mdDialog.show({
            scope: $scope.$new(),
            controller: DialogController,
            templateUrl: 'studioviews/create_build_dialog.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose:true
        }).then(function() {
            var alert = null;
            if ($scope.description.value.indexOf(" ") != -1) {
                alert = "The name cannot have empty spaces";
            }
            else if ($.isEmptyObject($scope.description.value)) {
                alert = "The name cannot be empty";
            }
            else if (!/^[a-zA-Z0-9-_.]+$/.test($scope.description.value)) {
                alert = "The name can have only letters, numbers, underscore or dash symbols";
            }
            if (alert) {
                dfxMessaging.showWarning(alert);
            } else {
                $scope.build_number[platform] = $scope.build_number[platform] + 1;
                $scope.new_build = {
                    application:        $scope.app_name,
                    platform:           platform,
                    app_version:        $scope.application_version,
                    build_number:       "" +  $scope.build_number[platform],
                    build:              ($scope.application_version + '.' + $scope.build_number),
                    deployed:           false,
                    description:        $scope.description.value,
                    release_notes:      "",
                    build_date:          $filter('date')(new Date(), 'EEE MMM dd yyyy HH:mm:ss') + ' GMT' + $filter('date')(new Date(), 'Z'),
                    displayLog:          false,
                    logs:               [],
                    status:             'pending...'
                }
                $scope.builds[platform].push($scope.new_build);
                $scope.doCreateNew($scope.new_build, platform);

            }

        }, function() {
            // if cancel
        });

        function DialogController($scope, $mdDialog) {
            $scope.hide = function() {
                $mdDialog.hide();
            };
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
        }
    };

    $scope.confirmDelete = function(ev, build, platform, index) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to remove this build?')
            .textContent('Build will be removed permanently from the repository.')
            .ariaLabel('remove build')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.deleteBuild(build, platform, index);
        }, function() {
        });
    };

    $scope.deleteBuild = function(build, platform, index){
        var removingBuildData = {
            applicationName:    $scope.app_name,
            platform:           platform,
            applicationVersion: build.app_version,
            buildNumber:        build.build_number
        };
        dfxDeployment.deleteBuild(removingBuildData).then(function(data){
            $scope.builds[platform].splice(index, 1);
            $scope.getAppBuilds(platform);
            $scope.description = {value : ""};
            dfxMessaging.showMessage('Build data has been successfully deleted.');
            if(build.is_deployed){
                $scope.deleteDeployedBuild(build.app_version + "." + build.build_number);
            }
        });
    };

    $scope.showBuildLog = function(build, platform, buildindex){
        if(build.status !== 'pending'){
            if(build.displayLog){
                build.displayLog = false;
            }else{
                var body = {
                    tenant:             $scope.tenant_id,
                    applicationName:    $scope.app_name,
                    platform:           platform,
                    applicationVersion: build.app_version,
                    buildNumber:        build.build_number,
                    file:               $scope.compiler.logFile
                };
                dfxDeployment.getLogFile(body).then(function(data){
                    var infoLines = data.match(/[^\r\n]+/g);
                    infoLines.forEach(function (infoLine, index) {
                        if (index > 0) {
                            var infoDetails    = infoLine.split('%%');
                            $scope.builds[platform][buildindex].logs.push({level: infoDetails[0], text: infoDetails[2], appid: $scope.app_name}) ;
                        }
                    });
                });
                build.displayLog = true;
            }
        }
    };

    $scope.deleteDeployedBuild = function(build_version){
        dfxDeployment.deleteDeployedBuild($scope.app_name, build_version).then(function(){
            dfxMessaging.showMessage('Build data has been successfully deleted from deployment server.');
        }, function(){
            dfxMessaging.showWarning('Build data has not been deleted from deployment server') ;
        });
    };

    $scope.deployBuild = function(build, platform){
        setWaitingMessageValue(build, true);
        var body = {
            applicationName:        $scope.app_name,
            platform:               platform,
            applicationVersion:     build.app_version,
            buildNumber:            build.build_number,
            tenantId:               $scope.tenant_id
        };
        dfxDeployment.deployBuild(body).then(function(data){
            setWaitingMessageValue(build, false);
            dfxMessaging.showMessage('Build has been successfully deployed on deployment server.');
            $scope.getAppBuilds(platform);
        },function (err) {
            setWaitingMessageValue(build, false);
            dfxMessaging.showWarning('Build has been failed.');
        });
    };

    function setWaitingMessageValue(build, value) {
        $scope.builds[build.platform].forEach(function(b, index){
            if (build._id === b._id) {
                $scope.builds[build.platform][index].waitingMessage = value;
            }
        });
    }

    $scope.getDeployedQRCode = function(build) {
        dfxDeployment.getMobileApp(build).then( function(response) {
            console.log(response.data.referrer);
        });
    };

    $scope.navToCloud = function(ev) {
        $location.path( "/platform/cloud" );
    };
}]);

dfxStudioApp.controller("dfx_studio_view_controller", [ '$scope', '$routeParams', '$mdDialog', '$location', '$window', 'dfxMessaging', 'dfxViews', function($scope, $routeParams, $mdDialog, $location, $window, dfxMessaging, dfxViews) {
    $scope.app_name = $routeParams.appname;
    $scope.view_name = $routeParams.viewname;
    $scope.view_platform = $routeParams.platform;
    $scope.view = {};

    dfxViews.getOne( $scope, $scope.app_name, $scope.view_name, $scope.view_platform ).then( function(data) {
        $scope.view = data;
    });

    dfxViews.getCategories( $scope, $scope.app_name, $scope.view_platform ).then(function( data ) {
        $scope.app_categories = data.data[$scope.view_platform];
    });

    $scope.openViewDesigner = function() {
        window.localStorage.removeItem('pagePreviewName');
        $window.open( '/studio/widget/' + $scope.view_platform + '/' + $scope.app_name + '/' + $scope.view_name + '/index.html', '_blank' );
    };

    $scope.update = function() {
        dfxViews.update( $scope, $scope.view ).then(function( data ) {
            dfxMessaging.showMessage(data.data);
            $scope.getAll();
        });
    }

    $scope.delete = function(ev) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want delete this view?')
            .textContent('The view will be removed permanently from the repository.')
            .ariaLabel('delete view')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            dfxViews.delete( $scope, $scope.view ).then( function(data) {
                dfxMessaging.showMessage( 'The view has been deleted' );
                $scope.getAll();
                $location.path('/home');
            });
        }, function() {
        });
    };

    $scope.cancel = function( ev ) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure to exit the View Editor?')
            .textContent('All changes will be lost.')
            .ariaLabel('leave Page')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.getAll();
            $location.path('/home');
        }, function() {
        });
    };

}]);

dfxStudioApp.controller("dfx_studio_view_create_controller", [ '$scope', '$routeParams', '$mdDialog', '$location', '$window', 'dfxMessaging', 'dfxViews', 'dfxApplications', function($scope, $routeParams, $mdDialog, $location, $window, dfxMessaging, dfxViews, dfxApplications) {
    $scope.view = {
        "name": "NewView",
        "application": $routeParams.appname,
        "description": "",
        "wtype": "visual",
        "platform": $routeParams.platform,
        "category": "Default",
        "src": JSON.stringify({
            "properties": {},
            "definition": {
                "default": [
                    {
                        id: Math.floor(Math.random() * 1000),
                        type: "panel",
                        attributes: {
                            "name": { "value": "pnlPanel1", "status": "overridden" }
                        },
                        children:   []
                    }
                ]
            }
        }),
        "src_styles": ""
    };

    var sufix = '';
    for(var i = 0;  i < 3; i++) {
        sufix += Math.floor(Math.random() * 10);
    }
    $scope.view.name += sufix;

    dfxApplications.getUserInfo().then(function(data){
        $scope.view.owner = data.login ;
    });

    if ( $routeParams.categoryname ) {
        $scope.view.category = $routeParams.categoryname;
    }

    dfxViews.getCategories( $scope, $routeParams.appname, $routeParams.platform ).then(function( data ) {
        $scope.app_categories = data.data[$scope.view.platform];
    });

    $scope.save = function() {
        if ( /^[-a-zA-Z0-9_]+$/.test( $scope.view.name ) ) {
            dfxViews.create( $scope, $scope.view ).then( function(data) {
                dfxMessaging.showMessage('The view has been successfully created');
                $scope.getAll();
                $location.path('/view/update/'+ $scope.view.application + '/' + $scope.view.platform + '/' + $scope.view.name);
            }, function( data ) {
                dfxMessaging.showWarning( data.data.error.message );
            });
        } else {
            dfxMessaging.showWarning('Not valid View Name'); 
            $("#view-name").focus();
        }
    };

    $scope.cancel = function(ev) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want cancel?')
            .textContent('The view won\'t be created.')
            .ariaLabel('cancel add view')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.getAll();
            $location.path('/home');
        }, function() {
        });
    };

}]);

dfxStudioApp.controller("dfx_studio_view_category_controller", [ '$scope', '$routeParams', '$location', '$mdSidenav', '$mdDialog', '$timeout', 'dfxMessaging', 'dfxApplications', 'dfxAuthProviders', 'dfxViews', function( $scope, $routeParams, $location, $mdSidenav, $mdDialog, $timeout, dfxMessaging, dfxApplications, dfxAuthProviders, dfxViews) {
    $scope.app_name = $routeParams.app_name;
    $scope.view_platform = $routeParams.platform;

    dfxViews.getCategories( $scope, $scope.app_name, $scope.view_platform ).then(function( data ) {
        $scope.app_categories = [];
        for ( var i = 0; i < data.data[$scope.view_platform].length; i++ ) {
            $scope.app_categories.push(data.data[$scope.view_platform][i]);
        }
    });

    var bodyHeight = parseFloat($("body").css('height'));
    $timeout(function() {
        var scopeSourceTable = document.getElementById('scope-source-table');
        $(scopeSourceTable).css('max-height', bodyHeight-260);
    }, 0);

    $scope.addCategoryBtn = function() {
        $scope.scopeCategory = {};
        $scope.categoryMode = 'addCategory';
        var sideNavInstance = $mdSidenav('side_nav_view_category');
        sideNavInstance.toggle();
    }

    $scope.createCategory = function() {
        var regexp = /([a-z0-9_])(\w*)/gi;
        res = regexp.exec( $scope.scopeCategory.name );
        if ( res && $scope.scopeCategory.name && $scope.scopeCategory.name !== '' ) {
            dfxViews.createCategory( $scope, $scope.scopeCategory.name, $scope.app_name, $scope.view_platform ).then(function( data ) {
                if ( data.status && data.status === 200 && data.data.data !== 'Current category name already exists' ) {
                    dfxMessaging.showMessage(data.data.data);
                    $scope.app_categories = [];
                    dfxViews.getCategories( $scope, $scope.app_name, $scope.view_platform ).then(function( data ) {
                        for ( var i = 0; i < data.data[$scope.view_platform].length; i++ ) {
                            $scope.app_categories.push(data.data[$scope.view_platform][i]);
                        }
                        $scope.getAll();
                    });
                    var sideNavInstance = $mdSidenav('side_nav_view_category');
                    sideNavInstance.toggle();
                } else {
                    dfxMessaging.showWarning(data.data.data);
                }
            });
        } else {
            dfxMessaging.showWarning('Not valid Category Name');
        }
    }

    $scope.editCategoryBtn = function( category ) {
        $scope.categoryMode = 'editCategory';
        $scope.scopeCategory = category;
        $scope.toEdit = {};
        var sideNavInstance = $mdSidenav('side_nav_view_category');
        sideNavInstance.toggle();
    }

    $scope.editCategory = function( edited ) {
        var newName = edited.name;
        var regexp = /([a-z0-9_])(\w*)/gi;
        res = regexp.exec( newName );
        if ( res && newName && newName !== $scope.scopeCategory.name && newName !== '' ) {
            dfxViews.editCategory( $scope, $scope.scopeCategory.name, newName, $scope.app_name, $scope.view_platform ).then(function( data ) {
                if ( data.data.data !== 'Current category name already exists!' ) {
                    dfxMessaging.showMessage(data.data.data);
                    $scope.app_categories = [];
                    dfxViews.getCategories( $scope, $scope.app_name, $scope.view_platform ).then(function( data ) {
                        for ( var i = 0; i < data.data[$scope.view_platform].length; i++ ) {
                            $scope.app_categories.push(data.data[$scope.view_platform][i]);
                        }
                        $scope.getAll();
                    });
                    var sideNavInstance = $mdSidenav('side_nav_view_category');
                    sideNavInstance.toggle();
                } else {
                    dfxMessaging.showWarning(data.data.data);
                }
            });
        } else if ( newName === $scope.scopeCategory.name ) {
            dfxMessaging.showWarning('Category with such name already exist!');
            
        } else {
            dfxMessaging.showWarning('Not valid Category Name');
        }
    }

    $scope.deleteCategory = function( category_name ) {
        dfxViews.removeCategory( $scope, category_name, $scope.app_name, $scope.view_platform ).then(function( data ) {
            if ( data.status && data.status === 200 ) {
                dfxMessaging.showMessage(data.data.data);
                $scope.app_categories = [];
                dfxViews.getCategories( $scope, $scope.app_name, $scope.view_platform ).then(function( data ) {
                    for ( var i = 0; i < data.data[$scope.view_platform].length; i++ ) {
                        $scope.app_categories.push(data.data[$scope.view_platform][i]);
                    }
                    $scope.getAll();
                });
            } else {
                dfxMessaging.showWarning(data.data.data);
            }
        });
    }

    $scope.confirmDelete = function( ev, category_name ) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to remove this category?')
            .textContent('Category will be removed from the repository.')
            .ariaLabel('remove service')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.deleteCategory( category_name );
        }, function() {
        });
    };

    $scope.closeSidenav = function() {
        var sideNavInstance = $mdSidenav('side_nav_view_category');
        sideNavInstance.toggle();
    }
}]);

dfxStudioApp.controller("dfx_studio_page_controller", [ '$scope', '$routeParams', '$mdDialog', '$location', '$window', 'dfxMessaging', 'dfxPages', function($scope, $routeParams, $mdDialog, $location, $window, dfxMessaging, dfxPages) {
    $scope.app_name = $routeParams.appname;
    $scope.page_platform = $routeParams.platform;
    $scope.page_name = $routeParams.pagename;
    $scope.page = {};

    dfxPages.getCategories( $scope, $routeParams.appname, $scope.page_platform ).then(function( data ) {
        $scope.app_categories = data.data[$scope.page_platform];
    });

    dfxPages.getOne( $scope, $scope.app_name, $scope.page_name, $scope.page_platform ).then( function(data) {
        $scope.page = data;
    });

    $scope.openPageDesigner = function() {
        $window.open( '/studio/screen/' + $scope.app_name + '/' + $scope.page_platform + '/' + $scope.page_name + '/index.html', '_blank' );
    };

    $scope.update = function() {
        dfxPages.update( $scope, $scope.page ).then( function(data) {
            dfxMessaging.showMessage(data.data);
            $scope.getAll();
        });
    }

    $scope.delete = function(ev) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want delete this page?')
            .textContent('The page will be removed permanently from the repository.')
            .ariaLabel('delete page')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            dfxPages.delete( $scope, $scope.page ).then( function(data) {
                dfxMessaging.showMessage( 'The page has been deleted' );
                $scope.getAll();
                $location.path('/home');
            });
        }, function() {
        });
    };

    $scope.cancel = function( ev ) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure to exit the Page Editor?')
            .textContent('All changes will be lost.')
            .ariaLabel('leave Page')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.getAll();
            $location.path('/home');
        }, function() {
        });
    };

}]);

dfxStudioApp.controller("dfx_studio_page_create_controller", [ '$scope', '$routeParams', '$mdDialog', '$location', '$window', 'dfxMessaging', 'dfxPages', function($scope, $routeParams, $mdDialog, $location, $window, dfxMessaging, dfxPages) {
    $scope.page = {
        "name": "NewPage",
        "application": $routeParams.appname,
        "title": "",
        "visibility": "visible",
        "platform" : "web",
        "template": "basic",
        "category": "Default",
        "script": "dfxAppRuntime.controller('dfx_page_controller', [ '$scope', '$rootScope', function( $scope, $rootScope) {\n\t// Insert your code here\n}]);",
        "layout": {
            "rows" : [ { "height" : "100", "autoHeight": false, "columns" : [ {"width" : "100", "views" : []} ] } ]
        }
    };

    var sufix = '';
    for(var i = 0;  i < 3; i++) {
        sufix += Math.floor(Math.random() * 10);
    }
    $scope.page.name += sufix;

    if ( $routeParams.categoryname ) {
        $scope.page.category = $routeParams.categoryname;
    }

    if ( $routeParams.platform ) {
        $scope.page.platform = $routeParams.platform;
    }

    dfxPages.getCategories( $scope, $routeParams.appname, $scope.page.platform ).then(function( data ) {
        $scope.app_categories = data.data[$scope.page.platform];
    });

    //if (!$scope.platform) {
    //    $scope.page.platform = 'web';
    //    $scope.platformDisabled = false;
    //} else {
    //    $scope.page.platform = $scope.platform;
    //    $scope.platformDisabled = true;
    //}

    $scope.save = function() {
        if ( /^[-a-zA-Z0-9_]+$/.test( $scope.page.name ) ) {
            switch($scope.page.platform) {
                case 'Desktop' : $scope.page.platform = 'web'; break;
                case 'Tablet' : $scope.page.platform = 'tablet'; break;
                case 'Mobile' : $scope.page.platform = 'mobile'; break;
            }
            dfxPages.create( $scope, $scope.page ).then( function(data) {
                dfxMessaging.showMessage('The page has been successfully created');
                $scope.getAll();
                $location.path('/page/update/'+ $scope.page.application + '/' + $scope.page.platform + '/' + $scope.page.name);
            }, function( data ) {
                dfxMessaging.showWarning( data.data.error.message );
            });
        } else {
            dfxMessaging.showWarning('Not valid Page Name'); 
            $("#page-name").focus();
        }
    };

    $scope.cancel = function(ev) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want cancel?')
            .textContent('The page won\'t be created.')
            .ariaLabel('cancel add page')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.getAll();
            $location.path('/home');
        }, function() {
        });
    };

}]);

dfxStudioApp.controller("dfx_studio_page_category_controller", [ '$scope', '$routeParams', '$location', '$mdSidenav', '$mdDialog', '$timeout', 'dfxMessaging', 'dfxApplications', 'dfxAuthProviders', 'dfxPages', function( $scope, $routeParams, $location, $mdSidenav, $mdDialog, $timeout, dfxMessaging, dfxApplications, dfxAuthProviders, dfxPages) {
    $scope.app_name = $routeParams.app_name;
    $scope.page_platform = $routeParams.platform;

    dfxPages.getCategories( $scope, $scope.app_name, $scope.page_platform ).then(function( data ) {
        $scope.app_categories = [];
        for ( var i = 0; i < data.data[$scope.page_platform].length; i++ ) {
            $scope.app_categories.push(data.data[$scope.page_platform][i]);
        }
    });

    var bodyHeight = parseFloat($("body").css('height'));
    $timeout(function() {
        var scopeSourceTable = document.getElementById('scope-source-table');
        $(scopeSourceTable).css('max-height', bodyHeight-260);
    }, 0);

    $scope.addCategoryBtn = function() {
        $scope.scopeCategory = {};
        $scope.categoryMode = 'addCategory';
        var sideNavInstance = $mdSidenav('side_nav_page_category');
        sideNavInstance.toggle();
    }

    $scope.createCategory = function() {
        var regexp = /([a-z0-9_])(\w*)/gi;
        res = regexp.exec( $scope.scopeCategory.name );
        if ( res && $scope.scopeCategory.name && $scope.scopeCategory.name !== '' ) {
            dfxPages.createCategory( $scope, $scope.scopeCategory.name, $scope.app_name, $scope.page_platform ).then(function( data ) {
                if ( data.status && data.status === 200 && data.data.data !== 'Screens category with same name already exists!' ) {
                    dfxMessaging.showMessage(data.data.data);
                    $scope.app_categories = [];
                    dfxPages.getCategories( $scope, $scope.app_name, $scope.page_platform ).then(function( data ) {
                        for ( var i = 0; i < data.data[$scope.page_platform].length; i++ ) {
                            $scope.app_categories.push(data.data[$scope.page_platform][i]);
                        }
                        $scope.getAll();
                    });
                    var sideNavInstance = $mdSidenav('side_nav_page_category');
                    sideNavInstance.toggle();
                } else {
                    dfxMessaging.showWarning('Current Category Name already exists!');
                }
            });
        } else {
            dfxMessaging.showWarning('Not valid Category Name');
        }
    }

    $scope.editCategoryBtn = function( category ) {
        $scope.categoryMode = 'editCategory';
        $scope.scopeCategory = category;
        $scope.toEdit = {};
        var sideNavInstance = $mdSidenav('side_nav_page_category');
        sideNavInstance.toggle();
    }

    $scope.editCategory = function( edited ) {
        var newName = edited.name;
        var regexp = /([a-z0-9_])(\w*)/gi;
        res = regexp.exec( newName );
        if ( res && newName && newName !== $scope.scopeCategory.name && newName !== '' ) {
            dfxPages.editCategory( $scope, $scope.scopeCategory.name, newName, $scope.app_name, $scope.cat_platform ).then(function( data ) {
                if ( data.data.data !== 'Current category name already exists!' ) {
                    dfxMessaging.showMessage(data.data.data);
                    $scope.app_categories = [];
                    dfxPages.getCategories( $scope, $scope.app_name, $scope.page_platform ).then(function( data ) {
                        for ( var i = 0; i < data.data[$scope.page_platform].length; i++ ) {
                            $scope.app_categories.push(data.data[$scope.page_platform][i]);
                        }
                        $scope.getAll();
                    });
                    var sideNavInstance = $mdSidenav('side_nav_page_category');
                    sideNavInstance.toggle();
                } else {
                    dfxMessaging.showWarning(data.data.data);
                }
            });
        } else if ( newName === $scope.scopeCategory.name ) {
            dfxMessaging.showWarning('Category with such name already exist!');
            
        } else {
            dfxMessaging.showWarning('Not valid Category Name');
        }
    }

    $scope.deleteCategory = function( category_name ) {
        dfxPages.removeCategory( $scope, category_name, $scope.app_name, $scope.page_platform ).then(function( data ) {
            if ( data.status && data.status === 200 ) {
                dfxMessaging.showMessage(data.data.data);
                $scope.app_categories = [];
                dfxPages.getCategories( $scope, $scope.app_name, $scope.page_platform ).then(function( data ) {
                    for ( var i = 0; i < data.data[$scope.page_platform].length; i++ ) {
                        $scope.app_categories.push(data.data[$scope.page_platform][i]);
                    }
                    $scope.getAll();
                });
            } else {
                dfxMessaging.showWarning(data.data.data);
            }
        });
    }

    $scope.confirmDelete = function( ev, category_name ) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to remove this category?')
            .textContent('Category will be removed from the repository.')
            .ariaLabel('remove service')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.deleteCategory( category_name );
        }, function() {
        });
    };

    $scope.closeSidenav = function() {
        var sideNavInstance = $mdSidenav('side_nav_page_category');
        sideNavInstance.toggle();
    }
}]);

dfxStudioApp.controller("dfx_studio_settings_controller", [ '$scope', function($scope) {

}]);

dfxStudioApp.controller("dfx_studio_app_roles_controller", [ '$scope', '$routeParams', '$mdDialog', '$mdSidenav', 'dfxAppRoles', 'dfxMessaging',
    function($scope, $routeParams, $mdDialog, $mdSidenav, dfxAppRoles, dfxMessaging)
{
    var parentScope = $scope.$parent.$parent;
    parentScope.app_roles = $scope;

    $scope.app_name = $routeParams.appname;

    dfxAppRoles.getAll($scope, $scope.app_name).then(function (data) {
        $scope.app_roles = data;
    });

    $scope.initNewRole = function() {
        dfxAppRoles.getAllRights($scope, $scope.app_name).then(function (rights) {
            $scope.operation = 'create';
            if ($scope.app_users) $scope.app_users.operation = '';

            $scope.new_app_role = {'name': '', 'description': ''};
            $scope.all_rights = rights;

            var sideNavInstance = $mdSidenav('side_nav_left');
            sideNavInstance.toggle();
        });
    };

    $scope.create = function() {
        var rights = $scope.all_rights.map(function(right) {
            return right.isChecked
                ? 'DATAQUERY::' + right.name
                : null;
        }).filter(function (right) {
            return right ? true : false;
        });

        var to_update = {
            name:        $scope.new_app_role.name,
            app_name:    $scope.app_name,
            rights:      rights,
            description: $scope.new_app_role.description
        };

        dfxAppRoles.create($scope, to_update).then(function success() {
            var sideNavInstance = $mdSidenav('side_nav_left');
            $scope.app_roles.push($scope.new_app_role);
            sideNavInstance.toggle();

            //update role because rights are not added when creating role
            dfxAppRoles.update($scope, to_update).then(function () {
                dfxMessaging.showMessage('Role successfully created.');
            });
        }, function fail() {
            dfxMessaging.showWarning('This role already exists.');
        });
    };

    $scope.edit = function(role_name) {
        dfxAppRoles.edit($scope, $scope.app_name, role_name).then(function (role) {
            $scope.operation = 'update';
            if ($scope.app_users) $scope.app_users.operation = '';

            $scope.current_app_role = role;
            $scope.all_rights = role.all_dataqueries.map(function(dataquery) {
                return role.rights.data.indexOf('DATAQUERY::' + dataquery.name) > -1
                    ? {'isChecked': true, 'name': dataquery.name}
                    : {'isChecked': false, 'name': dataquery.name};
            });

            var sideNavInstance = $mdSidenav('side_nav_left');
            sideNavInstance.toggle();
        });
    };

    $scope.update = function() {
        var rights = $scope.all_rights.map(function(right) {
            return right.isChecked
                ? 'DATAQUERY::' + right.name
                : null;
        }).filter(function (right) {
            return right ? true : false;
        });

        var to_update = {
            name:        $scope.current_app_role.data.name,
            app_name:    $scope.app_name,
            rights:      rights,
            description: $scope.current_app_role.data.description
        };

        dfxAppRoles.update($scope, to_update).then(function () {
            for (var i = 0; i < $scope.app_roles.length; i++) {
                if ($scope.app_roles[i].name === $scope.current_app_role.data.name) {
                    $scope.app_roles[i] = $scope.current_app_role.data;
                    break;
                }
            }
            var sideNavInstance = $mdSidenav('side_nav_left');
            sideNavInstance.toggle();
            dfxMessaging.showMessage('Role successfully updated.');
        });
    };

    $scope.delete = function(role_name) {
        dfxAppRoles.delete($scope, $scope.app_name, role_name).then(function () {
            for (var i = 0; i < $scope.app_roles.length; i++) {
                if ($scope.app_roles[i].name === role_name){
                    $scope.app_roles.splice(i, 1);
                    break;
                }
            }
        });
    };

    $scope.closeSidenav = function(){
        var sideNavInstance = $mdSidenav('side_nav_left');
        sideNavInstance.toggle();
    };

    $scope.confirmDelete = function(ev, role) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to remove this role?')
            .textContent('Role will be removed from repository.')
            .ariaLabel('remove role')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.delete(role.name);
        }, function() {
        });
    };
}]);

dfxStudioApp.controller("dfx_studio_app_users_controller", [ '$scope', '$compile', '$routeParams', '$mdSidenav', '$mdDialog', 'dfxMessaging', 'dfxAppUsers', 'dfxUserDefinition',
    function($scope, $compile, $routeParams, $mdSidenav, $mdDialog, dfxMessaging, dfxAppUsers, dfxUserDefinition)
{
    var parentScope = $scope.$parent.$parent;
    parentScope.app_users = $scope;

    $scope.app_name = $routeParams.appname;

    dfxAppUsers.getAll( $scope, $scope.app_name ).then(function ( data ) {
        $scope.users = data;
    });

    $scope.changePass = function() {
        $scope.current_app_user.pass_changed = true;
    };

    $scope.showPassMessage = function(user) {
        user.show_pass_message = true;
    };

    $scope.initNewUser = function() {
        dfxAppUsers.getAllRoles($scope, $scope.app_name).then(function (roles) {
            $scope.operation = 'create';
            if ($scope.app_roles) $scope.app_roles.operation = '';

            $scope.new_app_user = {'login': '', 'firstName': '', 'lastName': '', 'email': '', 'new_pass': ''};
            $scope.new_app_user.all_roles = roles;

            // check guest role by default
            $scope.new_app_user.default_role_updated = 'guest';
            $scope.app_users.new_app_user.roles_updated = {'guest': true};

            var sideNavInstance = $mdSidenav('side_nav_left');
            sideNavInstance.toggle().then(function () {
                // properties from user definition
                dfxUserDefinition.getUserDefinition($scope, $scope.app_name).then(function (user_def) {
                    $scope.user_definition = user_def;
                    addTree($scope.user_definition);
                });
            });
        });
    };

    $scope.create = function() {
        var to_create = {
            login:     $scope.new_app_user.login,
            app_name:  $scope.app_name,
            firstName: $scope.new_app_user.firstName,
            lastName:  $scope.new_app_user.lastName,
            email:     $scope.new_app_user.email,
            new_pass:  $scope.new_app_user.new_pass,
            roles:     {
                default: $scope.new_app_user.default_role_updated,
                list:    []
            }
        };

        // collect user roles
        if ($scope.app_users.new_app_user.roles_updated) {
            var props = Object.keys($scope.app_users.new_app_user.roles_updated);
            for (var i = 0; i < props.length; i++) {
                if ($scope.app_users.new_app_user.roles_updated[ props[i] ] == true) {
                    to_create.roles.list.push(props[i]);
                }
            }
        }

        var additionalProperties = {};
        collectAdditionalProperties($scope.user_definition, additionalProperties);
        to_create.properties = additionalProperties;

        dfxAppUsers.create($scope, to_create).then(function (user) {
            // update created user to store additional properties - to avoid re-write engine
            dfxAppUsers.update($scope, to_create).then(function () {
                $scope.users.push({
                    credentials: {login: user.login},
                    name: {first: user.firstName, last: user.lastName}
                });
                var sideNavInstance = $mdSidenav('side_nav_left');
                sideNavInstance.toggle();
                dfxMessaging.showMessage('User successfully created.');
            });
        }, function fail(response) {
            dfxMessaging.showWarning(response.data.data);
        });
    };

    $scope.edit = function(user_login) {
        dfxAppUsers.edit($scope, $scope.app_name, user_login).then(function (user) {
            $scope.operation = 'update';
            if ($scope.app_roles) $scope.app_roles.operation = '';

            $scope.current_app_user = user;
            $scope.current_app_user.roles_updated = {};

            $scope.current_app_user.pass_changed = false;
            $scope.current_app_user.new_pass = "newpass";
            $scope.current_app_user.repeat_pass = "";
            $scope.current_app_user.pass_matching = false;
            $scope.current_app_user.show_pass_message = false;

            // show which roles are checked (checkboxes) and which is main (radio)
            $scope.current_app_user.default_role_updated = $scope.current_app_user.roles.default;

            for (var i = 0; i < $scope.current_app_user.roles.list.length; i++) {
                var nextCheckedRole = $scope.current_app_user.roles.list[i];
                $scope.app_users.current_app_user.roles_updated[nextCheckedRole] = true;
            }

            var sideNavInstance = $mdSidenav('side_nav_left');
            sideNavInstance.toggle().then(function () {
                // properties from user definition
                $scope.user_definition = user.user_def;
                addTree($scope.user_definition);
            });
        });
    };

    $scope.update = function() {
        var to_update = {
            login:     $scope.current_app_user.login,
            app_name:  $scope.app_name,
            firstName: $scope.current_app_user.firstName,
            lastName:  $scope.current_app_user.lastName,
            email:     $scope.current_app_user.email,
            roles:     {
                default: $scope.current_app_user.default_role_updated,
                list:    []
            }
        };

        // collect user roles
        if ($scope.app_users.current_app_user.roles_updated) {
            var props = Object.keys($scope.app_users.current_app_user.roles_updated);
            for (var i = 0; i < props.length; i++) {
                if ($scope.app_users.current_app_user.roles_updated[ props[i] ] == true) {
                    to_update.roles.list.push(props[i]);
                }
            }
        }

        var additionalProperties = {};
        collectAdditionalProperties($scope.user_definition, additionalProperties);
        to_update.properties = additionalProperties;

        dfxAppUsers.update($scope, to_update, $scope.current_app_user.new_pass, $scope.current_app_user.pass_changed).then(function () {
            for (var i = 0; i < $scope.users.length; i++) {
                if ($scope.users[i].credentials.login === $scope.current_app_user.login) {
                    $scope.users[i].name.first = $scope.current_app_user.firstName;
                    $scope.users[i].name.last = $scope.current_app_user.lastName;
                    break;
                }
            }
            var sideNavInstance = $mdSidenav('side_nav_left');
            sideNavInstance.toggle();
            dfxMessaging.showMessage('User successfully updated.');
        });
    };

    $scope.delete = function(user_login) {
        dfxAppUsers.delete($scope, $scope.app_name, user_login).then(function () {
            for (var i = 0; i < $scope.users.length; i++) {
                if ($scope.users[i].credentials.login === user_login){
                    $scope.users.splice(i, 1);
                    break;
                }
            }
        });
    };

    $scope.confirmDelete = function(ev, user_login) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to remove this user?')
            .textContent('User will be removed from repository.')
            .ariaLabel('remove user')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.delete(user_login);
        }, function() {
        });
    };

    $scope.closeSidenav = function(){
        var sideNavInstance = $mdSidenav('side_nav_left');
        sideNavInstance.toggle();
    };

    $scope.$watch("new_app_user.repeat_pass", function(newValue) {
        if (newValue) {
            if (newValue===$scope.new_app_user.new_pass) {
                $scope.new_app_user.pass_matching = true;
            }else{
                $scope.new_app_user.pass_matching = false;
            }
        }
    });

    $scope.$watch("new_app_user.default_role_updated", function(newValue) {
        if (newValue) {
            $scope.app_users.new_app_user.roles_updated = $scope.app_users.new_app_user.roles_updated || {};
            $scope.app_users.new_app_user.role_updated_disabled =  $scope.app_users.new_app_user.role_updated_disabled || {};

            $scope.app_users.new_app_user.roles_updated[newValue] = true;

            var props = Object.keys($scope.app_users.new_app_user.roles_updated);
            for (var i = 0; i < props.length; i++) {
                if (newValue == props[i]) {
                    $scope.app_users.new_app_user.role_updated_disabled[ props[i] ] = true;
                } else {
                    $scope.app_users.new_app_user.role_updated_disabled[ props[i] ] = false;
                }
            }
        }
    });

    $scope.$watch("current_app_user.repeat_pass", function(newValue) {
        if (newValue) {
            if (newValue===$scope.current_app_user.new_pass) {
                $scope.current_app_user.pass_matching = true;
            }else{
                $scope.current_app_user.pass_matching = false;
            }
        }
    });

    $scope.$watch("current_app_user.default_role_updated", function(newValue) {
        if (newValue) {
            $scope.app_users.current_app_user.roles_updated = $scope.app_users.current_app_user.roles_updated || {};
            $scope.app_users.current_app_user.role_updated_disabled =  $scope.app_users.current_app_user.role_updated_disabled || {};

            $scope.app_users.current_app_user.roles_updated[newValue] = true;

            var props = Object.keys($scope.app_users.current_app_user.roles_updated);
            for (var i = 0; i < props.length; i++) {
                if (newValue == props[i]) {
                    $scope.app_users.current_app_user.role_updated_disabled[ props[i] ] = true;
                } else {
                    $scope.app_users.current_app_user.role_updated_disabled[ props[i] ] = false;
                }
            }
        }
    });

    var buildTree = function(data, path, is_root_level) {
        var sub_tree = '<ul class="dfx-studio-explorer-treeview-content">';

        var props = Object.keys(data);
        for (var i = 0; i < props.length; i++) {
            if (data[ props[i] ].mandatory == 'true') continue;

            $scope.isThereOptionalProps = true;

            sub_tree += '<li>';

            var current_path = path + '.' + props[i];

            if (data[ props[i] ].type == 'subdocument') {
                sub_tree += '<input class="dfx-studio-explorer-treeview-button" type="checkbox" />' +
                    '<label ng-click="editUserDefinitionPropsNode(' + current_path + ', \'' + props[i] + '\',' + is_root_level + ', \'' + current_path + '\')">' + props[i] + '</label>';

                sub_tree += buildTree(data[ props[i]].structure, current_path + '.structure', false);
            } else {
                sub_tree += '<label ng-click="editUserDefinitionPropsNode(' + current_path + ', \'' + props[i] + '\',' + is_root_level + ', \'' + current_path + '\')">' + props[i] + '</label>';
            }

            sub_tree += '</li>';
        }
        sub_tree += '</ul>';

        return sub_tree;
    };

    var addTree = function(data) {
        $scope.isThereOptionalProps = false;
        var tree = buildTree(data, 'user_definition', true);

        var element = angular.element(tree);
        $compile(element.contents())($scope);
        $("#dfx_studio_user_properties_tree").html(element);
    };

    $scope.editUserDefinitionPropsNode = function(prop, prop_name, is_root_level, path_to_prop) {
        prop.defaults = getCurrentAppUserNodeValue(path_to_prop) || prop.defaults;

        $scope.user_definition.current_node = prop;
        $scope.user_definition.current_node_name = prop_name;
        $scope.user_definition.current_node_path = path_to_prop;
        $scope.user_definition.current_node_root_level = is_root_level;
    };

    var getCurrentAppUserNodeValue = function(user_def_path_to_prop) {
        var currentAppUserNodeValue = $scope.$parent.$parent.app_users.current_app_user || $scope.$parent.$parent.app_users.new_app_user;

        var splitPath = user_def_path_to_prop.split('.');
        for (var i = 0; i < splitPath.length; i++) {
            if (splitPath[i] == 'user_definition' || splitPath[i] == 'structure') continue;

            currentAppUserNodeValue = currentAppUserNodeValue ? currentAppUserNodeValue[ splitPath[i] ] : null;
        }
        return currentAppUserNodeValue;
    };

    function multiIndex(obj, is) {  // obj,['1','2','3'] -> ((obj['1'])['2'])['3']
        return is.length ? multiIndex(obj[is[0]], is.slice(1)) : obj
    }

    $scope.$watch("user_definition.current_node.defaults", function(newValue) {
        if (newValue) {
            var currentAppUser = $scope.$parent.$parent.app_users.current_app_user || $scope.$parent.$parent.app_users.new_app_user;

            var splitPath = $scope.user_definition.current_node_path.split('.').filter(function (elem) {
                return elem != 'user_definition' && elem != 'structure';
            });
            splitPath.splice(-1, 1);
            var currentAppUserNode = multiIndex(currentAppUser, splitPath);
            if (currentAppUserNode) currentAppUserNode[ $scope.user_definition.current_node_name ] = newValue;
        }
    });

    var collectAdditionalProperties = function(user_definition_data, app_user_data) {
        var props = Object.keys(user_definition_data);
        for (var i = 0; i < props.length; i++) {
            if (props[i].indexOf('current_node') == 0) continue;
            if (user_definition_data[ props[i] ].mandatory == 'true') continue;

            if (user_definition_data[ props[i] ].type == 'subdocument') {
                app_user_data[ props[i] ] = {};
                collectAdditionalProperties(user_definition_data[ props[i] ].structure, app_user_data[ props[i] ]);
            } else {
                app_user_data[ props[i] ] = user_definition_data[ props[i]].defaults;
            }
        }
    };
    //TODO:
    //1) drop-downs when editing user props for boolean etc (check if it's saved as "false" or false)
    //2) assign to variable as asked? already assigned normally
}]);

dfxStudioApp.controller("dfx_studio_user_definition_controller", [ '$scope', '$routeParams', '$mdDialog', '$compile', 'dfxMessaging', 'dfxUserDefinition',
    function($scope, $routeParams, $mdDialog, $compile, dfxMessaging, dfxUserDefinition)
{
    var parentScope = $scope.$parent.$parent;
    parentScope.user_definition = $scope;

    $scope.app_name = $routeParams.appname;

    function multiIndex(obj, is) {  // obj,['1','2','3'] -> ((obj['1'])['2'])['3']
        return is.length ? multiIndex(obj[is[0]], is.slice(1)) : obj
    }
    function pathIndex(obj, is) {   // obj,'1.2.3' -> multiIndex(obj,['1','2','3'])
        return multiIndex(obj, is.split('.'))
    }

    var buildTree = function(data, path, is_root_level) {
        var sub_tree = '<ul class="dfx-studio-explorer-treeview-content">';

        var props = Object.keys(data);
        for (var i = 0; i < props.length; i++) {
            if (props[i].indexOf('current_node') == 0) continue;

            sub_tree += '<li>';

            var current_path = path + '.' + props[i];

            if (data[ props[i] ].type == 'subdocument') {
                sub_tree += '<input class="dfx-studio-explorer-treeview-button" type="checkbox" />' +
                    '<label ng-click="editUserDefinitionNode(' + current_path + ', \'' + props[i] + '\',' + is_root_level + ', \'' + current_path + '\')">' + props[i] + '</label>';

                sub_tree += buildTree(data[ props[i]].structure, current_path + '.structure', false);
            } else {
                sub_tree += '<label ng-click="editUserDefinitionNode(' + current_path + ', \'' + props[i] + '\',' + is_root_level + ', \'' + current_path + '\')">' + props[i] + '</label>';
            }

            sub_tree += '</li>';
        }
        sub_tree += '</ul>';

        return sub_tree;
    };

    var addTree = function(data) {
        var tree = buildTree(data, 'user_definition', true);

        var element = angular.element(tree);
        $compile(element.contents())($scope);
        $("#dfx_studio_user_definition_tree").html(element);
    };

    var clearCurrentNode = function() {
        delete $scope.user_definition.current_node;
        delete $scope.user_definition.current_node_name;
        delete $scope.user_definition.current_node_path;
        delete $scope.user_definition.current_node_root_level;
    };

    dfxUserDefinition.getUserDefinition($scope, $scope.app_name).then(function (data) {
        $scope.user_definition = data;
        $scope.operation = 'update_user_definition';//to show properties area from the beginning
        addTree(data);
    });

    $scope.editUserDefinitionNode = function(prop, prop_name, is_root_level, path_to_prop) {
        $scope.operation = 'update_user_definition';
        $scope.user_definition.current_node = prop;
        $scope.user_definition.current_node_name = prop_name;
        $scope.user_definition.current_node_path = path_to_prop;
        $scope.user_definition.current_node_root_level = is_root_level;
    };

    $scope.unselectUserDefinitionNode = function() {
        $scope.operation = 'update_user_definition';
        clearCurrentNode();
    };

    var renameNode = function() {
        //TODO: check ALL nodes for renaming, not only current one - OR next solution -
        //TODO: call rename after each changes in node name? not too much to rebuild tree every time if typing too fast?

        // renaming node - remove node with old name and add same node with new name
        if ($scope.user_definition.current_node) {
            var lastPoint  = $scope.user_definition.current_node_path.lastIndexOf('.');
            var oldName    = $scope.user_definition.current_node_path.substring(lastPoint + 1);
            var parentPath = $scope.user_definition.current_node_path.substring(0, lastPoint);
            var parentObj  = pathIndex($scope, parentPath);
            if (oldName !== $scope.user_definition.current_node_name) {
                Object.defineProperty(parentObj, $scope.user_definition.current_node_name,
                    Object.getOwnPropertyDescriptor(parentObj, oldName));
                delete parentObj[oldName];
            }
            clearCurrentNode();
        }
    };

    $scope.updateUserDefinition = function() {
        renameNode();

        dfxUserDefinition.updateUserDefinition($scope, $scope.app_name, $scope.user_definition).then(function () {
            dfxMessaging.showMessage('User definition was successfully updated.');
            addTree($scope.user_definition);
        });
    };

    $scope.loadUserDefinitionCreationMenu = function($event) {
        $scope.closeUserDefinitionCreationMenu();
        var snippet = '<md-whiteframe style="left:'+($event.x-5)+'px;top:'+($event.y-5)+'px;width:200px" class="md-whiteframe-4dp dfx-studio-explorer-popmenu" ng-mouseleave="closeUserDefinitionCreationMenu()">';
        snippet += '<a href="" ng-click="addUserDefinitionObject()">Create Object</a><br>';
        snippet += '<a href="" ng-click="addUserDefinitionProperty()">Create Property</a>';
        snippet += '</md-whiteframe>';
        angular.element(document.getElementById('dfx-studio-main-body')).append($compile(snippet)($scope));
    };

    $scope.closeUserDefinitionCreationMenu = function($event) {
        $('.dfx-studio-explorer-popmenu').remove();
    };

    var subdocumentDef = {
        mandatory: 'false',
        pass: 'false',
        type: 'subdocument',
        structure: {}
    };

    var propertyDef = {
        defaults: '',
        mandatory: 'false',
        pass: 'false',
        title: 'property',
        type: 'string'
    };

    $scope.addUserDefinitionObject = function() {
        var subdocumentDefCopy = angular.copy(subdocumentDef);

        if ($scope.user_definition.current_node && $scope.user_definition.current_node.type == 'subdocument' && $scope.user_definition.current_node.mandatory == 'true')
        {
            dfxMessaging.showWarning($scope.user_definition.current_node_name + ' is a main property and can not be modified');
        }
        else if ($scope.user_definition.current_node && $scope.user_definition.current_node.type != 'subdocument') {
            dfxMessaging.showWarning('New object can be added only to another object.');
        }
        else if ($scope.user_definition.current_node && $scope.user_definition.current_node.type == 'subdocument' &&
            $scope.user_definition.current_node.mandatory != 'true' && $scope.user_definition.current_node.structure.new_object)
        {
            dfxMessaging.showWarning('Object with that name already exists at this level.');
        }
        else if (!$scope.user_definition.current_node && $scope.user_definition.new_object)
        {
            dfxMessaging.showWarning('Object with that name already exists at this level.');
        }
        else if ($scope.user_definition.current_node && $scope.user_definition.current_node.type == 'subdocument' && $scope.user_definition.current_node.mandatory != 'true')
        {
            $scope.user_definition.current_node.structure.new_object = subdocumentDefCopy;
        }
        else if (! $scope.user_definition.current_node)
        {
            $scope.user_definition.new_object = subdocumentDefCopy;
        }

        addTree($scope.user_definition);
    };

    $scope.addUserDefinitionProperty = function() {
        var propertyDefCopy = angular.copy(propertyDef);

        if ($scope.user_definition.current_node && $scope.user_definition.current_node.type == 'subdocument' && $scope.user_definition.current_node.mandatory == 'true')
        {
            dfxMessaging.showWarning($scope.user_definition.current_node_name + ' is a main property and can not be modified');
        }
        else if ($scope.user_definition.current_node && $scope.user_definition.current_node.type != 'subdocument') {
            dfxMessaging.showWarning('New property can be added only to object.');
        }
        else if ($scope.user_definition.current_node && $scope.user_definition.current_node.type == 'subdocument' &&
            $scope.user_definition.current_node.mandatory != 'true' && $scope.user_definition.current_node.structure.new_property)
        {
            dfxMessaging.showWarning('Property with that name already exists at this level.');
        }
        else if (!$scope.user_definition.current_node && $scope.user_definition.new_property)
        {
            dfxMessaging.showWarning('Property with that name already exists at this level.');
        }
        else if ($scope.user_definition.current_node && $scope.user_definition.current_node.type == 'subdocument' && $scope.user_definition.current_node.mandatory != 'true')
        {
            $scope.user_definition.current_node.structure.new_property = propertyDefCopy;
        }
        else if (! $scope.user_definition.current_node)
        {
            $scope.user_definition.new_property = propertyDefCopy;
        }

        addTree($scope.user_definition);
    };

    $scope.delete = function() {
        if ($scope.user_definition.current_node && $scope.user_definition.current_node.mandatory == 'true') {
            dfxMessaging.showWarning($scope.user_definition.current_node_name + ' is a main property and can not be removed');
            return;
        }

        var lastPoint = $scope.user_definition.current_node_path.lastIndexOf('.');
        var oldName = $scope.user_definition.current_node_path.substring(lastPoint + 1);
        var parentPath = $scope.user_definition.current_node_path.substring(0, lastPoint);
        var parentObj = pathIndex($scope, parentPath);
        delete parentObj[oldName];

        clearCurrentNode();
        addTree($scope.user_definition);
        dfxUserDefinition.updateUserDefinition($scope, $scope.app_name, $scope.user_definition);
    };

    $scope.confirmDelete = function(ev) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to remove this node?')
            .textContent('This node will be removed from repository.')
            .ariaLabel('remove node')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.delete();
        }, function() {
        });
    };
}]);

dfxStudioApp.controller("dfx_studio_api_so_controller", [ '$rootScope', '$scope', '$routeParams', '$location', '$http', '$q', '$mdSidenav', '$mdDialog', '$timeout', 'dfxMessaging', 'dfxApplications', 'dfxAuthProviders', 'dfxApiServiceObjects', function($rootScope, $scope, $routeParams, $location, $http, $q, $mdSidenav, $mdDialog, $timeout, dfxMessaging, dfxApplications, dfxAuthProviders, dfxApiServiceObjects) {
    $scope.app_name = $routeParams.appname;
    $scope.api_so = {
        "application": $scope.app_name,
        "category": "Default",
        "name": "SampleService",
        "description": "This is a sample Service",
        "selector": "root",
        "visibility": "visible",
        "lock": { "status": "unlocked" },
        "apiRoutes": []
    };

    var sufix = '';
    for(var i = 0;  i < 3; i++) {
        sufix += Math.floor(Math.random() * 10);
    }
    $scope.api_so.name += sufix;

    $scope.serviceMode = 'serviceAdd';
    $scope.serviceModeBtn = 'serviceAdd';

    if ( $routeParams.categoryname ) {
        $scope.api_so.category = $routeParams.categoryname;
    }

    if ( $routeParams.api_so_name ) {
        $scope.serviceMode = 'serviceEdit';
        $scope.serviceModeBtn = 'serviceEdit';
        $scope.api_so_name = $routeParams.api_so_name;
        dfxApiServiceObjects.getOne( $scope, $scope.app_name, $scope.api_so_name ).then( function( data ) {
            $scope.api_so = data.data.query;
            $scope.api_so.persistence = 'none';
            delete $scope.api_so._id;
            $scope.api_so.apiRoutes = data.data.apiRoutes;
        });
    }

    var unsaved = false;
    $scope.$on('$locationChangeStart', function($event, newUrl) {
        var newUrl = newUrl.split('#')[1];
        if ( !unsaved && $scope.serviceMode === 'serviceEdit' ) {
            var formatedRoutes = [];
            dfxApiServiceObjects.getOne( $scope, $scope.app_name, $scope.api_so_name ).then( function( data ) {
                if ( data.data.query ) {
                    var from_server = data.data.query;
                    delete from_server._id;
                    angular.forEach(from_server.apiRoutes, function (value, key) {
                        formatedRoutes.push({
                            "name": key,
                            "data": value
                        });
                    });
                    from_server.apiRoutes = formatedRoutes;
                    from_server.requestDate = $scope.api_so.requestDate;
                    from_server.persistence = $scope.api_so.persistence;

                    var equalApi = angular.equals($scope.api_so, from_server);

                    if ( !equalApi ) {
                        var confirm = $mdDialog.confirm()
                            .title('Are you sure to exit the API Service Object Editor?')
                            .textContent('All changes will be lost.')
                            .ariaLabel('leave API SO')
                            .targetEvent(null)
                            .cancel('Cancel')
                            .ok('OK');
                        $mdDialog.show(confirm).then(function() {
                            unsaved = true;
                            $location.path(newUrl);
                        }, function() {
                        });
                    } else {
                        unsaved = true;
                        $location.path(newUrl);
                    }
                } else {
                    unsaved = true;
                    $location.path(newUrl);
                }
            });
            $event.preventDefault();
        } else if ( !unsaved && $scope.serviceMode === 'serviceAdd' ) {
            if ( $location.path() !== ('/api_so/update/' + $scope.app_name + '/' + $scope.api_so.name) ) {
                var confirm = $mdDialog.confirm()
                    .title('Are you sure to exit the API Service Object Editor?')
                    .textContent('All changes will be lost.')
                    .ariaLabel('leave API SO')
                    .targetEvent(null)
                    .cancel('Cancel')
                    .ok('OK');
                $mdDialog.show(confirm).then(function() {
                    unsaved = true;
                    $location.path(newUrl);
                }, function() {
                });
                $event.preventDefault();
            } else {
                unsaved = true;
                $location.path(newUrl);
            }
        }
    });

    $scope.api_sources = [];
    var popupServices = document.getElementById('add-services'),
        popupServicesMask = document.getElementById('add-services-backdrop'),
        bodyHeight = parseFloat($("body").css('height'));
    $timeout(function() {
        var scopeSourceTable = document.getElementById('scope-source-table');
        $(scopeSourceTable).css('max-height', bodyHeight-320);
    }, 0);

    dfxApiServiceObjects.getAll( $scope, $scope.app_name ).then( function( data ) {
        $scope.strongLoopProvider = '';
        for ( var i = 0; i < data.data.data.length; i++ ) {
            $scope.api_sources.push( data.data.data[i] );
        };
    });

    dfxApiServiceObjects.getCategories( $scope, $scope.app_name ).then( function( data ) {
        $scope.apiSoCategories = data.data.querycats;
    });

    dfxApiServiceObjects.getCatalog( $scope ).then( function( data ) {
        $scope.notAuthSources = [];
        $scope.catalogSources = data.data;
        for ( var key in $scope.catalogSources ) {
            if ( $scope.catalogSources[key].auth === false ) {
                $scope.notAuthSources.push({
                    "datasource": key,
                    "auth"      : $scope.catalogSources[key].auth,
                    "data"      : $scope.catalogSources[key].data
                });
            }
        }
        $scope.listSources = [];
    });

    $scope.validateServiceUrls = function() {
        $scope.urlErrors = [];
        var getPromise = function(i) {
            var deferred = $q.defer();

            dfxApiServiceObjects.validateSoUrl( $scope, $scope.api_so.apiRoutes[i].name, $scope.app_name, $scope.api_so.apiRoutes[i].data.uuid )
                .then(function( data ) {
                    if ( data.data.data ) {
                        $scope.notValidUrl = true;
                        $scope.notValidUrlName = $scope.api_so.apiRoutes[i].name;
                        var urlErrorItem = {
                            "index": i,
                            "errorUrl": $scope.api_so.apiRoutes[i].name,
                            "errorName": data.data.data
                        }
                        $scope.urlErrors.push(urlErrorItem);
                    }
                    deferred.resolve();
                });

            return deferred.promise;
        };

        $scope.notValidUrl = false;
        $scope.notValidUrlName = '';
        var total = $scope.api_so.apiRoutes.length;
        var promises = [];
        for (var i = 0; i < total; i++) {
            promises.push(getPromise(i));
        };

        return $q.all(promises);
    }

    $scope.saveApiSo = function() {
        $scope.api_so.application = $scope.app_name;
        $scope.renderRoutesFilters();
        if ( $scope.notRenderedFilters ) {
            dfxMessaging.showWarning("API Route " + $scope.notRenderedFilterName + " filters name can't be empty");
        } else {
            $scope.validateServiceUrls().then(function () {
                $scope.urlErrors.sort(function (a, b) {
                    return a.index - b.index;
                });
                if ($scope.urlErrors.length > 0) {
                    switch ($scope.urlErrors[0].errorName) {
                        case 'Service url name incorrect':
                            dfxMessaging.showWarning('Service url name "' + $scope.urlErrors[0].errorUrl + '" is incorrect');
                            break;
                        case 'Current service url already exists':
                            dfxMessaging.showWarning('Service url "' + $scope.urlErrors[0].errorUrl + '" already exists');
                            break;
                    }
                } else {
                    if ($scope.api_so.name) {
                        dfxApiServiceObjects.createSo($scope, $scope.api_so).then(function (data) {
                            if (data.status && data.status === 200 && data.data.data === 'API Route created!') {
                                dfxMessaging.showMessage('The API Service Object has been created');
                                $scope.getAll();
                                $location.path('/api_so/update/' + $scope.api_so.application + '/' + $scope.api_so.name);
                            } else {
                                dfxMessaging.showWarning(data.data.data);
                            }
                        }, function (data) {
                            dfxMessaging.showWarning(data.data.error.message);
                        });
                    } else {
                        $scope.selected_tab = 0;
                        $scope.serviceNameError = "Service name cannot be empty";
                        $scope.validNameResult = 'failed';
                        dfxMessaging.showWarning('There was an error trying to create the new API Service Object');
                    }
                }
            });
        }
    }

    $scope.updateApiSo = function() {
        $scope.api_so.application = $scope.app_name;
        $scope.renderRoutesFilters();
        if ( $scope.notRenderedFilters ) {
            dfxMessaging.showWarning("API Route " + $scope.notRenderedFilterName + " filters name can't be empty");
        } else {
            $scope.validateServiceUrls().then(function() {
                $scope.urlErrors.sort(function(a,b) {
                    return a.index - b.index;
                });
                if ( $scope.urlErrors.length > 0 ) {
                    switch ( $scope.urlErrors[0].errorName ) {
                        case 'Service url name incorrect': dfxMessaging.showWarning('Service url name "' + $scope.urlErrors[0].errorUrl + '" is incorrect'); break;
                        case 'Current service url already exists': dfxMessaging.showWarning('Service url "' + $scope.urlErrors[0].errorUrl + '" already exists'); break;
                    }
                } else {
                    dfxApiServiceObjects.updateSo( $scope, $scope.api_so ).then(function( data ) {
                        if ( data.status && data.status === 200 ) {
                            dfxMessaging.showMessage('The API Service Object has been successfully updated');
                            dfxApiServiceObjects.getOne( $scope, $scope.app_name, $scope.api_so_name ).then(function( data ) {
                                if ( data.data.apiRoutes ) {
                                    $scope.api_so.apiRoutes = data.data.apiRoutes;
                                    $scope.getAll();
                                }
                            });
                        } else {
                            dfxMessaging.showWarning('There was an error trying to update the API Service Object');
                        }
                    });
                }
            });
        }
    }

    $scope.renderRoutesFilters = function() {
        $scope.areEmptyFilterNames = [];
        $scope.notRenderedFilters = false;
        $scope.notRenderedFilterName = '';
        for ( var i = 0; i < $scope.api_so.apiRoutes.length; i++ ) {
            $scope.renderFilters( $scope.api_so.apiRoutes[i] );
            var isEmptyTemp = {
                "value": $scope.isEmptyFilterName,
                "name": $scope.api_so.apiRoutes[i].name
            };
            $scope.areEmptyFilterNames.push( isEmptyTemp );
        }
        for ( var i = 0; i < $scope.areEmptyFilterNames.length; i++ ) {
            if ( $scope.areEmptyFilterNames[i].value ) {
                $scope.notRenderedFilters = true;
                if ( $scope.notRenderedFilterName === '' ) {
                    $scope.notRenderedFilterName = $scope.areEmptyFilterNames[i].name;
                }
            }
        }
    }

    $scope.deleteApiSo = function() {
        dfxApiServiceObjects.deleteSo( $scope, $scope.api_so ).then(function( data ) {
            dfxMessaging.showMessage( data.data.data );
            $scope.getAll();
            unsaved = true;
            $location.path('/home');
        });
    }

    $scope.confirmApiSoDelete = function( ev ) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to remove this API Service Object?')
            .textContent('This API Service Object will be removed from repository.')
            .ariaLabel('remove API Service Object')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.deleteApiSo();
        }, function() {
        });
    }

    $scope.addService = function() {
        $scope.validUrlResult = '';
        $scope.serviceUrlError = '';
        $scope.selected_service_tab = 0;
        $scope.scopeService = {};
        $scope.editFilterTitle = null;
        var dataSourceIcon = $(".dfx-api-so-sources");
        dataSourceIcon.hide();
        var api_so_route_snippet = {
            "name": "",
            "data": {
                "metadata": "",
                "settings": {
                    "source": "ext",
                    "connector": "http",
                    "postrequestbody": "",
                    "authentication": "none",
                    "auth_password": "",
                    "typerequest": "HTTP_GET",
                    "urlrandom": "0",
                    "auth_userid": "",
                    "cache":"none",
                    "cacheTimeExpiry" : 0,
                    "url": "",
                    "dbdriver": "",
                    "dbnames": { "database": "", "collection": "" }
                },
                "parameters": [],
                "precode": [],
                "postcode": [],
                "appexpr": [],
                "service": { "method": "" },
                "format": "json"
            }
        };
        $scope.scopeService = api_so_route_snippet;
        $scope.serviceModeBtn = 'serviceAdd';
        $scope.checkDatasource();
        $timeout(function() {
            $scope.isExecuted = false;
            $("#showResults").css('opacity',0);
            $("#executedResult").val();
        }, 0);

        var sideNavInstance = $mdSidenav('side_nav_add_service'),
            sidenav = $("md-sidenav[md-component-id='side_nav_add_service']"),
            sidenavHeight = sidenav.height();
        $timeout(function(){
            sidenav.find(".sidenav-service").css( "max-height", sidenavHeight-145 );
            sidenav.find("#dfx_filter_src_query_editor").css( "height", sidenavHeight-280 );
            var editor = $('#dfx_filter_src_query_editor.CodeMirror')[0].CodeMirror;
            editor.setValue('');
            $scope.isExecuted = false;
            $("#showResults").css('opacity',0);
            $("#executedResult").val();
            $scope.editorOpened = false;
        }, 0);
        sideNavInstance.toggle();
    }

    $scope.addServices = function() {
        $scope.serviceModeBtn = 'addServices';
        $scope.servicesApiSource = 'none';
        var dataSourceIcon = $(".dfx-api-so-sources");
        dataSourceIcon.hide();
        $('#add-services').fadeIn(150);
        $('#add-services-backdrop').fadeIn(150);
    }

    $('body #add-services-backdrop').on('click', function(){
        $('#add-services').fadeOut(150);
        $('body #add-services-backdrop').fadeOut(150);
    });

    $scope.singleGroup = function( ev ) {
        $timeout(function() {
            var element = ev.target,
                checked = $(element).parent().attr('aria-checked');
            if ( $scope.restSource === false ) {
                allCheckboxes = $(".service-checkbox");
            } else {
                allCheckboxes = $(element).parent().parent().siblings().find(".service-checkbox");
            }
            if ( checked === 'true' ) {
                angular.forEach(allCheckboxes, function(item) {
                    if ( $(item).attr('aria-checked') === 'false' ) {
                        angular.element(item).triggerHandler("click");
                    }
                });
            } else {
                angular.forEach(allCheckboxes, function(item) {
                    if ( $(item).attr('aria-checked') === 'true' ) {
                        angular.element(item).triggerHandler("click");
                    }
                });
            }
        }, 0);
    }

    $scope.pushServices = function() {
        if ( $scope.restSource === false ) {
            var checkedServices = $(".api-datasource .service-checkbox");
            for (var i = 0; i < checkedServices.length; i++) {
                var checkedAttr = $(checkedServices[i]).attr('aria-checked');
                if ( checkedAttr === 'true' ) {
                    var newRoute = $scope.listSources[i];
                    newRoute.data.settings.authentication = $scope.selectedDataSource;
                    if ( !newRoute.data.parameters ) newRoute.data.parameters = [];
                    if ( !newRoute.data.precode ) newRoute.data.precode = [];
                    if ( !newRoute.data.postcode ) newRoute.data.postcode = [];
                    if ( !newRoute.data.appexpr ) newRoute.data.appexpr = [];
                    $scope.api_so.apiRoutes.push(newRoute);
                }
            };
        } else {
            var restItems = $(".api-datasource .rest-item");
            for (var i = 0; i < restItems.length; i++) {
                var restItemCheckboxes = $(restItems[i]).find('.service-checkbox');
                for (var j = 0; j < restItemCheckboxes.length; j++) {
                    var checkedAttr = $(restItemCheckboxes[j]).attr('aria-checked');
                    if ( checkedAttr === 'true' ) {
                        var newRoute = $scope.strongLoopList[i].data[j];
                        newRoute.data.settings.authentication = $scope.selectedDataSource;
                        if ( !newRoute.data.parameters ) newRoute.data.parameters = [];
                        if ( !newRoute.data.precode ) newRoute.data.precode = [];
                        if ( !newRoute.data.postcode ) newRoute.data.postcode = [];
                        if ( !newRoute.data.appexpr ) newRoute.data.appexpr = [];
                        $scope.api_so.apiRoutes.push(newRoute);
                    }
                };
            };
        }
        $('#add-services').fadeOut(150);
        $('#add-services-backdrop').fadeOut(150);
        $scope.showListSources = false;
        $mdDialog.hide();
    }

    $scope.closeSources = function() {
        $('#add-services').fadeOut(150);
        $('#add-services-backdrop').fadeOut(150);
    }

    $scope.validateServiceName = function() {
        $scope.validNameResult = '';
        $scope.serviceNameError = '';
        dfxApiServiceObjects.validateSoName( $scope, $scope.api_so.name, $scope.app_name ).then(function( data ) {
            if ( data.data.data !== '' ) {
                $scope.validNameResult = 'failed';
                $scope.serviceNameError = data.data.data;
            }
        });
    }

    $scope.validateServiceUrl = function() {
        $scope.validUrlResult = '';
        $scope.serviceUrlError = '';
        dfxApiServiceObjects.validateSoUrl( $scope, $scope.scopeService.name, $scope.app_name, $scope.scopeService.data.uuid ).then(function( data ) {
            if (( data.data.data !== '' ) && ($scope.currentEditingUrlName !== $scope.scopeService.name)) {
                $scope.validUrlResult = 'failed';
                $scope.serviceUrlError = data.data.data;
            }
        });
    }

    $scope.saveApiSoService = function() {
        $scope.renderFilters( $scope.scopeService );
        if ( $scope.isEmptyFilterName ) {
            dfxMessaging.showWarning("Filter name can't be empty");
            $scope.selected_service_tab = 2;
        } else {
            if ($scope.api_so.apiRoutes.length === 0 && $scope.scopeService.name !== '') {
                $scope.api_so.apiRoutes.push($scope.scopeService);
                //$scope.scopeService = {};
                var sideNavInstance = $mdSidenav('side_nav_add_service');
                sideNavInstance.toggle();
            } else if ($scope.api_so.apiRoutes.length > 0 && $scope.validUrlResult === '') {
                $scope.api_so.apiRoutes.push($scope.scopeService);
                //$scope.scopeService = {};
                var sideNavInstance = $mdSidenav('side_nav_add_service');
                sideNavInstance.toggle();
            } else if ($scope.api_so.apiRoutes.length === 0 && $scope.scopeService.name === '') {
                $scope.validUrlResult = 'failed';
                $scope.serviceUrlError = 'Service url name cannot be empty';
            }
        }
    }

    $scope.checkDatasource = function() {
        for (var i = 0; i < $scope.api_sources.length; i++) {
            if ( $scope.scopeService.data.settings.authentication === $scope.api_sources[i].provider ) {
                if ( $scope.api_sources[i].schema === 'public/rest' ) {
                    $scope.restSource = true;
                } else {
                    $scope.restSource = false;
                }
                if ( $scope.scopeService.data.settings.authentication === 'none' ) {
                    $scope.listSources = $scope.notAuthSources;
                    $scope.dataSource = 'none';
                    $scope.selectedDataSource = 'none';
                } else {
                    $scope.dataSource = $scope.api_sources[i].dataSource;
                    if ($scope.catalogSources[$scope.dataSource]!=null) {
                        $scope.listSources = $scope.catalogSources[$scope.dataSource].data;
                    } else {
                        $scope.listSources = $scope.notAuthSources;
                    }
                    $scope.selectedDataSource = $scope.scopeService.data.settings.authentication;
                }
            }
        };
    }

    $scope.showCurl = function ( serviceItem ) {
        var currentAPIUrl = $scope.api_so.apiRoutes.filter(function(apiRoute){
            return apiRoute.name == serviceItem.name;
        });
        var parameters = currentAPIUrl[0].data.parameters;
        var body = currentAPIUrl[0].data.settings.postrequestbody;
        var queryString = {"params":{},"body":body}
        parameters.forEach(function(param){
            queryString.params[param.name] = param.value;
        });
        $scope.curlItemMessage = serviceItem.name;
        $scope.parameters = parameters;
        $scope.body = body;

        dfxApiServiceObjects.getTenant( $('body').attr('data-tenantid'))
            .then(function(tenant) {
                if (tenant.data.data.databaseTokens) {
                    var str = "curl -i ";
                        str += "-H 'Content-Type:application/json' ";
                        str += "-H 'Authorization:Basic " + btoa($('body').attr('data-tenantid') + ":" + Object.keys(tenant.data.data.databaseTokens)[0]) + "==' ";
                        str += "-d '{}' ";
                        str += window.location.origin + '/api/' + $scope.app_name + '/apiRoute/' + serviceItem.name;
                    $scope.curlItemContent = str;

                    var str = "curl -i ";
                    str += "-H 'Content-Type:application/json' ";
                    str += "-H 'Authorization:Basic " + btoa($('body').attr('data-tenantid') + ":" + Object.keys(tenant.data.data.databaseTokens)[0]) + "==' ";
                    str += "-d '" + JSON.stringify(queryString) + "' ";
                    str += window.location.origin + '/api/' + $scope.app_name + '/apiRoute/' + serviceItem.name;
                    $scope.curlItemContentWithParameters = str;

                    //console.log($scope.curlItemContentWithParameters);

                    $scope.postmanUrl = window.location.origin + '/api/' + $scope.app_name + '/apiRoute/' + serviceItem.name;
                    $scope.postmanUsername = $('body').attr('data-tenantid');
                    $scope.postmanPassword = Object.keys(tenant.data.data.databaseTokens)[0];
                } else {
                    $scope.curlItemContent = "Can't get tenant token from server";
                }

            },function(err) {
                $scope.curlItemContent = "Can't get tenant token from server." + err;
            });
        var sideNavInstance = $mdSidenav('side_nav_curl');
        $('#curl_content_span').hide();
        $('#curl_content_with_parameters_span').hide();
        sideNavInstance.toggle();
    }

    $scope.copyToClipboard = function(id) {
        $('#' + id).select();
        document.execCommand("copy");
        $('#' + id +'_span').show();
    }

    $scope.editService = function( serviceItem ) {
        $scope.selected_service_tab = 0;
        $scope.validUrlResult = '';
        $scope.serviceUrlError = '';
        $scope.scopeService = serviceItem;
        $scope.editFilterTitle = null;
        if ( !serviceItem.data.parameters ) $scope.scopeService.data.parameters = [];
        if ( !serviceItem.data.precode ) $scope.scopeService.data.precode = [];
        if ( !serviceItem.data.postcode ) $scope.scopeService.data.postcode = [];
        if ( !serviceItem.data.appexpr ) $scope.scopeService.data.appexpr = [];
        $scope.currentEditingUrlName = !$scope.currentEditingUrlName ? serviceItem.name : $scope.currentEditingUrlName;
        $scope.checkDatasource();
        $scope.serviceModeBtn = 'serviceEdit';
        var sideNavInstance = $mdSidenav('side_nav_add_service');
        sidenav = $("md-sidenav[md-component-id='side_nav_add_service']"),
        sidenavHeight = sidenav.height();
        sideNavInstance.toggle();
        $timeout(function() {
            sidenav.find(".sidenav-service").css( "max-height", sidenavHeight-145 );
            sidenav.find("#dfx_filter_src_query_editor").css( "height", sidenavHeight-280 );
            var editor = $('#dfx_filter_src_query_editor.CodeMirror')[0].CodeMirror;
            editor.setValue('');
            $scope.isExecuted = false;
            $("#showResults").css('opacity',0);
            $("#executedResult").val();
            $scope.editorOpened = false;
        }, 0);
    }

    $scope.deleteService = function( index ) {
        $scope.api_so.apiRoutes.splice( index, 1 );
    }

    $scope.confirmDelete = function( ev, index ) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to remove this service?')
            .textContent('Service will be removed from API Service Object.')
            .ariaLabel('remove service')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.deleteService(index);
        }, function() {
        });
    };

    dfxAuthProviders.getProviders( $scope.app_name );

    $scope.strongLoopData = function() {
        dfxAuthProviders.getProvider( $scope.selectedDataSource, $scope.app_name ).then(function( data ) {
            var serverRoute = data.route;
            dfxApiServiceObjects.getStrongLoop( $scope, data.route ).then(function( data ) {
                var strongLoop = data.data;
                $scope.strongLoopList = [];
                for ( var i = 0; i < strongLoop.tags.length; i++ ) {
                    var group = {
                        "auth": false,
                        "data": [],
                        "dataSource": '' + strongLoop.tags[i].name
                    }
                    var pathFilter = '/' + strongLoop.tags[i].name,
                        groupData = [];

                    for ( var path in strongLoop.paths ) {
                        if ( path.indexOf(pathFilter) === 0 ) {
                            for ( var subPath in strongLoop.paths[path] ) {
                                var groupItem = {
                                    "name": "",
                                    "summary": "",
                                    "data": {
                                        "metadata": "",
                                        "settings": {
                                            "source": "ext",
                                            "connector": "http",
                                            "postrequestbody": "",
                                            "authentication": "none",
                                            "auth_password": "",
                                            "typerequest": "HTTP_GET",
                                            "urlrandom": "0",
                                            "auth_userid": "",
                                            "url": "",
                                            "dbdriver": "",
                                            "dbnames": { "database": "", "collection": "" }
                                        },
                                        "parameters": [],
                                        "precode": [],
                                        "postcode": [],
                                        "appexpr": [],
                                        "service": { "method": "" },
                                        "format": "json"
                                    }
                                }
                                groupItemName = path.replace(/(\{)/g,'').replace(/(\})/g,'');
                                groupItem.name = subPath.toUpperCase()+'/'+groupItemName.slice(1);
                                groupItem.summary = strongLoop.paths[path][subPath].summary;
                                groupItem.data.settings.typerequest = 'HTTP_' + subPath.toUpperCase();
                                groupItem.data.settings.url = serverRoute + '/api' + path;
                                if ( strongLoop.paths[path][subPath].parameters.length > 0 ) {
                                    for (var j = 0; j < strongLoop.paths[path][subPath].parameters.length; j++) {
                                        var groupItemParameter = {
                                            "name": "",
                                            "alias": "",
                                            "operation": "eq",
                                            "value": "",
                                            "type": "request"
                                        }
                                        groupItem.data.parameters[j] = groupItemParameter;
                                        groupItem.data.parameters[j].name = strongLoop.paths[path][subPath].parameters[j].name;
                                        switch ( strongLoop.paths[path][subPath].parameters[j].in ) {
                                            case 'query': groupItem.data.parameters[j].type = 'request'; break;
                                            case 'path': groupItem.data.parameters[j].type = 'url'; break;
                                        }
                                    };
                                }
                                groupData.push(groupItem);
                            }
                        }
                    };
                    group.data = groupData;
                    $scope.strongLoopList.push(group);
                };
            });
        });
    };

    $scope.chooseDataSource = function( sourceProvider ) {
        $scope.selectedDataSource = sourceProvider.provider;
        $scope.dataSource = sourceProvider.dataSource;
        var dataSourceIcon = $(".dfx-api-so-sources");
        if ( $scope.dataSource !== 'REST' ) {
            dataSourceIcon.show();
            if ( $scope.serviceModeBtn === 'addServices' ) {
                $scope.servicesApiSource = sourceProvider.provider;
                if ( sourceProvider.schema === 'none' ) {
                    $scope.dataSource = sourceProvider.dataSource;
                    $scope.restSource = true;
                } else {
                    $scope.restSource = false;
                    if ( $scope.servicesApiSource === 'none' ) {
                        $scope.listSources = [];
                    } else {
                        $scope.listSources = $scope.catalogSources[$scope.dataSource].data;
                    }
                }
            } else {
                $scope.scopeService.data.settings.authentication = sourceProvider.provider;
                if ( sourceProvider.schema === 'none' ) {
                    $scope.dataSource = sourceProvider.dataSource;
                    $scope.restSource = true;
                } else {
                    $scope.restSource = false;
                    if ( $scope.scopeService.data.settings.authentication === 'none' ) {
                        $scope.listSources = [];
                    } else {
                        $scope.listSources = $scope.catalogSources[$scope.dataSource].data;
                    }
                }
            }
        }
    }

    $scope.addRow = function( tableArray, tableName ) {
        var parameterItem = {
                "name": "",
                "alias": "",
                "operation": "eq",
                "value": "",
                "type": "request"
            },
            preCodeItem = {
                "name": "pre_code_" + ( tableArray.length + 1 ),
                "code": ""
            },
            postCodeItem = {
                "name": "post_code_" + ( tableArray.length + 1 ),
                "code": ""
            },
            appExceptionItem = {
                "name": "exception_" + ( tableArray.length + 1 ),
                "regexp": ""
            };

        switch ( tableName ) {
            case 'parameters': tableArray.push( parameterItem ); break;
            case 'pre_code': tableArray.push( preCodeItem ); break;
            case 'post_code': tableArray.push( postCodeItem ); break;
            case 'appexpr': tableArray.push( appExceptionItem ); break;
        }
    }

    $scope.moveUp = function( index, element, tableArray ) {
        if ( index > 0 ) {
            tableArray.splice( index-1, 0, element );
            tableArray.splice( index+1, 1 );
        }
    }

    $scope.moveDown = function( index, element, tableArray ) {
        if ( index + 1 < tableArray.length ) {
            tableArray.splice( index, 1 );
            tableArray.splice( index+1, 0, element );
        }
    }

    $scope.deleteRow = function( tableArray, index ) {
        tableArray.splice( index, 1 );
    };

    $timeout(function() {
        var myTextArea = document.getElementById('dfx_filter_src_query_editor');
        var scriptEditor = CodeMirror(function (elt) {
                myTextArea.parentNode.replaceChild(elt, myTextArea);
            },
            {
                lineNumbers: true,
                value: $('#dfx_filter_src_query_editor').val(),
                mode: {name: "javascript", globalVars: true},
                matchBrackets: true,
                highlightSelectionMatches: {showToken: /\w/},
                styleActiveLine: true,
                viewportMargin : Infinity,
                extraKeys: {"Alt-F": "findPersistent", "Ctrl-Space": "autocomplete"},
                lineWrapping: true
            });
        var filterHeight = parseFloat($("md-sidenav[md-component-id='side_nav_add_service']").css('height')) - 272;
        scriptEditor.setSize(830, filterHeight);
        $(scriptEditor.getWrapperElement()).attr("id", "dfx_filter_src_query_editor");
        scriptEditor.refresh();
        scriptEditor.focus();
    }, 0);

    $scope.codeEditor = function( index, codeArray, arrayName ) {
        $scope.editorOpened = true;
        $scope.codeArrayItemIndex = index;
        $scope.codeArray = codeArray;
        $scope.codeArrayName = arrayName;
        var editor = $('#dfx_filter_src_query_editor.CodeMirror')[0].CodeMirror;

        switch( arrayName ) {
            case 'precode':
                $timeout(function(){
                    var helpMessage = "/*\n\tThis filter will be executed before the targeted API is called.\n\tUse 'params' to access/update/add/remove/manage parameters sent from the view.\n\tUse 'body' to access the request body sent by a post call.\n\tUse the 'Actions' menu to get assistance on coding.\n*/\n";
                        helpMessage += "var preExecutionFilter = function(params, body){\n\t// Filter code here\n\tterminateFilter();\n};\n"
                    var content = $scope.scopeService.data.precode[$scope.codeArrayItemIndex].code;
                    editor.focus();
                    editor.refresh();
                    editor.setValue( !content ? helpMessage : content );
                    $scope.editFilterTitle = "Pre execution filter : " + codeArray[index].name;
                    $scope.editFilterParameters = true;
                }, 0);
                break;
            case 'postcode':
                $timeout(function(){
                    var helpMessage = "/*\n\tThis filter will be executed after the targeted API is called.\n\tUse 'response' to manipulate (add/remove data) the JSON that will be sent to the client.\n\tUse the 'Actions' menu to get assistance on coding.\n*/\n";
                        helpMessage += "var postExecutionFilter = function(response){\n\t// Filter code here\n\tterminateFilter();\n};\n"
                    var content = $scope.scopeService.data.postcode[$scope.codeArrayItemIndex].code;
                    editor.focus();
                    editor.refresh();
                    editor.setValue( !content ? helpMessage : content );
                    $scope.editFilterTitle = "Post execution filter : " + codeArray[index].name;
                    $scope.editFilterParameters = false;
                });
                break;
        }
    }

    $scope.setCodemirrorValue = function( data ) {
        var editor = $('#dfx_filter_src_query_editor.CodeMirror')[0].CodeMirror;
        editor.replaceSelection( data );
    }

    $scope.executeDataQuery =       'getService("sample/api/url", {"param" : "param content"}).then(function (res) {\n' +
        '    response.filterResult = res;\n' +
        '        terminateFilter();\n' +
        '});\n';
    $scope.executeDataQueryParams = 'postService("sample/api/url", {"param" : "param content"}, {"bodyParam" : "body Content"}).then(function (res) {\n' +
        '    response.filterResult = res;\n' +
        '        terminateFilter();\n' +
        '});\n';
    $scope.getParameter =  "getParameter('myParameter');\n";
    $scope.editParameter = "setParameter('myParameter', 'Hello world');\n";
    $scope.addParameter = "addParameter({\n" +
                          "'name' : 'myParameter',\n" +
                          "'alias' : 'myParameterAlias',\n" +
                          "'operation' : 'eq',\n" +
                          "'value' : 'Hello world',\n" +
                          "'type' : 'request'\n" +
        "});\n";
    $scope.setBody = "setBody({'myBodyParameter':'Hello world'});\n";

    $scope.saveActions = function() {
        var editor = $('#dfx_filter_src_query_editor.CodeMirror')[0].CodeMirror,
            codeValue = editor.getValue();
        switch( $scope.codeArrayName ) {
            case 'precode': $scope.scopeService.data.precode[$scope.codeArrayItemIndex].code = codeValue; break;
            case 'postcode': $scope.scopeService.data.postcode[$scope.codeArrayItemIndex].code = codeValue; break;
        }

        $timeout(function(){
            $scope.editorOpened = false;
            editor.setValue('');
            $scope.renderFilters( $scope.scopeService );
            if ( $scope.isEmptyFilterName ) {
                dfxMessaging.showWarning("Filter name can't be empty");
                $scope.selected_service_tab = 2;
            } else {
                $scope.updateApiSo();
            }
            $scope.editFilterTitle = null;
        }, 0);

    }

    $scope.closeActionsEditor = function() {
        var editor = $('#dfx_filter_src_query_editor.CodeMirror')[0].CodeMirror;
            codeValue = editor.getValue();

        switch( $scope.codeArrayName ) {
            case 'precode': $scope.scopeService.data.precode[$scope.codeArrayItemIndex].code = codeValue; break;
            case 'postcode': $scope.scopeService.data.postcode[$scope.codeArrayItemIndex].code = codeValue; break;
        }
        $scope.editorOpened = false;
        editor.setValue('');
        $scope.editFilterTitle = null;
    }

    $scope.execute = function( event ) {
        $("#showResults").css('opacity',0);
        $scope.isExecuted = false;
        var sideNavInstance = $mdSidenav('side_nav_add_service'),
            sidenav = $("md-sidenav[md-component-id='side_nav_add_service']"),
            sidenavHeight = sidenav.height();

        $scope.serviceTimeStamp = '' + event.timeStamp;
        var simulateService = {
            "queryName": "",
            "typeRequest": "GET",
            "source": "ext",
            "auth": { "auth": "none" },
            "url": "",
            "urlRandom": "",
            "reqbody": "",
            "dbnames": { "database": "", "collection": "" },
            "format": "json",
            "application": "",
            "_": ""
        }
        $scope.simulatedMeta = {};
        $scope.simulatedResult = {};
        $scope.simulatedRequest = {};
        if ( $scope.restSource === true ) {
            simulateService.auth.auth = 'none';
        } else {
            simulateService.auth.auth = $scope.scopeService.data.settings.authentication || 'none';
        }

        var filtered = $scope.api_sources.filter(function(source){
            return source.provider == $scope.scopeService.data.settings.authentication;
        });

        if (filtered && filtered[0] && (filtered[0].schema === 'none')) {
            simulateService.auth.auth = 'none';
        }

        simulateService.url = $scope.scopeService.data.settings.url;
        simulateService.name = $scope.scopeService.name;
        simulateService.cache = $scope.scopeService.data.settings.cache;
        simulateService.cacheTimeExpiry = $scope.scopeService.data.settings.cacheTimeExpiry;
        simulateService.typeRequest = $scope.scopeService.data.settings.typerequest.replace('HTTP_', '');
        simulateService.urlRandom = $scope.scopeService.data.settings.urlrandom;
        simulateService.reqbody = $scope.scopeService.data.settings.postrequestbody;
        if ( $scope.scopeService.data.parameters && $scope.scopeService.data.parameters.length > 0 ) { simulateService.data = $scope.scopeService.data.parameters; }
        if ( $scope.scopeService.data.precode && $scope.scopeService.data.precode.length > 0 ) { simulateService.precode = $scope.scopeService.data.precode; }
        if ( $scope.scopeService.data.postcode && $scope.scopeService.data.postcode.length > 0 ) { simulateService.postcode = $scope.scopeService.data.postcode; }
        simulateService.application = $scope.app_name;
        simulateService._ = $scope.serviceTimeStamp;

        $.ajax({
            url: '/studio/query/execute',
            data: simulateService,
            type: 'GET',
            headers : {'X-DREAMFACE-TENANT' : $('body').attr('data-tenantid')}
        })
            .then(function(data) {
                $scope.simulatedMeta = JSON.stringify(data.metadata, null, '\t');
                $scope.simulatedResult = JSON.stringify(data.data, null, '\t');
                $scope.simulatedRequest = JSON.stringify(data.requestData, null, '\t');
                $timeout(function() {
                    $scope.isExecuted = true;
                }, 0);
            }).fail(function(data) {
                $scope.simulatedMeta = JSON.stringify(data, null, '\t');
                $scope.simulatedResult = JSON.stringify(JSON.parse(data.responseText), null, '\t');
                $scope.simulatedRequest = JSON.stringify(data, null, '\t');
                $timeout(function() {
                    $scope.isExecuted = true;
                }, 0);
            });

        var executedArea = document.getElementById('executedResult');
        // var executedMirror = CodeMirror(function (elt) {
        //         executedArea.parentNode.replaceChild(elt, executedArea);
        //     },
        //     {
        //         lineNumbers: true,
        //         value: '',
        //         mode: {name: 'application/json', globalVars: true, json: true},
        //         readOnly: true,
        //         matchBrackets: true,
        //         highlightSelectionMatches: {showToken: /\w/},
        //         styleActiveLine: true,
        //         viewportMargin : Infinity,
        //         extraKeys: {"Alt-F": "findPersistent", "Ctrl-Space": "autocomplete"}
        //     });
        // $(executedMirror.getWrapperElement()).attr("id", "executedResult");
        // $timeout(function() {
        //     scope.script_editor.focus();
        //     executedMirror.refresh();
        // }, 0);
        sidenav.find("#executedResult").css( "height", sidenavHeight-245 );
    }

    $scope.viewMetaData = function() {
        // var editor = $('#executedResult.CodeMirror')[0].CodeMirror;
        // editor.setValue( $scope.simulatedMeta );
        $("#executedResult").val( $scope.simulatedMeta );
        $("#showResults").css('opacity',1);
    }

    $scope.viewResult = function() {
        // var editor = $('#executedResult.CodeMirror')[0].CodeMirror;
        // editor.setValue( $scope.simulatedResult );
        $("#executedResult").val( $scope.simulatedResult );
        $("#showResults").css('opacity',1);
    }

    $scope.viewRequest = function() {
        // var editor = $('#executedResult.CodeMirror')[0].CodeMirror;
        // editor.setValue( $scope.simulatedRequest );
        $("#executedResult").val( $scope.simulatedRequest );
        $("#showResults").css('opacity',1);
    }

    $scope.renderFilters = function( renderedService ) {
        $scope.isEmptyFilterName = false;
        if ( renderedService.data.precode.length > 0 ) {
            for ( var i = 0; i < renderedService.data.precode.length; i++ ) {
                if ( renderedService.data.precode[i].name === '' ) {
                    $scope.isEmptyFilterName = true;
                }
            }
        }
        if ( renderedService.data.postcode.length > 0 ) {
            for ( var i = 0; i < renderedService.data.postcode.length; i++ ) {
                if ( renderedService.data.postcode[i].name === '' ) {
                    $scope.isEmptyFilterName = true;
                }
            }
        }
        if ( renderedService.data.appexpr.length > 0 ) {
            for ( var i = 0; i < renderedService.data.appexpr.length; i++ ) {
                if ( renderedService.data.appexpr[i].name === '' ) {
                    $scope.isEmptyFilterName = true;
                }
            }
        }
    }

    $scope.closeServiceSidenav = function() {
        $scope.renderFilters( $scope.scopeService );
        if ( $scope.isEmptyFilterName && $scope.serviceModeBtn === 'serviceEdit' ) {
            dfxMessaging.showWarning("Filter name can't be empty");
            $scope.selected_service_tab = 2;
        } else {
            var sideNavInstance = $mdSidenav('side_nav_add_service');
            sideNavInstance.toggle();
            $scope.editFilterTitle = null;
        }
    };

    $scope.closeCurlSideNav = function() {
        var sideNavInstance = $mdSidenav('side_nav_curl');
        sideNavInstance.close();
    }

    $scope.goBackHome = function() {
        unsaved = true;
        $location.path('/home');
    }

    $scope.leaveApiSoEditor = function( ev, index ) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure to exit the API Service Object Editor?')
            .textContent('All changes will be lost.')
            .ariaLabel('leave API SO Editor')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.goBackHome();
        }, function() {
        });
    };

    $scope.clearCache = function(type) {
        var obj = {type : type, application : $scope.app_name, name : $scope.scopeService.name};
        dfxApiServiceObjects.clearCache(obj).then(function(){
            dfxMessaging.showMessage("Сache was successfully cleared");
        },function(err){
            dfxMessaging.showWarning(err);
        });
    }
}]);

dfxStudioApp.directive('dfxApiSoSources', ['$mdDialog', '$timeout', 'dfxApiServiceObjects', function($mdDialog, $timeout, dfxApiServiceObjects) {
    return {
        restrict: 'C',
        scope: true,
        link: function(scope, element, attrs) {
            scope.showApiSourceInfo = function(ev) {
                ev.stopImmediatePropagation();
                scope.singleGroup.checked = false;
                if ( scope.dataSource === 'StrongLoop' ) {
                    scope.restSource = true;
                    scope.strongLoopData();
                } else {
                    scope.restSource = false;
                }
                $mdDialog.show({
                    scope: scope.$new(),
                    parent: angular.element(document.body),
                    clickOutsideToClose: true,
                    ariaLabel: 'api-so-info',
                    templateUrl: 'studioviews/api_sources.html',
                    onComplete: function() {
                        scope.chooseRoute = function( route ) {
                            ev.stopImmediatePropagation();
                            scope.scopeService.name = route.name;
                            scope.scopeService.data = route.data;
                            if ( !route.data.parameters ) scope.scopeService.data.parameters = [];
                            if ( !route.data.precode ) scope.scopeService.data.precode = [];
                            if ( !route.data.postcode ) scope.scopeService.data.postcode = [];
                            if ( !route.data.appexpr ) scope.scopeService.data.appexpr = [];
                            scope.scopeService.data.settings.authentication = scope.selectedDataSource;
                            $mdDialog.hide();
                        }
                        scope.toggleInfo = function(ev) {
                            var triggerBtn = $(ev.target),
                                triggerConteiner = triggerBtn.parent().parent().siblings();
                            triggerBtn.toggleClass('opened');
                            triggerConteiner.slideToggle();
                        }
                        scope.triggerSource = function( ev ) {
                            var sourceElement = ev.target;
                            $(sourceElement).toggleClass('opened');
                            $(sourceElement).parent().siblings().slideToggle('opened');
                        }
                        scope.closeCatalog = function() {
                            scope.showListSources = false;
                            $mdDialog.hide();
                        }
                    }
                })
            }
        }
    }
}]);

dfxStudioApp.controller("dfx_studio_api_so_category_controller", [ '$scope', '$routeParams', '$location', '$mdSidenav', '$mdDialog', '$timeout', 'dfxMessaging', 'dfxApplications', 'dfxAuthProviders', 'dfxApiServiceObjects', function( $scope, $routeParams, $location, $mdSidenav, $mdDialog, $timeout, dfxMessaging, dfxApplications, dfxAuthProviders, dfxApiServiceObjects) {
    $scope.app_name = $routeParams.appname;

    dfxApiServiceObjects.getCategories( $scope, $scope.app_name ).then(function( data ) {
        $scope.app_categories = data.data.querycats;
    });

    var bodyHeight = parseFloat($("body").css('height'));
    $timeout(function() {
        var scopeSourceTable = document.getElementById('scope-source-table');
        $(scopeSourceTable).css('max-height', bodyHeight-260);
    }, 0);

    $scope.addCategoryBtn = function() {
        $scope.scopeCategory = {};
        $scope.categoryMode = 'addCategory';
        var sideNavInstance = $mdSidenav('side_nav_api_category');
        sideNavInstance.toggle();
    }

    $scope.createCategory = function() {
        var regexp = /([a-z0-9_])(\w*)/gi;
        res = regexp.exec( $scope.scopeCategory.name );
        if ( res && $scope.scopeCategory.name && $scope.scopeCategory.name !== '' ) {
            dfxApiServiceObjects.createCategory( $scope, $scope.scopeCategory.name, $scope.app_name ).then(function( data ) {
                if ( data.status && data.status === 200 && data.data.data !== 'Current category name already exists!' ) {
                    dfxMessaging.showMessage(data.data.data);
                    dfxApiServiceObjects.getCategories( $scope, $scope.app_name ).then(function( data ) {
                        $scope.app_categories = data.data.querycats;
                        $scope.getAll();
                    });
                    var sideNavInstance = $mdSidenav('side_nav_api_category');
                    sideNavInstance.toggle();
                } else {
                    dfxMessaging.showWarning(data.data.data);
                }
            });
        } else {
            dfxMessaging.showWarning('Not valid Category Name');
        }
    }

    $scope.editCategoryBtn = function( category ) {
        $scope.categoryMode = 'editCategory';
        $scope.scopeCategory = category;
        $scope.toEdit = {};
        var sideNavInstance = $mdSidenav('side_nav_api_category');
        sideNavInstance.toggle();
    }

    $scope.editCategory = function( edited ) {
        var newName = edited.name; 
        var regexp = /([a-z0-9_])(\w*)/gi;
        res = regexp.exec( newName );
        if ( res && newName && newName !== $scope.scopeCategory.name ) {
            dfxApiServiceObjects.editCategory( $scope, $scope.scopeCategory.name, newName, $scope.app_name ).then(function( data ) {                
                if ( data.data.data !== 'Current category name already exists!' ) {
                    dfxMessaging.showMessage(data.data.data);
                    dfxApiServiceObjects.getCategories( $scope, $scope.app_name ).then(function( data ) {
                        $scope.app_categories = data.data.querycats;
                        $scope.getAll();
                    });
                    var sideNavInstance = $mdSidenav('side_nav_api_category');
                    sideNavInstance.toggle();
                } else {
                    dfxMessaging.showWarning(data.data.data);
                }
            });
        } else if ( newName === $scope.scopeCategory.name ) {
            dfxMessaging.showWarning('Category with such name already exist!');
            
        } else {
            dfxMessaging.showWarning('Not valid Category Name');
        }
    }

    $scope.deleteCategory = function( category_name ) {
        dfxApiServiceObjects.removeCategory( $scope, category_name, $scope.app_name ).then(function( data ) {
            if ( data.status && data.status === 200 ) {
                dfxMessaging.showMessage(data.data.data);
                dfxApiServiceObjects.getCategories( $scope, $scope.app_name ).then(function( data ) {
                    $scope.app_categories = data.data.querycats;
                    $scope.getAll();
                });
            } else {
                dfxMessaging.showWarning(data.data.data);
            }
        });
    }

    $scope.confirmDelete = function( ev, category_name ) {
        var confirm = $mdDialog.confirm()
            .title('Are you sure you want to remove this category?')
            .textContent('Category will be removed from the repository.')
            .ariaLabel('remove service')
            .targetEvent(ev)
            .cancel('Cancel')
            .ok('OK');
        $mdDialog.show(confirm).then(function() {
            $scope.deleteCategory( category_name );
        }, function() {
        });
    };

    $scope.closeSidenav = function() {
        var sideNavInstance = $mdSidenav('side_nav_api_category');
        sideNavInstance.toggle();
    }
}]);

var dfxStudioLandingApp = angular.module("dfxStudioLandingApp", ['ngRoute', 'ngMaterial', 'dfxStudioApi']);

dfxStudioLandingApp.config([ '$routeProvider', '$mdThemingProvider', function($routeProvider, $mdThemingProvider) {
    
    $routeProvider
	    .when('/home', {
	      controller: 'dfx_studio_landing_controller',
	      templateUrl: 'studioviews/landing_home.html'
    	})
    	.when('/getting-started', {
	      controller: 'dfx_studio_landing_getting_started_controller',
	      templateUrl: 'studioviews/landing_getting_started.html'
    	})
    	.otherwise( '/home', {
	      controller: 'dfx_studio_landing_controller',
	      templateUrl: 'studioviews/landing_home.html'
    	})

    $mdThemingProvider.theme('altTheme')
        .primaryPalette('blue') // specify primary color, all
    // other color intentions will be inherited
    // from default
    $mdThemingProvider.setDefaultTheme('altTheme');
}]);

dfxStudioLandingApp.controller("dfx_studio_landing_controller", [ '$scope', '$location', '$window', function($scope, $location, $window) {
	$scope.tenant_id = $('#dfx-studio-landing-body').attr( 'data-tenantid' );
	$scope.dfx_version_major   = '3';
    $scope.dfx_version_minor   = '02';
    $scope.dfx_version_release = 'R6';

	$scope.openDocumentation = function() {
		$window.open( 'http://interactive-clouds.com/documentation/' );
	}

	$scope.openGettingStarted = function() {
		$location.path('/getting-started');
	}

}]);

dfxStudioLandingApp.controller("dfx_studio_landing_getting_started_controller", [ '$scope', '$window', function($scope, $window) {

}]);

dfxStudioLandingApp.controller("dfx_studio_login_controller", [ '$scope', '$window', function($scope, $window) {

}]);

var dfxViewEditorApp = angular.module("dfxViewEditorApp", ['ngMaterial', 'ngMdIcons', 'dfxGControls', 'dfxStudioApi', 'nsPopover']);

dfxViewEditorApp.config(function($mdThemingProvider) {
    $mdThemingProvider.theme('altTheme')
        .primaryPalette('blue') // specify primary color, all
    // other color intentions will be inherited
    // from default
    $mdThemingProvider.setDefaultTheme('altTheme');
});

dfxViewEditorApp.controller("dfx_main_controller", [ '$scope', '$rootScope', '$q', '$http', '$mdDialog', '$compile', function($scope, $rootScope, $q, $http, $mdDialog, $compile) {
    $rootScope.message = "Welcome to the View Editor";
    $scope.application_name = $('#dfx-view-editor-body').attr('data-application');
    $scope.view_name = $('#dfx-view-editor-body').attr('data-widget');
    $scope.view_platform = $('#dfx-view-editor-body').attr('data-platform');
    //$scope.view_category = $('#dfx_src_widget_editor').attr('data-view-cat'); //here in that moment #dfx_src_widget_editor attribute 'data-platform' is empty. That attribute takes value inside dfx_view_editor_controller.
    $scope.closed_gc_palette = false;
    $scope.gc_types = {};
    $scope.helpTree = true;
    $scope.helpForm = false;
    $scope.scopeOptionsVarNameInput = false;

    $scope.getGCDefaultAttributes = function( type ) {
        var deferred = $q.defer();
        if ($scope.gc_types[type] != null) {
            deferred.resolve( $scope.gc_types[type] );
        } else {
            $http.get( '/gcontrols/web/' + type + '.json' ).success( function(data) {
                $scope.gc_types[type] = data;
                deferred.resolve( data );
            });
        }
        return deferred.promise;
    }

    $scope.loadView = function() {
        return '/studio/widget/editui/' + $scope.application_name + '/' + $scope.view_name + '/' + $scope.view_platform;
    };

    $scope.showHelpEditor = function(ev) {
        var $parentScope = $scope;
        var $editorScope = angular.element(document.getElementById('dfx_src_widget_editor')).scope()
        $mdDialog.show({
            parent: angular.element(document.body),
            clickOutsideToClose:true,
            templateUrl: '/gcontrols/web/help_dialog.html',
            controller: function($scope){
                $scope.$parentScope = $parentScope;
                $scope.$editorScope = $editorScope;
                $scope.helpTree = true;
                $scope.helpForm = false;
                $scope.scopeOptionsVarNameInput = false;
                $scope.helpApiRoutesTree = false;
                $scope.showBackButton = false;
                $scope.showOkButton = false;
                $scope.help_cardForm = false;
                $scope.closeDialog = function() {
                    $mdDialog.hide();
                }
                $scope.showApiRoutesTree = function(type) {
                    $http({
                        method: 'GET',
                        url: '/studio/query/list-by-app-detailed/' + $scope.$parentScope.application_name
                    }).then(function(data) {
                        $http({
                            method: 'GET',
                            url: '/studio/query/list-by-app-detailed/__shared__'
                        }).then(function(shared_data) {
                            $scope.requestType = type;
                            $scope.picker_apiroutes = data.data.queries;
                            $scope.picker_apiroutes_cat = Object.keys($scope.picker_apiroutes);
                            $scope.shared_picker_apiroutes = shared_data.data.queries;
                            $scope.shared_picker_apiroutes_cat = Object.keys($scope.shared_picker_apiroutes);

                            $scope.helpApiRoutesTree = true;
                            $scope.helpTree = false;
                            $scope.helpForm = false;
                            $scope.scopeOptionsVarNameInput = false;
                            $scope.showBackButton = true;
                        });
                    });
                }
                $scope.selectApiRoute = function(cat, idx, route, shared) {
                    $scope.helpApiRoutesTree = false;
                    $scope.picked_api_route = route;
                    $scope.picked_api_route_instance = !shared ? $scope.picker_apiroutes[cat][idx].apiRoutes[route] : $scope.shared_picker_apiroutes[cat][idx].apiRoutes[route];
                    $scope.showBackButton = true;
                    ($scope.requestType  == 'get') ? $scope.showInputForm('getApiRoute') : $scope.showInputForm('apiroute-post');


                }
                $scope.showInputForm = function(type) {
                    $scope.helpType = type;
                    $scope.helpTree = false;

                    $scope.helpForm = true;
                    var chartsList = ['barchart','hzbarchart','piechart','donutchart','linechart','cmlinechart','areachart'];
                    if (chartsList.indexOf(type) > -1) {
                        $scope.scopeOptionsVarNameInput = true;
                    } else {
                        $scope.scopeOptionsVarNameInput = false;
                    }

                    $scope.showBackButton = true;
                    $scope.showOkButton = true;
                    if ((type === 'dialog_view') || (type === 'side_nav_view') || (type === 'bottom_sheet_view') || (type === 'show_card')) {
                        $scope.helpCardForm = true;
                        $scope.helpViewCards = $scope.$editorScope.view_cards;
                        console.log($scope.helpViewCards);
                    }
                }
                $scope.back = function() {
                    if (($scope.helpType == 'getApiRoute') || ($scope.helpType == 'apiroute-post')) {
                        $scope.helpTree = false;
                        $scope.helpForm = false;
                        $scope.scopeOptionsVarNameInput = false;
                        $scope.helpApiRoutesTree = true;
                        delete $scope.helpType;
                    } else {
                        $scope.helpCardForm = false;
                        $scope.helpTree = true;
                        $scope.helpForm = false;
                        $scope.scopeOptionsVarNameInput = false;
                        $scope.helpApiRoutesTree = false;
                        $scope.showBackButton = false;
                    }
                    $scope.showOkButton = false;
                }
                $scope.ok = function() {
                    if (($scope.helpType) && ($scope.scopeVarName)) {
                        if ($scope.helpType == 'getApiRoute') {
                            var editor_script   = $('#dfx_script_editor.CodeMirror')[0].CodeMirror;
                            var route_params = {};
                            if ($scope.picked_api_route_instance.parameters!=null) {
                                for (var idx=0; idx<$scope.picked_api_route_instance.parameters.length; idx++) {
                                    route_params[$scope.picked_api_route_instance.parameters[idx].name] = $scope.picked_api_route_instance.parameters[idx].value;
                                }
                            }
                            var script = "dfxApiServices.get( $scope, '" + $scope.picked_api_route + "', " + JSON.stringify(route_params) + ").then(function(response){\n"
                                + "\t\t$scope.$apply( function() {\n"
                                + "\t\t\t$scope." + $scope.scopeVarName + " = response.data;\n"
                                + "\t\t});\n"
                                + "\t\t}).fail(function(error){\n"
                                + "\t\t});\n";

                            editor_script.replaceSelection(script);
                        } else if ($scope.helpType == 'apiroute-post') {
                            var editor_script   = $('#dfx_script_editor.CodeMirror')[0].CodeMirror;
                            var route_params = {};
                            if ($scope.picked_api_route_instance.parameters!=null) {
                                for (var idx=0; idx<$scope.picked_api_route_instance.parameters.length; idx++) {
                                    route_params[$scope.picked_api_route_instance.parameters[idx].name] = $scope.picked_api_route_instance.parameters[idx].value;
                                }
                            }
                            var script = "dfxApiServices.post( $scope, '" + $scope.picked_api_route + "', " + JSON.stringify(route_params) + ", {}).then(function(response){\n"
                                + "\t\t$scope.$apply( function() {\n"
                                + "\t\t\t$scope." + $scope.scopeVarName + " = response.data;\n"
                                + "\t\t});\n"
                                + "\t\t}).fail(function(error){\n"
                                + "\t\t});\n";

                            editor_script.replaceSelection(script);
                        } else {
                            helpDialogScript({
                                item: $scope.helpType,
                                varName: $scope.scopeVarName,
                                optionsVarName: $scope.scopeOptionsVarName,
                                viewName: $scope.$parentScope.view_name,
                                cardName: $scope.scopeCardName
                            });
                        }
                        $mdDialog.hide();
                    }
                }
            }
        })
    }

    $scope.toggleGCPalette = function() {
        if ($scope.closed_gc_palette) {
            $('#dfx_gc_palette_title').css('display', 'inline-block');
            $('#dfx_gc_palette_toggle > a > span').attr('class', 'fa fa-angle-double-left');
            $('#dfx_visual_editor_left').css('width', '105px');
            $('#dfx_visual_editor_middle').css('left','106px');
            $('#dfx_visual_editor_workspace').css('left','106px');
            $scope.closed_gc_palette = false;
        } else {
            $('#dfx_gc_palette_title').css('display', 'none');
            $('#dfx_gc_palette_toggle > a > span').attr('class', 'fa fa-angle-double-right');
            $('#dfx_visual_editor_left').css('width', '18px');
            $('#dfx_visual_editor_middle').css('left','19px');
            $('#dfx_visual_editor_workspace').css('left','19px');
            $scope.closed_gc_palette = true;
        }
    };

    $scope.initContainers = function() {

    };

    $scope.cancelAPIRoute = function() {
        $('#dfx_picker_script').css( 'display', 'block' );
        $('#dfx_picker_api_route').css( 'display', 'none' );
        $('#dfx_picker_api_route_form').css( 'display', 'none' );
    };

    /*$scope.overrideAttribute = function(event, property) {
        if ($scope.gc_renderer!=null) {
            $scope.gc_renderer.attributes[property].status = 'overridden';
        } else {
            $scope.gc_selected.attributes[property].status = 'overridden';
        }
    };*/

}]);

dfxViewEditorApp.controller("dfx_view_editor_controller", [ '$scope', '$rootScope', '$compile', '$timeout', '$mdDialog', '$mdToast', '$mdSidenav', '$log', '$mdMedia', '$window', '$http', 'dfxMessaging', function($scope, $rootScope, $compile, $timeout, $mdDialog, $mdToast, $mdSidenav, $log, $mdMedia, $window, $http, dfxMessaging) {

    $scope.palette_visible = true;
    $scope.property_visible = true;
    $scope.design_visible = true;
    $scope.script_visible = false;
    $scope.style_visible = false;
    $scope.source_visible = false;
    $scope.view_category = $('#dfx_src_widget_editor').attr('data-view-cat');
    $scope.design_view_mode = 'Design';
    $scope.script_theme = (localStorage.getItem('DFX_script_theme')!=null) ? localStorage.getItem('DFX_script_theme') : 'monokai';
    $scope.preview_wait_icon_visible = false;

    $scope.design_devices = [
        {
            'name':     'iphone5',
            'label':    '320x568 (Apple iPhone 5)',
            'portrait' : {
                'image':  'iphone_5_320x568.png',
                'width':  '376px',
                'height': '794px',
                'padding-top': '110px',
                'padding-left': '30px',
                'padding-right': '30px',
                'padding-bottom': '120px'
            },
            'landscape': {
                'image':  'iphone_5_landscape_320x568.png',
                'width':  '794px',
                'height': '376px',
                'padding-top': '30px',
                'padding-left': '110px',
                'padding-right': '120px',
                'padding-bottom': '30px'
            }
        },
        {
            'name':     'iphone6',
            'label':    '375x667 (Apple iPhone 6)',
            'portrait' : {
                'image':  'iphone_6_375x667.png',
                'width':  '432px',
                'height': '880px',
                'padding-top': '109px',
                'padding-left': '31px',
                'padding-right': '30px',
                'padding-bottom': '30px'
            },
            'landscape': {
                'image':  'iphone_6_landscape_375x667.png',
                'width':  '880px',
                'height': '432px',
                'padding-top': '30px',
                'padding-left': '109px',
                'padding-right': '108px',
                'padding-bottom': '30px'
            }
        },
        {
            'name':     'iphone6plus',
            'label':    '414x736 (Apple iPhone 6+)',
            'portrait' : {
                'image':  'iphone_6plus_414x736.png',
                'width':  '471px',
                'height': '955px',
                'padding-top': '103px',
                'padding-left': '31px',
                'padding-right': '30px',
                'padding-bottom': '30px'
            },
            'landscape': {
                'image':  'iphone_6plus_landscape_414x736.png',
                'width':  '955px',
                'height': '471px',
                'padding-top': '30px',
                'padding-left': '103px',
                'padding-right': '120px',
                'padding-bottom': '30px'
            }
        }
    ];
    $scope.design_selected_device = $scope.design_devices[0];
    $scope.design_device_orientation = 'Portrait';

    $scope.toggleRight = function() {
        $scope.property_visible = !$scope.property_visible;
        if ($scope.property_visible) {
            $('#dfx-ve-toggle-property-icon').removeClass('fa-angle-double-left');
            $('#dfx-ve-toggle-property-icon').addClass('fa-angle-double-right');
            $('#dfx-ve-property-title').removeClass('dfx-ve-property-title-collapsed');
            $('#dfx-ve-property-title-text').removeClass('dfx-ve-property-title-text-collapsed');
        } else {
            $('#dfx-ve-property-title').addClass('dfx-ve-property-title-collapsed');
            $('#dfx-ve-property-title-text').addClass('dfx-ve-property-title-text-collapsed');
            $('#dfx-ve-toggle-property-icon').addClass('fa-angle-double-left');
            $('#dfx-ve-toggle-property-icon').removeClass('fa-angle-double-right');
        }
    };
    $scope.changeViewMode = function (view_mode) {
        if (view_mode=='design') {
            $scope.design_view_mode = 'Design';
            $scope.showDesign();
        } else if (view_mode=='script') {
            $scope.design_view_mode = 'Script';
            $scope.showScript();
        } else if (view_mode=='style') {
            $scope.design_view_mode = 'Style';
            $scope.showStyle();
        } else if (view_mode=='source') {
            $scope.design_view_mode = 'Source';
            $scope.showSource();
        }
    };
    $scope.changeScriptTheme = function (script_theme) {
        $scope.script_theme = script_theme;
        localStorage.setItem('DFX_script_theme', script_theme);
        var editor = $('#dfx_src_editor')[0].CodeMirror;
        editor.setOption('theme', $scope.script_theme);
        editor = $('#dfx_styles_editor')[0].CodeMirror;
        editor.setOption('theme', $scope.script_theme);
        editor = $('#dfx_script_editor')[0].CodeMirror;
        editor.setOption('theme', $scope.script_theme);
    };
    $scope.showDesign = function() {
        $scope.design_visible = true;
        $scope.script_visible = false;
        $scope.style_visible = false;
        $scope.source_visible = false;
        $('#dfx_styles_editor').css('display', 'none');
        $('#dfx_src_editor').css('display', 'none');
        $('#dfx_script_editor').css('display', 'none');
        $('.dfx-ve-toolbar-button').removeClass('dfx-ve-toolbar-button-selected');
        $('.dfx-ve-toolbar-button-design').addClass('dfx-ve-toolbar-button-selected');
    };
    $scope.showScript = function() {
        $scope.design_visible = false;
        $scope.script_visible = true;
        $scope.style_visible = false;
        $scope.source_visible = false;
        $('#dfx_styles_editor').css('display', 'none');
        $('#dfx_src_editor').css('display', 'none');
        $('#dfx_script_editor').css('display', 'block');
        $('.dfx-ve-toolbar-button').removeClass('dfx-ve-toolbar-button-selected');
        $('.dfx-ve-toolbar-button-script').addClass('dfx-ve-toolbar-button-selected');
    };
    $scope.showStyle = function() {
        $scope.design_visible = false;
        $scope.style_visible = true;
        $scope.script_visible = false;
        $scope.source_visible = false;
        $('#dfx_script_editor').css('display', 'none');
        $('#dfx_src_editor').css('display', 'none');
        $('#dfx_styles_editor').css('display', 'block');
        $('.dfx-ve-toolbar-button').removeClass('dfx-ve-toolbar-button-selected');
        $('.dfx-ve-toolbar-button-styles').addClass('dfx-ve-toolbar-button-selected');
    };
    $scope.showSource = function() {
        var editor = $('#dfx_src_editor')[0].CodeMirror;

        for (var key in $scope.gc_instances) {
            var component = angular.copy($scope.gc_instances[key]);
            for (attribute in component.attributes) {
                if (component.attributes[attribute].status!='overridden') {
                    delete component.attributes[attribute];
                }
            }
            var widget_definition = JSON.parse(editor.getValue());
            DfxVisualBuilder.findComponentAndUpdateAttributes(component.id, widget_definition.definition, component.attributes, $scope.view_card_selected, false);
            editor.setValue(JSON.stringify(widget_definition, null, '\t'));
            editor.scrollTo(0, 0);
            editor.refresh();
        }

        $scope.design_visible = false;
        $scope.source_visible = true;
        $scope.script_visible = false;
        $scope.style_visible = false;
        $('#dfx_styles_editor').css('display', 'none');
        $('#dfx_script_editor').css('display', 'none');
        $('#dfx_src_editor').css('display', 'block');
        $('.dfx-ve-toolbar-button').removeClass('dfx-ve-toolbar-button-selected');
        $('.dfx-ve-toolbar-button-source').addClass('dfx-ve-toolbar-button-selected');
        
        editor.refresh();
    };

    $scope.refreshDevice = function() {
        if ($scope.design_device_orientation=='Portrait') {
            $('#dfx-ve-platform').css('width', $scope.design_selected_device.portrait['width']);
            $('#dfx-ve-platform').css('height', $scope.design_selected_device.portrait['height']);
            $('#dfx-ve-platform').css('padding-top', $scope.design_selected_device.portrait['padding-top']);
            $('#dfx-ve-platform').css('padding-left', $scope.design_selected_device.portrait['padding-left']);
            $('#dfx-ve-platform').css('padding-right', $scope.design_selected_device.portrait['padding-right']);
            $('#dfx-ve-platform').css('padding-bottom', $scope.design_selected_device.portrait['padding-bottom']);
            $('#dfx-ve-platform').css( 'background', 'url(/images/' + $scope.design_selected_device.portrait['image'] + ') no-repeat' );
        } else {
            $('#dfx-ve-platform').css('width', $scope.design_selected_device.landscape['width']);
            $('#dfx-ve-platform').css('height', $scope.design_selected_device.landscape['height']);
            $('#dfx-ve-platform').css('padding-top', $scope.design_selected_device.landscape['padding-top']);
            $('#dfx-ve-platform').css('padding-left', $scope.design_selected_device.landscape['padding-left']);
            $('#dfx-ve-platform').css('padding-right', $scope.design_selected_device.landscape['padding-right']);
            $('#dfx-ve-platform').css('padding-bottom', $scope.design_selected_device.landscape['padding-bottom']);
            $('#dfx-ve-platform').css( 'background', 'url(/images/' + $scope.design_selected_device.landscape['image'] + ') no-repeat' );
        }
    };

    $scope.changeDevice = function(index) {
        $scope.design_selected_device = $scope.design_devices[index];
        $scope.refreshDevice();
    };

    $scope.changeDeviceOrientation = function() {
        $scope.design_device_orientation = ($scope.design_device_orientation=='Portrait') ? 'Landscape' : 'Portrait';
        $scope.refreshDevice();
    };

    $scope.searchScript = function(ev) {
        var editor = $('#dfx_script_editor')[0].CodeMirror;
        editor.execCommand('find');
    };

    $scope.replaceScript = function(ev) {
        var editor = $('#dfx_script_editor')[0].CodeMirror;
        editor.execCommand('replace');
    };

    $scope.configureDependenciesScript = function(ev) {
        var parentEl = angular.element(document.body);
        $mdDialog.show({
            parent: parentEl,
            targetEvent: ev,
            template:
            '<md-dialog aria-label="List dialog">' +
            '   <md-toolbar>' +
            '       <div class="md-toolbar-tools">' +
            '           <h2>Dependency Injection</h2>' +
            '       </div>' +
            '   </md-toolbar>' +
            '   <md-dialog-content style="width:500px;min-height:400px;padding:20px">'+
            '           <div ng-repeat="dependency in dependencies">'+
            '               <md-checkbox ng-checked="dependencyExists(dependency, selectedDependencies)" ng-click="toggleDependency(dependency, selectedDependencies)">' +
            '                   {{dependency}}' +
            '               </md-checkbox>' +
            '           </div>'+
            '   </md-dialog-content>' +
            '   <md-dialog-actions>' +
            '       <md-button ng-click="saveConfigureDependenciesScriptDialog()" class="md-primary">' +
            '           Save' +
            '       </md-button>' +
            '       <md-button ng-click="closeConfigureDependenciesScriptDialog()" class="md-primary">' +
            '           Cancel' +
            '       </md-button>' +
            '   </md-dialog-actions>' +
            '</md-dialog>',
            locals: {
                dependencies: $scope.dependencies
            },
            controller: DialogController
        });
        function DialogController($scope, $mdDialog) {
            $scope.dependencies = ['$rootScope','$scope', 'dfxApiServices', 'dfxDialog', 'dfxSidenav', 'dfxBottomSheet', 'dfxChangeCard'];
            $scope.selectedDependencies = [];
            $scope.additionalDependencies = [];
            
            var regexDependencies = /(controller(.*?)\[)(.*)(?=function)/;
            var regexDependenciesArgs = /(function(.*?))(.*)(?=\{)/;
            var editor_script = $('#dfx_script_editor.CodeMirror')[0].CodeMirror;
            var text_script = editor_script.getValue();
            
            var m;
 
            if ((m = regexDependencies.exec(text_script)) !== null) {
                if (m.index === regexDependencies.lastIndex) {
                    regexDependencies.lastIndex++;
                }
                var arr_dependencies = m[3].split(',');
                for (dependency in arr_dependencies) {
                    if (arr_dependencies[dependency].trim() != '') {
                        var current_dependency =
                            arr_dependencies[dependency].substring(
                                arr_dependencies[dependency].indexOf('\'')+1,
                                arr_dependencies[dependency].length-1
                            ).trim();
                        if ($scope.dependencies.indexOf(current_dependency)>-1) {
                            $scope.selectedDependencies.push( current_dependency );
                        } else {
                            $scope.additionalDependencies.push( current_dependency );
                        }
                    }
                }
                console.log($scope.selectedDependencies);
            }

            $scope.dependencyExists = function(item, list) {
                return list.indexOf(item) > -1;
            };

            $scope.toggleDependency = function(item, list) {
                var idx = list.indexOf(item);
                if (idx > -1) {
                    list.splice(idx, 1);
                }
                else {
                    list.push(item);
                }
            };

            $scope.saveConfigureDependenciesScriptDialog = function() {
                var text_dependencies = '';
                var text_dependencies_args = '';
                $scope.selectedDependencies = $scope.selectedDependencies.concat($scope.additionalDependencies);
                for (var i=0; i<$scope.selectedDependencies.length; i++) {
                    text_dependencies += '\'' + $scope.selectedDependencies[i] + '\', ';
                    text_dependencies_args += $scope.selectedDependencies[i] + ', ';
                }
                text_dependencies_args = text_dependencies_args.substr( 0, text_dependencies_args.length-2 );
                var new_script = text_script.replace(regexDependencies, m[1 ] + text_dependencies);

                new_script = new_script.replace( regexDependenciesArgs, 'function ( ' + text_dependencies_args + ' ) ' );
                
                editor_script.setValue(new_script);
                $mdDialog.hide();
            }

            $scope.closeConfigureDependenciesScriptDialog = function() {
                $mdDialog.hide();
            }
        }
    };

    $scope.unselectComponent = function() {
        if ($scope.gc_selected != null) {
            $('#'+$scope.gc_selected.id).css('border', '0px');
            $scope.gc_selected = null;
        }
    };

    $scope.addCard = function(ev) {
        $mdDialog.show({
            controller: DialogController,
            templateUrl: '/gcontrols/web/cards_add.html',
            parent: angular.element(document.body),
            targetEvent: ev
        })
        .then(function(card) {
            var editor = $('#dfx_src_editor')[0].CodeMirror;
            var widget_definition = JSON.parse(editor.getValue());
            widget_definition.definition[card.name] = [
                {
                    id:         Math.floor(Math.random() * 1000),
                    type:       "panel",
                    attributes: {
                        "name": { "value": "pnlPanel1", "status": "overridden" }
                    },
                    children:   []
                }
            ];
            editor.setValue(JSON.stringify(widget_definition, null, '\t'), 0);
            $scope.view_cards.push({'name':card.name});
            $timeout(function() {
                $scope.view_card_select_index = $scope.view_cards.length-1;
            });
        }, function() {
            // do nothing
        });
        
        function DialogController($scope, $mdDialog) {
            $scope.card = {"name":""};
            $scope.addCardConfirm = function(answer) {
                $mdDialog.hide($scope.card);
            };

            $scope.addCardCancel = function() {
                $mdDialog.cancel();
            };
        }
    };

    $scope.removeCard = function(ev) {
        if ($scope.view_card_select_index>0) {
            var confirm = $mdDialog.confirm()
                .title('Remove Card')
                .textContent('Do you confirm you want to remove the card named ' + $scope.view_card_selected + '?')
                .ariaLabel('Remove Card')
                .targetEvent(ev)
                .ok('OK')
                .cancel('Cancel');
            $mdDialog.show(confirm).then(function() {
                var editor = $('#dfx_src_editor')[0].CodeMirror;
                var widget_definition = JSON.parse(editor.getValue());
                delete widget_definition.definition[$scope.view_card_selected];
                editor.setValue(JSON.stringify(widget_definition, null, '\t'), 0);
                for (var i=0; i<$scope.view_cards.length; i++) {
                    if ($scope.view_cards[i].name==$scope.view_card_selected) {
                        $scope.view_cards.splice(i, 1);
                        break;
                    }
                }
                $scope.gc_instances = {};
                $timeout(function() {
                    $scope.view_card_select_index = 0;
                });
            }, function() {
              // do nothing
            });
        } else {
            $mdDialog.show(
                $mdDialog.alert()
                    .clickOutsideToClose(true)
                    .title('Remove Card')
                    .textContent('You cannot remove the default card.')
                    .ariaLabel('Remove Card')
                    .ok('OK')
                    .targetEvent(ev)
            );
        }
    };

    $scope.toggleCard = function(card) {
        var editor = $('#dfx_src_editor')[0].CodeMirror;
        var widget_definition = JSON.parse(editor.getValue());

        for (var key in $scope.gc_instances) {
            var component = angular.copy($scope.gc_instances[key]);
            for (attribute in component.attributes) {
                if (component.attributes[attribute].status!='overridden') {
                    delete component.attributes[attribute];
                }
            }
            var widget_definition = JSON.parse(editor.getValue());
            DfxVisualBuilder.findComponentAndUpdateAttributes(component.id, widget_definition.definition, component.attributes, $scope.view_card_selected, false);
            editor.setValue(JSON.stringify(widget_definition, null, '\t'), 0);
        }

        $scope.gc_instances = {};
        $('#dfx_visual_editor_workspace_'+$scope.view_card_selected).empty();
        $scope.view_card_selected = card;
        $scope.unselectComponent();
        $scope.addComponents(widget_definition.definition, null, card);
        
    };

    $scope.exitViewEditor = function(ev) {
        var confirm = $mdDialog.confirm()
          .title('Exit')
          .textContent('Do you confirm you want to exit the editor?')
          .ariaLabel('Exit')
          .targetEvent(ev)
          .ok('OK')
          .cancel('Cancel');
        $mdDialog.show(confirm).then(function() {
          $window.close();
        }, function() {
          // do nothing
        });
    };

    $scope.updateAttributes = function() {
        var editor = $('#dfx_src_editor.CodeMirror')[0].CodeMirror;
        for (var key in $scope.gc_instances) {
            var component = angular.copy($scope.gc_instances[key]);
            for (attribute in component.attributes) {
                if (component.attributes[attribute].status != 'overridden') {
                    delete component.attributes[attribute];
                }
            }
            var widget_definition = JSON.parse(editor.getValue());
            DfxVisualBuilder.findComponentAndUpdateAttributes(component.id, widget_definition.definition, component.attributes, $scope.view_card_selected, false);
            editor.setValue(JSON.stringify(widget_definition, null, '\t'), 0);
        }
    };


    $scope.saveView = function() {
        /*DfxStudio.updateWidgetSource({
            widgetName:'#{widget.name}',
            category:'#{widget.category}',
            applicationName: '#{widget.application}'});*/        
        var editor = $('#dfx_src_editor.CodeMirror')[0].CodeMirror;
        for (var key in $scope.gc_instances) {
            var component = angular.copy($scope.gc_instances[key]);
            for (attribute in component.attributes) {
                if (component.attributes[attribute].status!='overridden') {
                    delete component.attributes[attribute];
                }
            }
            var widget_definition = JSON.parse(editor.getValue());
            DfxVisualBuilder.findComponentAndUpdateAttributes(component.id, widget_definition.definition, component.attributes, $scope.view_card_selected, false);
            editor.setValue(JSON.stringify(widget_definition, null, '\t'), 0);
        }
        var editor_script = $('#dfx_script_editor.CodeMirror')[0].CodeMirror;
        var editor_styles = $('#dfx_styles_editor.CodeMirror')[0].CodeMirror;
    
        var view_condensed_src = JSON.parse(editor.getValue());

        var obj           = {
            src:         JSON.stringify(view_condensed_src),
            src_script:  editor_script.getValue(),
            src_styles:  editor_styles.getValue(),
            application: $scope.application_name,
            platform:    $scope.view_platform,
            category:    $scope.view_category
        };

        // Update Widget Cache
        window.localStorage.setItem( 'dfx_' + $scope.view_name, editor.getValue() );

        $http({
            method: 'POST',
            url: '/studio/widget/update/' + $scope.view_name ,
            data: {
                change: obj
            }
        }).then(function (data) {
            $mdToast.show(
              $mdToast.simple()
                .textContent(data.data.data)
                .theme('success-toast')
                .position('top right')
                .hideDelay(3000)
            );
        },function (err) {
            $mdToast.show(
              $mdToast.simple()
                .textContent(JSON.parse(err.responseText).error.message)
                .position('top right')
                .hideDelay(3000)
            );
        });

    };

    $scope.openPreview = function() {
        var editor = $('#dfx_src_editor.CodeMirror')[0].CodeMirror;
        window.localStorage.setItem( 'dfx_' + $scope.view_name, editor.getValue() );
        $window.open('/studio/widget/' + $scope.view_platform + '/preview-auth/' + $scope.application_name + '/' + $scope.view_name + '/' + $scope.view_platform + '/desktop', '_blank');
        //$window.open('/studio/widget/web/preview-auth/' + $scope.application_name + '/' + $scope.view_name + '/web/desktop', '_blank');
    };

    $scope.openPreviewSettings = function(ev) {
        var parentEl = angular.element(document.body);
        $mdDialog.show({
            parent: parentEl,
            targetEvent: ev,
            template:
            '<md-dialog aria-label="Preview Settings">' +
            '   <md-toolbar>' +
            '       <div class="md-toolbar-tools">' +
            '           <h2>Preview Settings</h2>' +
            '       </div>' +
            '   </md-toolbar>' +
            '   <md-dialog-content style="width:500px;min-height:400px;padding:20px">'+
            '       <h4 style="padding-bottom:10px">Login credentials:</h4>' +
            '       <form layout="column">' +
            '           <md-input-container>' +
            '               <label>User ID</label>' +
            '               <input name="userid" ng-model="dfx_ve_login_userid" type="text" />' +
            '           </md-input-container>' +
            '           <md-input-container>' +
            '               <label>Password</label>' +
            '               <input name="password" ng-model="dfx_ve_login_password" type="password" />' +
            '           </md-input-container>' +
            '       </form>' +
            '   </md-dialog-content>' +
            '   <md-dialog-actions>' +
            '       <md-button ng-click="savePreviewSettings()" class="md-primary">' +
            '           Save' +
            '       </md-button>' +
            '       <md-button ng-click="clearPreviewSettings()" class="md-primary">' +
            '           Clear' +
            '       </md-button>' +
            '       <md-button ng-click="closePreviewSettingsDialog()" class="md-primary">' +
            '           Cancel' +
            '       </md-button>' +
            '   </md-dialog-actions>' +
            '</md-dialog>',
            locals: {
            },
            controller: DialogController
        });
        function DialogController($scope, $mdDialog) {
            $scope.dfx_ve_login_userid = localStorage.getItem( 'DFX_ve_login_userid' )==null ? '' : localStorage.getItem( 'DFX_ve_login_userid' );
            $scope.dfx_ve_login_password = localStorage.getItem( 'DFX_ve_login_password' )==null ? '' : localStorage.getItem( 'DFX_ve_login_password' );
            
            $scope.savePreviewSettings = function() {
                localStorage.setItem( 'DFX_ve_login_userid', $scope.dfx_ve_login_userid );
                localStorage.setItem( 'DFX_ve_login_password', $scope.dfx_ve_login_password );
                $mdDialog.hide();
            }

            $scope.clearPreviewSettings = function() {
                localStorage.removeItem( 'DFX_app_tokens' );
                localStorage.removeItem( 'DFX_ve_login_userid' );
                localStorage.removeItem( 'DFX_ve_login_password' );
                $scope.dfx_ve_login_userid = '';
                $scope.dfx_ve_login_password = '';
                dfxDialog.showMessage( 'Preview Settings Cleared' );
            }

            $scope.closePreviewSettingsDialog = function() {
                $mdDialog.hide();
            }
        }
    };

    $scope.openPreviewInPage = function() {
        $timeout(function(){
            $mdDialog.show({
                scope: $scope.$new(),
                parent: angular.element(document.body),
                clickOutsideToClose:true,
                templateUrl: '/studio/studioviews/page_preview_dialog.html',
                controller: function(){
                    $http({
                        method: 'POST',
                        url: '/studio/screen/getByView',
                        data : {
                            viewName : $scope.view_name,
                            applicationName : $scope.application_name
                        }

                    }).then(function(data) {
                        if (!window.localStorage.getItem('pagePreviewName')) {
                            $scope.selectedPage = {value : data.data.data[0] ? data.data.data[0].name : null};
                        } else {
                            $scope.selectedPage =  {value : window.localStorage.getItem('pagePreviewName') || null};
                        }
                        $scope.pagesArray = data.data.data;
                    },function(err){
                        dfxMessaging.showWarning(err);
                    });
                    $scope.closeDialog = function(){
                        $mdDialog.hide();
                    }
                    $scope.show = function() {
                        window.localStorage.setItem('pagePreviewName', $scope.selectedPage.value);
                        $scope.preview_wait_icon_visible = true;
                        $mdDialog.hide();

                        $http({
                            method : 'GET',
                            url : '/studio/screen/preview/' + $scope.application_name + '/' + $scope.selectedPage.value + '/' + $scope.view_platform
                        }).then(function(response){
                                $scope.preview_wait_icon_visible = false;
                                if (response.data.indexOf('http') > -1) {
                                    $window.open(response.data, '_blank');
                                } else {
                                    dfxMessaging.showWarning(response.data);
                                }
                            },function(err){
                                $scope.preview_wait_icon_visible = false;
                                dfxMessaging.showWarning("Something went wrong. See server logs for more details");
                            })
                    }
                }
            });
        }, 0);
    };

    var platform = $('#dfx_visual_editor').attr('platform');
    $('.dfx_visual_editor_gc_cat_item').empty();

    // Initialize GC Palette
    $scope.palette = {
        'basic': {
            'statictext': {'default_name':'txtText', 'flex':'false'},
            'button': {'default_name':'btnButton', 'flex':'false'},
            'icon': {'default_name':'icoIcon', 'flex':'false'},
            'image': {'default_name':'imgImage', 'flex':'false'},
            'html': {'default_name':'htHtml', 'flex':'true'},
            'carousel': {'default_name':'crsCarousel', 'flex':'true'},
            'googlemap': {'default_name':'googleMap', 'flex':'true'},
            'treeview': {'default_name':'trvTreeView', 'flex':'true'}
        },
        'input': {
            'input': {'default_name':'inpInput', 'flex':'true'},
            'textarea': {'default_name':'txtTextarea', 'flex':'true'},
            'datepicker': {'default_name':'dtField', 'flex':'true'},
            'select': {'default_name':'selSelect', 'flex':'true'},
            'slider': {'default_name':'sldSlider', 'flex':'true'},
            'knob': {'default_name':'knbKnob', 'flex':'false'},
            'chips': {'default_name':'chpChips', 'flex':'true'},
            'rating': {'default_name':'rtRating', 'flex':'false'},
            'richtext': {'default_name':'rchText', 'flex':'true'},
            'json': {'default_name':'jsnJson', 'flex':'true'},
            'progressbar': {'default_name':'progressBar', 'flex':'true'}
        },
        'menu': {
            'fab': {'default_name':'fbFab', 'flex':'false'},
            'iconbar': {'default_name':'iconBar', 'flex':'false'},
            'treemenu': {'default_name':'trMenu', 'flex':'false'},
            'horizontalmenu': {'default_name':'hrztMenu', 'flex':'true'}
        },
        'selection': {
            'radio': {'default_name':'rdRadio', 'flex':'false'},
            'checkbox': {'default_name':'chkCheckbox', 'flex':'false'},
            'switch': {'default_name':'swtSwitch', 'flex':'false'}
        },
        'table': {
            'datatable': {'default_name':'dtblDatatable', 'flex':'true'}
        },
        'chart': {
            'barchart': {'default_name':'barChart', 'flex':'false'},
            'hzbarchart': {'default_name':'hzBarChart', 'flex':'false'},
            'piechart': {'default_name':'pieChart', 'flex':'false'},
            'donutchart': {'default_name':'donutChart', 'flex':'false'},
            'linechart': {'default_name':'lineChart', 'flex':'false'},
            'cmlinechart': {'default_name':'cmLineChart', 'flex':'false'},
            'areachart': {'default_name':'areaChart', 'flex':'false'}
        },
        'layout': {
            'panel': {'default_name':'pnlPanel', 'flex':'true'},
            'tabs': {'default_name':'tbTabs', 'flex':'true'},
            'wizard': {'default_name':'wzrdWizard', 'flex':'true'}
        }
    }

    if ($('body').attr('dfx-load-google-maps') === 'false') {
        delete $scope.palette.basic.googlemap;
    }
    var item_fragment = '';
    var comp_idx = 0;

    for (var cat in $scope.palette) {
        for (var gc in $scope.palette[cat]) {
            item_fragment = '<li class="dfx_visual_editor_draggable dfx_visual_editor_gc_cat_item_draggable" gc-cat="' + cat + '" gc-type="' + gc + '" gc-flex="' + $scope.palette[cat][gc].flex + '">' + '<img class="dfx-ve-palette-icon" src="/images/vb/icons/' + cat + '_' + gc + '.png" title="' + gc + '"/></li>';
            $('ul[gc-cat=' + cat + ']').append(item_fragment);
        }
    }

    // Initialize Graphical Controls
    // gc_instances     List of Graphical Controls
    // gc_selected      Current selected Graphical Control 
    $scope.gc_instances = {};
    $scope.view_cards = [];
    $scope.view_card_selected = 'default';
    $scope.view_card_select_index = -1;

    $scope.$watch('view_card_select_index', function(current, old){
        if (current!=old) {
            $scope.toggleCard( $scope.view_cards[current].name );
        }
    });

    $scope.swapContainerDown = function(component_id, index, tabNumber){
        var editor = $('#dfx_src_editor')[0].CodeMirror;
        var widget_definition = JSON.parse(editor.getValue());
        $scope.findComponentAndUpdateContainerDown(component_id, widget_definition.definition, $scope.view_card_selected, false, index, tabNumber);
        editor.setValue(JSON.stringify(widget_definition, null, '\t'), 0);
    };

    $scope.swapContainerRight = function(component_id, index, rowIndex, tabNumber){
        var editor = $('#dfx_src_editor')[0].CodeMirror;
        var widget_definition = JSON.parse(editor.getValue());
        $scope.findComponentAndUpdateContainerRight(component_id, widget_definition.definition, $scope.view_card_selected, false, index, rowIndex, tabNumber);
        editor.setValue(JSON.stringify(widget_definition, null, '\t'), 0);
    };

    $scope.swapContainerUp = function(component_id, index, tabNumber){
        var editor = $('#dfx_src_editor')[0].CodeMirror;
        var widget_definition = JSON.parse(editor.getValue());
        $scope.findComponentAndUpdateContainerUp(component_id, widget_definition.definition, $scope.view_card_selected, false, index, tabNumber);
        editor.setValue(JSON.stringify(widget_definition, null, '\t'), 0);
    };

    $scope.swapContainerLeft = function(component_id, index, rowIndex, tabNumber){
        var editor = $('#dfx_src_editor')[0].CodeMirror;
        var widget_definition = JSON.parse(editor.getValue());
        $scope.findComponentAndUpdateContainerLeft(component_id, widget_definition.definition, $scope.view_card_selected, false, index, rowIndex, tabNumber);
        editor.setValue(JSON.stringify(widget_definition, null, '\t'), 0);
    };

    $scope.findComponentAndUpdateContainerDown = function (component_id, parent_definition, card, found_it, index, tabNumber) {
        var idx = 0, child_idx = 0;
        var ref_parent_definition = (card!=null) ? parent_definition[card] : parent_definition;
        if (!found_it) {
            for (idx = 0; idx < ref_parent_definition.length; idx++) {
                if (ref_parent_definition[idx].id == component_id) {
                    found_it= true;
                    var g_controls = ref_parent_definition[idx].children;
                    for(var i=0; i < g_controls.length; i++){
                        var arr = g_controls[i].container.split('_');
                        if(parseInt(arr[1]) === tabNumber){
                            if(parseInt(arr[3]) === index){
                                arr[3] = index + 1;
                            }else if(parseInt(arr[3]) === (index+1)){
                                arr[3] = index;
                            }
                            g_controls[i].container = arr.join('_');
                        }
                    }
                    ref_parent_definition[idx].children = g_controls;
                    break;
                } else {
                    $scope.findComponentAndUpdateContainerDown(component_id, ref_parent_definition[idx].children, null, found_it, index, tabNumber);
                }
            }
        }
    };

    $scope.findComponentAndUpdateContainerRight = function (component_id, parent_definition, card, found_it, index, rowIndex, tabNumber) {
        var idx = 0, child_idx = 0;
        var ref_parent_definition = (card!=null) ? parent_definition[card] : parent_definition;
        if (!found_it) {
            for (idx = 0; idx < ref_parent_definition.length; idx++) {
                if (ref_parent_definition[idx].id == component_id) {
                    found_it= true;
                    var g_controls = ref_parent_definition[idx].children;
                    for(var i=0; i < g_controls.length; i++){
                        var arr = g_controls[i].container.split('_');
                        if(parseInt(arr[1]) === tabNumber){
                            if(parseInt(arr[5]) === index && parseInt(arr[3]) === rowIndex){
                                arr[5] = index + 1;
                            }else if(parseInt(arr[5]) === (index+1) && parseInt(arr[3]) === rowIndex){
                                arr[5] = index;
                            }
                            g_controls[i].container = arr.join('_');
                        }
                    }
                    ref_parent_definition[idx].children = g_controls;
                    break;
                } else {
                    $scope.findComponentAndUpdateContainerRight(component_id, ref_parent_definition[idx].children, null, found_it, index, rowIndex, tabNumber);
                }
            }
        }
    };

    $scope.findComponentAndUpdateContainerUp = function (component_id, parent_definition, card, found_it, index, tabNumber) {
        var idx = 0, child_idx = 0;
        var ref_parent_definition = (card!=null) ? parent_definition[card] : parent_definition;
        if (!found_it) {
            for (idx = 0; idx < ref_parent_definition.length; idx++) {
                if (ref_parent_definition[idx].id == component_id) {
                    found_it= true;
                    var g_controls = ref_parent_definition[idx].children;
                    for(var i=0; i < g_controls.length; i++){
                        var arr = g_controls[i].container.split('_');
                        if(parseInt(arr[1]) === tabNumber){
                            if(parseInt(arr[3]) === index){
                                arr[3] = index - 1;
                            }else if(parseInt(arr[3]) === (index-1)){
                                arr[3] = index;
                            }
                            g_controls[i].container = arr.join('_');
                        }
                    }
                    ref_parent_definition[idx].children = g_controls;
                    break;
                } else {
                    $scope.findComponentAndUpdateContainerUp(component_id, ref_parent_definition[idx].children, null, found_it, index, tabNumber);
                }
            }
        }
    };

    $scope.findComponentAndUpdateContainerLeft = function (component_id, parent_definition, card, found_it, index, rowIndex, tabNumber) {
        var idx = 0, child_idx = 0;
        var ref_parent_definition = (card!=null) ? parent_definition[card] : parent_definition;
        if (!found_it) {
            for (idx = 0; idx < ref_parent_definition.length; idx++) {
                if (ref_parent_definition[idx].id == component_id) {
                    found_it= true;
                    var g_controls = ref_parent_definition[idx].children;
                    for(var i=0; i < g_controls.length; i++){
                        var arr = g_controls[i].container.split('_');
                        if(parseInt(arr[1]) === tabNumber){
                            if(parseInt(arr[5]) === index && parseInt(arr[3]) === rowIndex){
                                arr[5] = index - 1;
                            }else if(parseInt(arr[5]) === (index-1) && parseInt(arr[3]) === rowIndex){
                                arr[5] = index;
                            }
                            g_controls[i].container = arr.join('_');
                        }
                    }
                    ref_parent_definition[idx].children = g_controls;
                    break;
                } else {
                    $scope.findComponentAndUpdateContainerLeft(component_id, ref_parent_definition[idx].children, null, found_it, index, rowIndex, tabNumber);
                }
            }
        }
    };

    $scope.getComponent = function( element ) {
        var id = $(element).attr('id');
        if ($(element).attr('dfx-gc-renderer-content')!=null) {
            var component_id = $(element).parent().attr('component-id');
            var column_id = $(element).parent().attr('column-id');
            return $scope.gc_instances[component_id].attributes.columns.value[column_id].renderer;
        } else {
            return $scope.gc_instances[id];
        }
    };

    $scope.setComponent = function( component ) {
        // update widget definition
        var parent_id = $('#'+component.id).parent().attr('gc-parent');
        var container_id = $('#'+component.id).parent().attr('gc-container');
        component.container = container_id;
        $scope.gc_instances[ component.id ] = component;
        DfxVisualBuilder.addComponentToDefinition(component.id, parent_id, component, $scope.view_card_selected);
    };

    // Load cards
    $scope.loadCards = function(view_definition) {
        if($scope.view_cards.length === 0){
            for (card in view_definition) {
                $scope.view_cards.push({"name": card});
            }
            $timeout(function() {
                $scope.view_card_select_index = $scope.view_cards.length-1;
            }, 1000);
        }
    };

    // Add components
    $scope.addComponents = function( components, container_component, card ) {
        var idx = 0;
        var ref_components = (card!=null) ? components[card] : components;
        for (idx = 0; idx < ref_components.length; idx++) {
            var component = ref_components[idx];
            $scope.addComponent(component, container_component, card);
        }
    };

    // Add a component
    $scope.addComponent = function( component, container_component, card) {
        var component_instance = $scope.renderGraphicalControl(component);
        if (container_component == null) {
            $('#dfx_visual_editor_workspace_' + card).append(component_instance.fragment);
        } else {
            $('#' + container_component.id + '_' + component.container).append(component_instance.fragment);
        }
    };

    // Render GControls
    $scope.renderGraphicalControl = function( component ) {
        $scope.gc_instances[component.id] = component;
        var gc_instance = {};
        var flex_container_attr = (component.flex=='true' || (component.attributes!=null && component.attributes.flex!=null)) ? ' flex="{{attributes.flex.value}}"' : '';

        var panel_layout = (component.type == 'panel' && component.attributes && (!component.attributes.autoHeight ||  component.attributes.autoHeight.value != true)) ? ' style="height:100%;" layout="column" ' : '';

        gc_instance.fragment = $compile('<div id="' + component.id + '" dfx-gc-web-base dfx-gc-web-' + component.type + ' dfx-gc-design gc-type="' + component.type + '" gc-role="control"' + flex_container_attr + panel_layout + '></div>')($scope);
        gc_instance.id = component.id;

        return gc_instance;
    };

    // Load Property Panel
    $scope.loadPropertyPanel = function( component_id ) {
        var component = $scope.gc_instances[ component_id ];
        if ($scope.gc_selected != null) {
            $('#'+$scope.gc_selected.id).css('border', '0px');
        }
        $scope.gc_selected = $scope.gc_instances[component_id];
        $('#'+$scope.gc_selected.id).css('border', '2px #000 solid');
        var gc_property_panel = $compile('<div id="' + component.id + '" dfx-gc-web-base dfx-gc-web-' + component.type + ' dfx-gc-edit></div>')($scope);
        $('#dfx_visual_editor_property_panel').empty();
        $('#dfx_visual_editor_property_panel').append(gc_property_panel);
        $('#dfx-ve-property-title-selected-gc').css('display', 'inline-block');
        $('#dfx-ve-property-title-selected-gc-text').text(component.attributes.name.value);
        $('#dfx-ve-property-title-selected-gc-text').attr('component-id', component.id);
    };

    $scope.reloadPropertyPanel = function() {
        $('#dfx-ve-property-title-selected-renderer').css('display', 'none');
        var id = $('#dfx-ve-property-title-selected-gc-text').attr('component-id');
        $scope.loadPropertyPanel(id);
    }

    $scope.removeComponent = function(component_id) {
        var confirm = $mdDialog.confirm()
            .title('Would you like to delete this component?')
            .content('The component and all child components will be deleted.')
            .cancel('No')
            .ok('Yes');
        $mdDialog.show(confirm).then(function() {
            var parent_id = $('#'+component_id).closest('[gc-parent]').attr('gc-parent');
            if (parent_id) {
                delete $scope.gc_instances[component_id];
                DfxVisualBuilder.removeComponentConfirmed(component_id, $scope.view_card_selected);
            } else {
                dfxMessaging.showWarning('Root panel can not be removed');
            }
        });
    };

    $scope.overrideAttribute = function(attribute_name) {
        function setAttibutesChainStatus(path, obj) {
            var schema = obj,
                pList = path.split('.');
            
            for (var i = 0; i < pList.length; i++) {
                var elem = pList[i];
                if (!schema[elem] && schema[elem] !== '') {
                    schema[elem] = {};
                }
                schema = schema[elem];
                if (schema !== null && typeof schema === 'object') {
                    schema.status = 'overridden';   
                }
            }
        }

        setAttibutesChainStatus(attribute_name, $scope.gc_selected.attributes);
    };

    // Functions implementing UNDO in view editor - START
    $scope.cacheAttributeOldValue = function (attribute_name, $event, attribute_value) {
        if ($event && $event.relatedTarget.textContent == 'Save') return;//called from picker using $.focus() by clicking Save button
        
        if (attribute_value) {
            $scope.attribute_temp_old_value = {value: attribute_value};
        } else {
            $scope.attribute_temp_old_value = angular.copy($scope.gc_selected.attributes[attribute_name]);
        }
    };

    $scope.cacheAttributeNewValue = function (attribute_name) {
        var attribute_new_value = $scope.gc_selected.attributes[attribute_name].value;
        var attribute_old_value = $scope.attribute_temp_old_value ?  $scope.attribute_temp_old_value.value : '';

        if (attribute_new_value !== attribute_old_value) {
            $scope.view_editor_actions_stack = $scope.view_editor_actions_stack || [];
            $scope.view_editor_actions_stack.unshift({ component_id: $scope.gc_selected.id, attribute_name: attribute_name, attribute_old_value: angular.copy(attribute_old_value) });
        }
    };

    $scope.viewEditorUndo = function() {
        if ($scope.view_editor_actions_stack && $scope.view_editor_actions_stack.length > 0) {
            var action_for_undo = $scope.view_editor_actions_stack.shift();
            var gc_for_undo = $scope.gc_instances[ action_for_undo.component_id ];
            gc_for_undo.attributes[ action_for_undo.attribute_name ].value = action_for_undo.attribute_old_value;
        }
    };
    // Functions implementing UNDO in view editor - END

    // Functions implementing Cut/Copy/Paste in view editor - START
    $scope.viewEditorCut = function() {
        var component_id = $scope.gc_selected.id;
        var parent_id = $('#'+component_id).closest('[gc-parent]').attr('gc-parent');

        if (parent_id) {
            var view_definition = DfxVisualBuilder.movingComponentHelper.getViewDefinition();
            var component_definition = DfxVisualBuilder.getComponentDefinition($scope.gc_selected.id, view_definition.definition);

            component_definition.attributes = angular.copy($scope.gc_selected.attributes);// if comp attributes changed and not saved, it's only in scope at the moment of cut/copy

            $scope.view_editor_cached_component = component_definition;// put component in memory

            // remove component
            delete $scope.gc_instances[component_id];
            DfxVisualBuilder.removeComponentConfirmed(component_id, $scope.view_card_selected);
        } else {
            dfxMessaging.showWarning('Root panel can not be cut');
        }
    };

    $scope.viewEditorCopy = function() {
        var view_definition = DfxVisualBuilder.movingComponentHelper.getViewDefinition();
        var component_definition = DfxVisualBuilder.getComponentDefinition($scope.gc_selected.id, view_definition.definition);

        component_definition.attributes = angular.copy($scope.gc_selected.attributes);// if comp attributes changed and not saved, it's only in scope at the moment of cut/copy

        $scope.view_editor_cached_component = component_definition;// put component in memory
    };

    $scope.viewEditorPaste = function() {
        if ($scope.view_editor_cached_component && $scope.gc_selected) {
            DfxVisualBuilder.pasteComponent(angular.copy($scope.view_editor_cached_component), $scope.gc_selected, $scope.view_card_selected);
        }
    };
    // Functions implementing Cut/Copy/Paste in view editor - END

    DfxVisualBuilder.init();
}]);

dfxViewEditorApp.directive('dfxGcWebDroppable', [ '$timeout', function($timeout) {
    return {
        restrict: 'A',
        controller: function($scope, $element, $attrs) {
            angular.element(document).ready(function() {
                $('#'+$attrs.id).sortable({
                    appendTo:         'body',
                    cursor:           'move',
                    cursorAt:         {top: 15, left: 40},
                    placeholder:      'ui-placeholder',
                    refreshPositions: true,
                    handle:           '.dfx-ve-gc-handle',
                    tolerance:        'pointer',
                    scroll:           true,
                    connectWith:      '.dfx_visual_editor_droppable',
                    beforeStop: function (event, ui) {
                        var gc_id,
                            gc_type = $(ui.item).attr('gc-type'),
                            gc_flex = $(ui.item).attr('gc-flex');
                        if ($(ui.item).hasClass('dfx_visual_editor_gc_cat_item_draggable')) {
                            // Add a new component
                            gc_id  = Math.floor(Math.random() * 100000);
                            var view_editor = document.querySelector('#dfx_src_widget_editor');
                            var view_editor_scope = angular.element(view_editor).scope();
                            var gc = view_editor_scope.renderGraphicalControl({id: gc_id, type: gc_type, flex: gc_flex, just_dropped: true});
                            $(ui.item).replaceWith(gc.fragment);
                        } else {
                            // Move component
                            gc_id = $(ui.item).attr('id');
                            DfxVisualBuilder.moveComponent(gc_id, this, $scope.view_card_selected);
                        }
                    },
                    start: function (event, ui) {
                        $(ui.placeholder).html('<div style="border:1px #00c3f3 dashed;min-width:50px;height:30px;"></div>');
                    },
                    helper: 'clone'
                });
            });
        }
    }
}]);

dfxViewEditorApp.directive('dfxGcLayoutProperty', ['$mdToast', function($mdToast) {
    return {
        restrict: 'A',
        templateUrl: function( el, attrs ) {
            return '/gcontrols/web/layout_props.html';
        },
        controller: function($scope, $element, $attrs) {
            $scope.addLayoutRow = function() {
                var component = $scope.$parent.gc_selected;
                component.attributes.layout.status = "overridden";
                component.attributes.layout.rows.push({
                    "cols": [
                        {
                            "width": { "value": 100},
                            "autoWidth": { "value": false},
                            "display": { "value": "true"},
                            "classes": {
                                "value": ""
                            },
                            "dynamicClasses": {
                                "value": ""
                            },
                            "style": {
                                "value": ""
                            },
                            "orientation": {
                                "value": "row"
                            },
                            "halignment": {
                                "value": "start"
                            },
                            "valignment": {
                                "value": "start"
                            },
                            "css": {
                                "color": "",
                                "background": "",
                                "padding": "",
                                "text-align": ""
                            }
                        }
                    ],
                    "classes": {
                        "value": ""
                    },
                    "dynamicClasses": {
                        "value": ""
                    },
                    "style": {
                        "value": ""
                    }
                });
                DfxVisualBuilder.initGraphicalControls();
            };
            $scope.addLayoutColumn = function(row_index) {
                var component = $scope.$parent.gc_selected;
                component.attributes.layout.status = "overridden";
                component.attributes.layout.rows[row_index].cols.push({
                    "width": { "value": 25},
                    "autoWidth": { "value": false},
                    "display": { "value": "true"},
                    "classes": {
                        "value": ""
                    },
                    "dynamicClasses": {
                        "value": ""
                    },
                    "style": {
                        "value": ""
                    },
                    "orientation": {
                        "value": "row"
                    },
                    "halignment": {
                        "value": "start"
                    },
                    "valignment": {
                        "value": "start"
                    },
                    "css": {
                        "color": "",
                        "background": "",
                        "padding": "",
                        "text-align": ""
                    }
                });
                DfxVisualBuilder.initGraphicalControls();
            };
            
            $scope.deleteLayoutColumn = function(row_index, col_index) {
                if ($('#'+$scope.$parent.gc_selected.id+'_layout_0_row_'+row_index+'_column_'+col_index).children().length>0) {

                    // move components from removed row to the first row or to the second (in case when first row is removed)
                    var container_id = $scope.$parent.gc_selected.id;

                    var to_layout_id = col_index == 0 ? 'layout_0_row_'+row_index+'_column_1' : 'layout_0_row_'+row_index+'_column_0';

                    var column_children = $('#'+$scope.$parent.gc_selected.id+'_layout_0_row_'+row_index+'_column_'+col_index).children();
                    if (column_children.length > 0) {

                        for (var i = 0; i < column_children.length; i++) {
                            var next_gc_id = column_children[i].id;

                            // Move component
                            DfxVisualBuilder.moveComponentFromRemovedLayout(next_gc_id, $scope.$parent.view_card_selected, container_id, to_layout_id);
                        }
                    }

                    //$mdToast.show(
                    //    $mdToast.simple()
                    //        .content('The column must be empty to be deleted!')
                    //        .position('top right')
                    //        .hideDelay(3000)
                    //);
                }
                
                var component = $scope.$parent.gc_selected;
                component.attributes.layout.status = "overridden";
                component.attributes.layout.rows[row_index].cols.splice(col_index, 1);

                // reindex layout children
                var editor = $('#dfx_src_editor.CodeMirror')[0].CodeMirror;
                var wgt_definition = JSON.parse(editor.getValue());
                DfxVisualBuilder.reindexLayoutChildComponents(row_index, col_index, container_id, wgt_definition.definition, $scope.$parent.view_card_selected, false);
                editor.setValue(JSON.stringify(wgt_definition, null, '\t'));
            };

            $scope.deleteLayoutRow = function(row_index) {
                var component = $scope.$parent.gc_selected;
                var row_cols = component.attributes.layout.rows[row_index].cols;
                var empty = true;
                for (var i=0; i<row_cols.length; i++) {
                    if ($('#'+$scope.$parent.gc_selected.id+'_layout_0_row_'+row_index+'_column_'+i).children().length>0) {
                        empty=false;
                        break;
                    }
                }

                // move components from removed row to the first row or to the second (in case when first row is removed)
                var container_id = $scope.$parent.gc_selected.id;

                if (!empty) {
                    var to_layout_id = row_index == 0 ? 'layout_0_row_1_column_0' : 'layout_0_row_0_column_0';

                    for (var i = 0; i < row_cols.length; i++) {
                        var column_children = $('#'+$scope.$parent.gc_selected.id+'_layout_0_row_'+row_index+'_column_'+i).children();
                        if (column_children.length > 0) {

                            for (var j = 0; j < column_children.length; j++) {
                                var next_gc_id = column_children[j].id;

                                // Move component
                                DfxVisualBuilder.moveComponentFromRemovedLayout(next_gc_id, $scope.$parent.view_card_selected, container_id, to_layout_id);
                            }
                        }
                    }

                    //$mdToast.show(
                    //    $mdToast.simple()
                    //        .content('The row must be empty to be deleted!')
                    //        .position('top right')
                    //        .hideDelay(3000)
                    //);
                }

                component.attributes.layout.status = "overridden";
                component.attributes.layout.rows.splice(row_index, 1);

                // reindex layout children
                var editor = $('#dfx_src_editor.CodeMirror')[0].CodeMirror;
                var wgt_definition = JSON.parse(editor.getValue());
                DfxVisualBuilder.reindexLayoutChildComponents(row_index, null, container_id, wgt_definition.definition, $scope.$parent.view_card_selected, false);
                editor.setValue(JSON.stringify(wgt_definition, null, '\t'));
            };
        }
    }
}]);

dfxViewEditorApp.directive('dfxGcExtendedProperty', [function() {
    return {
        restrict: 'A',
        templateUrl: function( el, attrs ) {
            return '/gcontrols/web/extended_props.html';
        },
        controller: function($scope, $element, $attrs) {
            $scope.addExtendedDirective = function() {
                var component = $scope.$parent.gc_selected;
                if (component.attributes.ext_directives==null) {
                    component.attributes.ext_directives = [{'directive':'','value':''}];
                } else {
                    component.attributes.ext_directives.push({'directive':'','value':''});
                }
            };
        }
    }
}]);

dfxViewEditorApp.directive('dfxGcRendererDesign', ['$compile', '$timeout', function($compile, $timeout) {
    return {
        restrict: 'A',
        link: function($scope, $element, $attrs) {
            $timeout(function() {
                var angular_snippet = $compile('<div id="'+$attrs.componentId+'_renderer_'+$attrs.columnId+'" dfx-gc-web-base dfx-gc-web-'+$attrs.dfxGcRendererDesign+' dfx-gc-design dfx-gc-renderer-content="'+$attrs.componentId+'"></div>')($scope);
                $element.append(angular_snippet);
            }, 0);
        }
    }
}]);

dfxViewEditorApp.directive('dfxVePickerIcon', ['$q', '$http', '$mdDialog', '$timeout', '$compile', '$filter', function($q, $http, $mdDialog, $timeout, $compile, $filter) {
    return {
        restrict: 'A',
        transclude: true,
        replace: true,
        link: function(scope, element, attrs) {
            scope.showFontIcons = function(ev, iconObj) {
                //scope.$parent.cacheAttributeOldValue(attrs.dfxPickerProperty);// needed for UNDO functionality
                
                scope.iconObj = iconObj;
                scope.faIcons = [];                
                scope.svgCategories = [];
                scope.svgIcons = [];
                scope.faLoaded = $http.get('/gcontrols/web/picker_icon.json').then(function(res){
                    for ( var i = 0; i < res.data.faClasses.length; i++ ) {
                        var faResIcon = { "value": res.data.faClasses[i], "category": "'fa-icons'", "type": "fa-icon" };
                        scope.faIcons.push( faResIcon );
                    }   
                });
                scope.svgLoaded = $http.get('/gcontrols/web/mdicons.json').then(function(res){
                    for ( var i = 0; i < res.data.length; i++ ) {
                        scope.svgCategories.push( res.data[i].type );
                        for ( var j = 0; j < res.data[i].items.length; j++ ) {
                            var svgResIcon = { "value": res.data[i].items[j], "category": "'"+res.data[i].type+"', 'svg-icons'", "type": "svg-icon" };
                            scope.svgIcons.push( svgResIcon );
                        }
                    }
                    scope.dfxIconsList = scope.svgIcons.concat(scope.faIcons);
                    scope.dfxFilteredIconsList = scope.dfxIconsList;
                });
                $q.all([scope.faLoaded, scope.svgLoaded]).then(function(){
                    $('body').append('<div class="dfx-ve-dialog"></div>');
                    $('.dfx-ve-dialog').load('/gcontrols/web/picker_icon_list.html', function(){
                        $compile($('.dfx-ve-dialog').contents())(scope);
                        $('.sp-container').remove();
                        $timeout(function() {
                            $('.dfx-ve-icons-dialog').addClass('active');
                        }, 250);
                    });
                });               
            }   
            scope.iconsCategory = '';
            scope.chooseIconsCategory = function( iconCategory, ev ) {
                scope.dfxIconsList = $filter('filter')(scope.dfxFilteredIconsList, "'"+iconCategory+"'", 'strict');                
                switch ( iconCategory ) {
                    case 'svg-icons': scope.iconsCategory = '/ ' + 'SVG Icons'; break;
                    case 'fa-icons': scope.iconsCategory = '/ ' + 'Font Awesome Icons'; break;
                    default: scope.iconsCategory = '/ ' + iconCategory;
                }
                $(".dfx-ve-icons-categories span").removeClass('active');
                $(ev.target).addClass('active');
            }
            scope.searchIcons = function( icon ) {
                scope.dfxIconsList = $filter('filter')(scope.dfxFilteredIconsList, icon, 'strict');
                scope.iconsCategory = '| ' + icon;
                $(".dfx-ve-icons-categories span").removeClass('active');
            }
            scope.setDfxIcon = function(icon, type) {
                scope.iconObj.value = "'"+icon+"'";
                scope.iconObj.type = type;
                scope.closeVeIconsDialog();

                //scope.$parent.cacheAttributeNewValue(attrs.dfxPickerProperty);// needed for UNDO functionality
            }
            scope.closeVeIconsDialog = function(){
                $('.dfx-ve-icons-dialog').removeClass('active');
                $timeout(function(){
                    angular.element($('.dfx-ve-dialog')).remove();
                    $('.sp-container').remove();
                }, 250);
            }
        }
    }
}]);

dfxViewEditorApp.directive('dfxVeCssStyle', ['$timeout', '$compile', function($timeout, $compile) {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        templateUrl: function( el, attrs ) {
            return '/gcontrols/web/css_style.html';
        },
        link: function(scope, element, attrs) {    
            scope.attributes.style.status = "overridden";
            scope.showCssStyles = function(ev) {
                var dfxCssStyleDialog = '<div class="dfx-ve-dialog"></div>';
                $('body').append(dfxCssStyleDialog);
                $('.dfx-ve-dialog').load('/gcontrols/web/css_styles_tree.html', function(response,status,xhr){
                    $compile($('.dfx-ve-dialog').contents())(scope);
                    $('.sp-container').remove();
                    scope.preview = {};
                    $timeout(function() {
                        $('.dfx-ve-css-style-editor').addClass('active');
                        scope.inputStyle = $(".css-style");
                        scope.targetStyles = ev.target;
                        scope.targetElement = $(scope.targetStyles).parent().children('input');
                        scope.targetValue = angular.element(scope.targetElement).data('$ngModelController').$viewValue;
                        scope.cssStyles = scope.targetValue.split(";");
                        scope.previewBox = {};
                        var ifButtonGc = scope.attributes.name.value;
                        var isButtonGc = ifButtonGc.indexOf("Button");
                        if ( isButtonGc >= 0 ) {
                            $(".dfx-css-style-preview-inner").addClass('md-raised md-primary md-altTheme-theme glyph md-button');
                        }
                        $(".dfx-css-style-preview-inner").css('opacity',1);
                        var newStyle = '',
                            styleRules = {},
                            otherStyles = [],
                            styleItem = '',
                            styleName = '',
                            styleValue = '';
                        for (var i = 0; i < scope.cssStyles.length; i++) {
                            var styleRule = scope.cssStyles[i].split(':'),
                                styleRuleName = String(styleRule[0]).replace(/(^\s+|\s+$)/g,''),
                                styleRuleValue = String(styleRule[1]).replace(/(^\s+|\s+$)/g,'');
                            if (styleRule.length === 2 && styleRuleName !== '' && styleRuleValue !== '' ) {
                                styleRule[0] = styleRuleName;
                                styleRule[1] = styleRuleValue;
                                switch(styleRule[0]) {
                                    case 'background': $(".css-style.background").val(styleRule[1]); break;
                                    case 'background-attachment': $(".css-style.background-attachment").val(styleRule[1]); break;
                                    case 'background-color': $(".css-style.background-color").val(styleRule[1]); scope.previewBox.BackgroundColor = styleRule[1]; break;
                                    case 'background-image': $(".css-style.background-image").val(styleRule[1]); break;
                                    case 'background-position': $(".css-style.background-position").val(styleRule[1]); break;
                                    case 'background-repeat': $(".css-style.background-repeat").val(styleRule[1]); break;
                                    case 'background-size': $(".css-style.background-size").val(styleRule[1]); break;
                                    case 'border': $(".css-style.border").val(styleRule[1]); break;
                                    case 'border-style': $(".css-style.border-style").val(styleRule[1]); scope.previewBox.BorderStyle = styleRule[1]; break;
                                    case 'border-width': $(".css-style.border-width").val(styleRule[1]); scope.previewBox.BorderWidth = styleRule[1]; break;
                                    case 'border-color': $(".css-style.border-color").val(styleRule[1]); scope.previewBox.BorderColor = styleRule[1]; break;
                                    case 'border-top': $(".css-style.border-top").val(styleRule[1]); scope.previewBox.BorderTop = styleRule[1]; break;
                                    case 'border-right': $(".css-style.border-right").val(styleRule[1]); scope.previewBox.BorderRight = styleRule[1]; break;
                                    case 'border-bottom': $(".css-style.border-bottom").val(styleRule[1]); scope.previewBox.BorderBottom = styleRule[1]; break;
                                    case 'border-left': $(".css-style.border-left").val(styleRule[1]); scope.previewBox.BorderLeft = styleRule[1]; break;
                                    case 'border-radius': $(".css-style.border-radius").val(styleRule[1]); scope.previewBox.BorderRadius = styleRule[1]; break;
                                    case 'box-sizing': $(".css-style.box-sizing").val(styleRule[1]); break;
                                    case 'box-shadow': $(".css-style.box-shadow").val(styleRule[1]); scope.previewBox.BoxShadow = styleRule[1]; break;
                                    case 'cursor': $(".css-style.cursor").val(styleRule[1]); scope.previewBox.Cursor = styleRule[1]; break;
                                    case 'direction': $(".css-style.direction").val(styleRule[1]); break;
                                    case 'display': $(".css-style.display").val(styleRule[1]); break;
                                    case 'flex': $(".css-style.flex").val(styleRule[1]); break;
                                    case 'flex-basis': $(".css-style.flex-basis").val(styleRule[1]); break;
                                    case 'flex-direction': $(".css-style.flex-direction").val(styleRule[1]); break;
                                    case 'flex-flow': $(".css-style.flex-flow").val(styleRule[1]); break;
                                    case 'flex-grow': $(".css-style.flex-grow").val(styleRule[1]); break;
                                    case 'flex-shrink': $(".css-style.flex-shrink").val(styleRule[1]); break;
                                    case 'flex-wrap': $(".css-style.flex-wrap").val(styleRule[1]); break;
                                    case 'justify-content': $(".css-style.justify-content").val(styleRule[1]); break;
                                    case 'float': $(".css-style.float").val(styleRule[1]); break;
                                    case 'clear': $(".css-style.clear").val(styleRule[1]); break;
                                    case 'font-family': $(".css-style.font-family").val(styleRule[1]); scope.previewBox.FontFamily = styleRule[1]; break;
                                    case 'font-size': $(".css-style.font-size").val(styleRule[1]); scope.previewBox.FontSize = styleRule[1]; break;
                                    case 'color': $(".css-style.color").val(styleRule[1]); scope.previewBox.Color = styleRule[1]; break;
                                    case 'font-style': $(".css-style.font-style").val(styleRule[1]); scope.previewBox.FontStyle = styleRule[1]; break;
                                    case 'font-weight': $(".css-style.font-weight").val(styleRule[1]); scope.previewBox.FontWeight = styleRule[1]; break;
                                    case 'line-height': $(".css-style.line-height").val(styleRule[1]); scope.previewBox.LineHeight = styleRule[1]; break;
                                    case 'letter-spacing': $(".css-style.letter-spacing").val(styleRule[1]); scope.previewBox.LetterSpacing = styleRule[1]; break;
                                    case 'text-align': $(".css-style.text-align").val(styleRule[1]); scope.previewBox.TextAlign = styleRule[1]; break;
                                    case 'text-transform': $(".css-style.text-transform").val(styleRule[1]); scope.previewBox.TextTransform = styleRule[1]; break;
                                    case 'text-shadow': $(".css-style.text-shadow").val(styleRule[1]); scope.previewBox.TextShadow = styleRule[1]; break;
                                    case 'vertical-align': $(".css-style.vertical-align").val(styleRule[1]); break;
                                    case 'white-space': $(".css-style.white-space").val(styleRule[1]); break;
                                    case 'word-spacing': $(".css-style.word-spacing").val(styleRule[1]); break;
                                    case 'word-wrap': $(".css-style.word-wrap").val(styleRule[1]); break;
                                    case 'height': $(".css-style.height").val(styleRule[1]); break;
                                    case 'min-height': $(".css-style.min-height").val(styleRule[1]); break;
                                    case 'max-height': $(".css-style.max-height").val(styleRule[1]); break;
                                    case 'list-style': $(".css-style.list-style").val(styleRule[1]); break;
                                    case 'list-style-position': $(".css-style.list-style-position").val(styleRule[1]); break;
                                    case 'list-style-type': $(".css-style.list-style-type").val(styleRule[1]); break;
                                    case 'margin': $(".css-style.margin").val(styleRule[1]); break;
                                    case 'margin-top': $(".css-style.margin-top").val(styleRule[1]); break;
                                    case 'margin-right': $(".css-style.margin-right").val(styleRule[1]); break;
                                    case 'margin-bottom': $(".css-style.margin-bottom").val(styleRule[1]); break;
                                    case 'margin-left': $(".css-style.margin-left").val(styleRule[1]); break;
                                    case 'opacity': $(".css-style.opacity").val(styleRule[1]); scope.previewBox.Opacity = styleRule[1]; break;
                                    case 'padding': $(".css-style.padding").val(styleRule[1]); break;
                                    case 'padding-top': $(".css-style.padding-top").val(styleRule[1]); break;
                                    case 'padding-right': $(".css-style.padding-right").val(styleRule[1]); break;
                                    case 'padding-bottom': $(".css-style.padding-bottom").val(styleRule[1]); break;
                                    case 'padding-left': $(".css-style.padding-left").val(styleRule[1]); break;
                                    case 'position': $(".css-style.position").val(styleRule[1]); break;
                                    case 'top': $(".css-style.top").val(styleRule[1]); break;
                                    case 'right': $(".css-style.right").val(styleRule[1]); break;
                                    case 'bottom': $(".css-style.bottom").val(styleRule[1]); break;
                                    case 'Left': $(".css-style.Left").val(styleRule[1]); break;
                                    case 'z-index': $(".css-style.z-index").val(styleRule[1]); break;
                                    case 'transition': $(".css-style.transition").val(styleRule[1]); break;
                                    case 'width': $(".css-style.width").val(styleRule[1]); break;
                                    case 'min-width': $(".css-style.min-width").val(styleRule[1]); break;
                                    case 'max-width': $(".css-style.max-width").val(styleRule[1]); break;
                                    default: newStyle = styleRule[0] + ':' + styleRule[1]; otherStyles.push(newStyle); break;
                                }
                            }
                        }
                        scope.otherStyles = otherStyles.join(";");
                    }, 250);
                });
            }
            scope.saveStyles = function() {
                var savedStyles = [];
                for (var i = 0; i < scope.inputStyle.length; i++) {
                    if (scope.inputStyle[i].value !== '') {
                        savedStyle = scope.inputStyle[i].name + ':' + scope.inputStyle[i].value;
                        savedStyles.push(savedStyle);
                    }
                }
                savedStyles.push(scope.otherStyles);
                scope.targetElement.val(savedStyles.join(";"));
                angular.element(scope.targetElement).data('$ngModelController').$setViewValue(scope.targetElement.val());
                scope.closeCssDialog();
            }
            scope.closeCssDialog = function(){
                $('.dfx-ve-css-style-editor').removeClass('active');
                $timeout(function(){
                    angular.element($('.dfx-ve-dialog')).remove();
                    $('.sp-container').remove();
                }, 250);
            }
        }
    }
}]);

dfxViewEditorApp.directive('dfxVePickerColumn', [ '$compile', '$mdDialog', function($compile, $mdDialog) {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        templateUrl: function( el, attrs ) {
            return '/gcontrols/web/picker_column.html';
        },
        link: function(scope, element, attrs) {
            scope.editRendererProperties = function(ev, column_idx) {
                var component = scope.gc_selected;
                $('#dfx_visual_editor_property_panel div:first-child').css( 'display', 'none' );
                var renderer = { "id": (component.id + '_renderer_'  + column_idx), "type": component.attributes.columns.value[column_idx].renderer.name, "attributes": component.attributes.columns.value[column_idx].renderer.attributes, "children":[] };
                scope.gc_instances[component.id + '_renderer_' + column_idx] = renderer;
                scope.gc_selected = scope.gc_instances[component.id + '_renderer_' + column_idx];
                scope.attributes = renderer.attributes;
                scope.children = [];
                scope.renderer = renderer;
                var column_idx_label = parseInt(column_idx)+1;
                $('#dfx-ve-property-title-selected-renderer').css('display','inline-block');
                $('#dfx-ve-property-title-selected-renderer-text').text( component.attributes.columns.value[column_idx].name );
                $('#dfx_visual_editor_property_help').attr('href', 'http://www.interactive-clouds.com');
                var gc_property_panel = $compile('<div id="' + renderer.id + '" dfx-gc-web-base dfx-gc-web-' + renderer.type + ' dfx-gc-edit></div>')(scope);
                $('#dfx_visual_editor_property_panel').append(gc_property_panel);
            };

            scope.overrideAttribute = function(attribute_name) {
                scope.gc_selected.attributes[attribute_name].status = 'overridden';
            };
        }

    }
}]);

dfxViewEditorApp.directive('dfxVeColorPicker', ['$timeout', function($timeout) {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        require: 'ngModel',
        templateUrl: function( $el, $attrs ) {
            return '/gcontrols/web/color_picker.html';
        },
        controller: function($scope, $element, $attrs) {  
            $timeout(function(){
                var element_id = $scope.component_id + '_' + $attrs.name + '_color_picker';
                $element.attr('id', element_id);
                $("#"+element_id).spectrum({ 
                    preferredFormat: "hex",
                    showAlpha: true,
                    showInput: true,
                    allowEmpty: true,
                    clickoutFiresChange: false
                }).show().on('change', function(){
                    angular.element($element).data('$ngModelController').$setViewValue($element.val());
                });            
                $scope.setColor = function() {
                    var inputColor = $("input#"+element_id).val();
                    if (inputColor) {
                        $("#"+element_id).spectrum("set", inputColor);
                    } 
                }
                setTimeout($scope.setColor, 500);
            }, 0);
        }
    }
}]);

dfxViewEditorApp.directive('dfxVePickerImage', (function($mdDialog, $timeout, $compile) {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        templateUrl: function( el, attrs ) {
            return '/gcontrols/web/picker_image.html';
        },
        link: function(scope, element, attrs) {
            if ( !$(element).hasClass('dfx-carousel-image-picker') ) {
                scope.attributes.src.status = "overridden";
            }
            scope.isCreate = false;
            scope.showImages = function(ev) {
                DfxStudio.Resources.getWidgetImageResources(function(res){
                    scope.appImages = [];
                    scope.sharedImages = [];

                    var resAppImages = [],
                        resSharedImages = [];

                    if ((! res) || res.length == 0) return; // no images
                    if (res[0] && res[0].application) resAppImages = res[0].images;
                    if (res[0] && (! res[0].application)) resSharedImages = res[0].images;
                    if (res[1] && res[1].application) resAppImages = res[1].images;
                    if (res[1] && (! res[1].application)) resSharedImages = res[1].images;

                    var appPath = (resAppImages.length > 0) ? resAppImages[0].path.indexOf("/assets/") : 0;
                    var sharedPath = (resSharedImages.length > 0) ? resSharedImages[0].path.indexOf("/_shared/") : 0;

                    for (var i = resAppImages.length-1; i >= 0; i--) {
                        var appImg = resAppImages[i].path.substr(appPath);
                        scope.appImages.push(appImg);
                    }
                    for (var i = resSharedImages.length-1; i >= 0; i--) {
                        var sharedImg = resSharedImages[i].path.substr(sharedPath);
                        scope.sharedImages.push(sharedImg);
                    }
                });
                if ( !$(element).hasClass('dfx-carousel-image-picker') ) {
                    $mdDialog.show({
                        scope: scope.$new(),
                        parent: angular.element(document.body),
                        targetEvent: ev,
                        clickOutsideToClose: true,
                        ariaLabel: 'picker-images',
                        templateUrl: '/gcontrols/web/picker_images_form.html',
                        controller: function(){
                            scope.setImage = function(src) {
                                scope.attributes[attrs.dfxPickerProperty].value = "'"+src+"'";
                                $mdDialog.hide();
                            }
                            scope.closeDialog = function(){
                                $mdDialog.hide();
                            }
                        }
                    });
                } else {
                    $timeout(function(){
                        $('#' + scope.component_id + '_md_dialog .second-dialog-box').load('/gcontrols/web/carousel_images_picker.html');
                        $timeout(function(){
                            $compile($('#' + scope.component_id + '_md_dialog .second-dialog-box').contents())(scope);
                            $('#' + scope.component_id + '_md_dialog .second-dialog').fadeIn(500);
                        }, 250);
                    }, 250);
                }
            };
        }
    }
}));

dfxViewEditorApp.filter('checkExpression', [ function() {
    return function( input ) {
        var regexp = /(^\')(.*)(\'$)/gm,
            filtered = regexp.exec( input );

        if ( input && ( input.indexOf('+') >= 0 ) ) {
            filtered = false;
        }

        return filtered ? input : '{expression}';
    };
}]);

dfxViewEditorApp.directive('dfxVeExpressionEditor', [ '$mdDialog', function($mdDialog) {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        require: '?ngModel',
        templateUrl: function( el, attrs ) {
            return '/gcontrols/web/label_picker.html';
        },
        link: function(scope, element, attrs) {            
            var re = /(\$scope\.)(\w*)/g; 
            var str = $('#dfx_script_editor.CodeMirror')[0].CodeMirror.getValue();
            var m;
            scope.scopeVars = [];
            while ((m = re.exec(str)) !== null) {
                if (m.index === re.lastIndex) {
                    re.lastIndex++;
                }
                if (scope.scopeVars.indexOf(m[2]) == -1) {
                    scope.scopeVars.push(m[2]);
                }
            }
            scope.scopeVars.sort();
            scope.showExpressionEditor = function(ev) {
                $mdDialog.show({
                    scope: scope.$new(),
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: true,
                    ariaLabel: 'label-editor',
                    templateUrl: '/gcontrols/web/label_editor.html',
                    onComplete: function() {
                        scope.targetLabel = ev.target;
                        scope.targetLabelField = $(scope.targetLabel).parent().children('input');
                        scope.targetLabelValue = angular.element(scope.targetLabelField).data('$ngModelController').$viewValue;
                        $("textarea.expression-textarea").val(scope.targetLabelValue);                        
                        if (scope.attributes.label) { scope.attributes.label.status = "overridden"; }
                        if (scope.attributes.display) { scope.attributes.display.status = "overridden"; }
                        if (scope.attributes.disabled) { scope.attributes.disabled.status = "overridden"; }
                    },
                    controller: function() {
                        scope.addVariable = function(ev) {
                            var cursorPos = document.getElementById(scope.component_id+"_expression_textarea").selectionStart,                                
                                areaValue = $("#"+scope.component_id+"_expression_textarea").val(),
                                expressionLength = $("#"+scope.component_id+"_expression_textarea").val().length,
                                varName = ev.target.textContent;
                            $("#"+scope.component_id+"_expression_textarea").val(areaValue.substring(0, cursorPos) + varName + areaValue.substring(cursorPos));
                        }
                        scope.setLabel = function() {
                            var oldExpression = scope.targetLabelField.val();// needed for UNDO functionality
                            scope.$parent.cacheAttributeOldValue(null, null, oldExpression);// needed for UNDO functionality

                            scope.newExpression = $("textarea.expression-textarea").val();
                            scope.targetLabelField.val(scope.newExpression);
                            angular.element(scope.targetLabelField).data('$ngModelController').$setViewValue(scope.newExpression);
                            $(scope.targetLabelField).focus().blur();
                            $mdDialog.hide();
                        }
                        scope.clearLabel = function() {
                            $("textarea.expression-textarea").val('');
                        }
                        scope.closeDialog = function(){
                            $mdDialog.hide();
                        }
                    }
                })
            };            
        }
    }
}]);

dfxViewEditorApp.directive('dfxVeMenuEditor', [ '$mdDialog', '$mdToast', '$http', '$timeout', function($mdDialog, $mdToast, $http, $timeout) {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        templateUrl: function( el, attrs ) {
            return '/gcontrols/web/picker_menu.html';
        },
        link: function(scope, element, attrs) {
            if(attrs.side){
                if(attrs.side==='left'){
                    $(element).attr('side','left');
                    $(element).find('span').attr('side','left');
                    $(element).find('md-icon').attr('side','left');
                } else {
                    $(element).attr('side','right');
                    $(element).find('span').attr('side','right');
                    $(element).find('md-icon').attr('side','right');
                }
            }
            scope.menuItemsType = {"value":"static"};   
            scope.menuItemNames = {"value":""};
            scope.showMenuEditor = function(ev) {
                scope.menu = {};
                if(scope.attributes.layoutType.value === 'none' ){
                    scope.attributes.menuItems.status = "overridden";                    
                }                
                scope.menuEditorTabs = {"activeTab": 0};
                scope.statable = {"value": false}; 
                scope.waitable = {"value": false}; 
                scope.waitableItem = { "value": false};
                scope.isFabToolbar = {"value": false};
                if (scope.attributes.layoutType.value === 'wizard' || scope.attributes.layoutType.value === 'tabs' || scope.attributes.layoutType.value === 'panel'){
                    scope.toolbarSide = $(ev.target).attr('side');
                    if (scope.toolbarSide === 'left'){
                        scope.menuItemsType.value = scope.attributes.toolbar.leftMenu.menuItemsType.value;
                        scope.menuItemNames.value = scope.attributes.toolbar.leftMenu.menuItemNames.value;
                        scope.menuItems = scope.attributes.toolbar.leftMenu.menuItems;    
                        scope.$parent.overrideAttribute('toolbar.leftMenu.menuItems');
                        scope.$parent.overrideAttribute('toolbar.leftMenu.menuItemsType');
                        scope.$parent.overrideAttribute('toolbar.leftMenu.menuItemNames');
                        if (scope.attributes.toolbar.leftMenu.type.value === 'Icon Bar'){
                            scope.statable.value = true;
                            scope.waitable.value = false; 
                            scope.isFabToolbar.value = false;
                        } else if (scope.attributes.toolbar.leftMenu.type.value === 'Buttons') {
                            scope.statable.value = false; 
                            scope.waitable.value = true;
                            scope.isFabToolbar.value = false;
                        } else if (scope.attributes.toolbar.leftMenu.type.value === 'Fab') {
                            scope.statable.value = false; 
                            scope.waitable.value = false; 
                            scope.isFabToolbar.value = true;
                        }                                    
                    } else {
                        scope.menuItemsType.value = scope.attributes.toolbar.rightMenu.menuItemsType.value;
                        scope.menuItemNames.value = scope.attributes.toolbar.rightMenu.menuItemNames.value;
                        scope.menuItems = scope.attributes.toolbar.rightMenu.menuItems;  
                        scope.$parent.overrideAttribute('toolbar.rightMenu.menuItems');
                        scope.$parent.overrideAttribute('toolbar.rightMenu.menuItemsType');
                        scope.$parent.overrideAttribute('toolbar.rightMenu.menuItemNames');
                        if (scope.attributes.toolbar.rightMenu.type.value === 'Icon Bar'){
                            scope.statable.value = true;
                            scope.waitable.value = false; 
                            scope.isFabToolbar.value = false;
                        } else if (scope.attributes.toolbar.rightMenu.type.value === 'Buttons') {
                            scope.statable.value = false; 
                            scope.waitable.value = true;
                            scope.isFabToolbar.value = false;
                        } else if (scope.attributes.toolbar.rightMenu.type.value === 'Fab') {
                            scope.statable.value = false; 
                            scope.waitable.value = false; 
                            scope.isFabToolbar.value = true;
                        }
                    }
                } else {
                    scope.menuItems = scope.attributes.menuItems;
                    scope.gc_selected.type === 'iconbar' ? scope.statable.value = true : scope.statable.value = false;
                    scope.menuItemNames.value = scope.attributes.menuItemNames.value; 
                }
                $mdDialog.show({
                    scope: scope.$new(),
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose:true,
                    ariaLabel: 'menu-editor',
                    templateUrl: '/gcontrols/web/menu_editor.html',
                    onComplete: function() { 
                        $timeout(function(){                            
                            scope.menu = scope.menuItems.value[0];
                            scope.indexMenuItem = '';
                            if ( scope.menu ) {
                                scope.ifShowMenuIconTypes(scope.menu.icon.value);    
                                scope.setMenuItemType();
                                scope.waitableItem.value = scope.menu.hasOwnProperty('waiting') ? true : false;
                            }                            
                            if ( scope.statable.value && scope.menu.state && scope.menu.state.value ) {
                                scope.ifShowMenuIconTypes( scope.menu.state.checkedIcon.value, 'checked' );                      
                                scope.ifShowMenuIconTypes( scope.menu.state.uncheckedIcon.value, 'unchecked' );
                                $timeout(function() {
                                    scope.menuEditorTabs.activeTab = 1;
                                }, 100);                      
                            }
                            if ( scope.waitable.value && scope.menu.waiting && scope.menu.waiting.value ) {
                                scope.ifShowMenuIconTypes( scope.menu.waiting.icon.value, 'waiting' );
                                $timeout(function() {
                                    scope.menuEditorTabs.activeTab = 1;
                                }, 100);
                            }
                        }, 0);
                        $timeout(function() {
                            scope.indexMenuItem = 0;
                            scope.arrayElement = scope.menuItems.value;
                            scope.gcMenuItems = $("md-content.menu-structure").find('li');
                            $("md-content.menu-structure > ul > li:first-child").addClass('active');
                            scope.parentMenuItem = $("md-content.menu-structure").find('li.active');
                        }, 0);
                    },
                    controller: function(){
                        scope.menuEditorItem = {};
                        scope.setMenuItemsType = function( type ){
                            if(scope.toolbarSide === 'left'){
                                scope.attributes.toolbar.leftMenu.menuItemsType.value = type;
                                scope.$parent.overrideAttribute('toolbar.leftMenu.menuItemsType');
                            }else if(scope.toolbarSide === 'right'){
                                scope.attributes.toolbar.rightMenu.menuItemsType.value = type;
                                scope.$parent.overrideAttribute('toolbar.rightMenu.menuItemsType');
                            } else {
                                scope.attributes.menuItemsType.value = type;
                                scope.$parent.overrideAttribute('menuItemsType');
                            }
                        }
                        scope.checkMenuIconTypes = function() {
                            if ( scope.statable.value && scope.menu.state && scope.menu.state.value ) {
                                scope.ifShowMenuIconTypes( scope.menu.state.checkedIcon.value, 'checked' );                      
                                scope.ifShowMenuIconTypes( scope.menu.state.uncheckedIcon.value, 'unchecked' );                      
                            }
                            if ( scope.waitable.value && scope.menu.waiting && scope.menu.waiting.value ) {
                                scope.ifShowMenuIconTypes( scope.menu.waiting.icon.value, 'waiting' );
                            }
                        }
                        scope.selectMenuItem = function(ev, menuItem) {
                            scope.menu = menuItem;
                            scope.selectedMenuItem = ev.target,
                            scope.selfParents = $(scope.selectedMenuItem).parents('li.menu-tree-item'),
                            scope.levelMenuItem = scope.selfParents.length,
                            scope.parentMenuItem = $(scope.selectedMenuItem).parent();
                            scope.indexMenuItem = scope.parentMenuItem.index();
                            scope.indexParentMenuItem = '';
                            scope.gcMenuItems = $("md-content.menu-structure").find('li');
                            scope.arrayElement = '';
                            scope.bridge = '.menuItems.value';
                            scope.indentPath = '';
                            scope.outdentPath = '';
                            scope.gcMenuItems.removeClass('active');
                            scope.parentMenuItem.addClass('active');
                            scope.selfParents.each(function(index, element){
                                if (index === 0) {
                                    scope.arrayElement = scope.bridge;
                                    scope.indexParentMenuItem = $(element).attr('parent-index');
                                    var indendIndex = $(element).attr('self-index') - 1;
                                    scope.indentPath = scope.bridge + '[' + indendIndex + ']' + scope.bridge;
                                    if ($(element).attr('self-index') > 0) {
                                        scope.canIndent = true;
                                    } else {
                                        scope.canIndent = false;
                                    }
                                } else if (index === 1) {
                                    scope.indentPath = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.indentPath;
                                    scope.outdentPath = scope.bridge;
                                    scope.arrayElement = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.arrayElement;

                                } else {
                                    scope.arrayElement = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.arrayElement;
                                    scope.indentPath = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.indentPath;
                                    scope.outdentPath = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.outdentPath;
                                }
                            })
                            scope.arrayElement = eval('scope' + scope.arrayElement);                            
                            scope.outdentPath = eval('scope' + scope.outdentPath);
                            scope.ifShowMenuIconTypes(scope.menu.icon.value);
                            if ( scope.statable.value && scope.menu.state && scope.menu.state.value ) {
                                scope.ifShowMenuIconTypes( scope.menu.state.checkedIcon.value, 'checked' );                      
                                scope.ifShowMenuIconTypes( scope.menu.state.uncheckedIcon.value, 'unchecked' );                      
                                $timeout(function() {
                                    scope.menuEditorTabs.activeTab = 1;
                                }, 100);
                            }
                            // if ( scope.menuEditorTabs.activeTab !== 0 ) { scope.menuEditorTabs.activeTab = 0; }
                            scope.setMenuItemType();
                            scope.waitableItem.value = scope.menu.hasOwnProperty('waiting') ? true : false;
                            if ( scope.waitable.value && scope.menu.waiting && scope.menu.waiting.value ) {
                                scope.ifShowMenuIconTypes( scope.menu.waiting.icon.value, 'waiting' );
                            }
                        }
                        scope.addMenuItem = function() {                          
                            var menuItemTemplate = {
                                "label": "'New item'",
                                "shortcut": "",
                                "divider": false,
                                "icon": { "value": "'home'", "type": "svg-icon" },
                                "notification": "",
                                "display": "true",
                                "disabled": "false",
                                "onclick": "",
                                "menuItems": { "value": [] }
                            }
                            if ( scope.menuItems.value.length > 0 ) {
                                angular.forEach(scope.arrayElement, function(obj, index){
                                    if (index === scope.indexMenuItem) {
                                        scope.arrayElement.splice(index+1, 0, menuItemTemplate);
                                        return;
                                    };
                                });
                                $timeout(function() {
                                    scope.indexMenuItem = scope.indexMenuItem + 1;
                                    scope.menu = scope.arrayElement[scope.indexMenuItem];
                                    var currentItem = $("md-content.menu-structure").find('li.active');
                                    $("md-content.menu-structure").find('li').removeClass('active');                                
                                    currentItem.next().addClass('active');
                                    scope.parentMenuItem = scope.parentMenuItem.next();
                                }, 0);
                            } else {
                                scope.menuItems.value.push(menuItemTemplate);
                                $timeout(function() {
                                    scope.arrayElement = scope.menuItems.value;
                                    scope.indexMenuItem = 0;
                                    scope.parentMenuItem = $("md-content.menu-structure li.menu-tree-item");
                                    $(scope.parentMenuItem).addClass('active');
                                    scope.menu = scope.menuItems.value[0];
                                }, 0);
                            }
                            scope.menuEditorItem.type = 'standard';
                            $timeout(function() {
                                scope.waitableItem.value = scope.menu.hasOwnProperty('waiting') ? true : false;
                            }, 250);
                        }
                        scope.deleteMenuItem = function() {
                            if ( scope.menuItems.value.length > 0 ) {
                                if ( scope.arrayElement.length > 1 ) {
                                    $timeout(function() {
                                        if ( scope.arrayElement.length === scope.indexMenuItem + 1 ) {
                                            scope.parentMenuItem = $("md-content.menu-structure").find('li.active').prev();
                                            scope.arrayElement.splice(scope.indexMenuItem, 1);
                                            scope.indexMenuItem = scope.indexMenuItem - 1;
                                            scope.menu = scope.arrayElement[scope.indexMenuItem];
                                            $("md-content.menu-structure").find('li').removeClass('active');
                                            scope.parentMenuItem.addClass('active');
                                            scope.setMenuItemType();
                                        } else {
                                            scope.arrayElement.splice(scope.indexMenuItem, 1);
                                            scope.menu = scope.arrayElement[scope.indexMenuItem];
                                            scope.setMenuItemType();
                                        }
                                    }, 0);
                                } else {
                                    scope.arrayElement.splice(scope.indexMenuItem, 1);
                                    scope.parents = $(scope.parentMenuItem).parents('li.menu-tree-item');
                                    scope.menuLevel = scope.parents.length;
                                    scope.parentMenuItem = scope.parents.first();
                                    scope.indexMenuItem = scope.parentMenuItem.index();
                                    scope.parentMenuItem.addClass('active');
                                    scope.arrayElement = '';
                                    scope.parents.each(function(index, element){
                                        if ( index === 0 ) {
                                            scope.arrayElement = scope.bridge;
                                        } else {
                                            scope.arrayElement = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.arrayElement;
                                        }
                                    });
                                    scope.arrayElement = eval('scope' + scope.arrayElement);
                                    scope.menu = scope.arrayElement[scope.indexMenuItem];
                                }
                            }
                            $timeout(function() {
                                if (scope.menu) {
                                    scope.waitableItem.value = scope.menu.hasOwnProperty('waiting') ? true : false;
                                }
                            }, 250);
                        } 
                        Array.prototype.move = function(from,to){
                            scope.gcMenuItems.removeClass('active');
                            this.splice(to,0,this.splice(from,1)[0]);
                            return this;
                        };    
                        scope.moveUpMenuItem = function() {
                            if ( scope.indexMenuItem > 0 ) {           
                                $timeout(function() {
                                    scope.arrayElement.move(scope.indexMenuItem - 1,scope.indexMenuItem).join(',');
                                    scope.indexMenuItem = scope.indexMenuItem - 1;
                                    $("md-content.menu-structure").find('li').removeClass('active');                                
                                    scope.parentMenuItem = scope.parentMenuItem.prev();
                                    scope.parentMenuItem.addClass('active');
                                    scope.setMenuItemType();
                                }, 0);
                            }
                        }
                        scope.moveDownMenuItem = function() {
                            if ( scope.indexMenuItem !== scope.arrayElement.length-1 && angular.isNumber(scope.indexMenuItem) === true ) {
                                scope.arrayElement.move(scope.indexMenuItem,scope.indexMenuItem + 1).join(',');
                                scope.indexMenuItem = scope.indexMenuItem + 1;
                                $("md-content.menu-structure").find('li').removeClass('active');                                
                                scope.parentMenuItem = scope.parentMenuItem.next();
                                scope.parentMenuItem.addClass('active');
                                scope.setMenuItemType();
                            }
                        }      
                        scope.indentMenuItem = function() {
                            if ( scope.gc_selected.type !== 'fab' && !scope.isFabToolbar.value ) {
                                if ( scope.parentMenuItem.index() > 0 ) {
                                    scope.arrayElement[scope.parentMenuItem.index()-1].menuItems.value.push(scope.arrayElement[scope.parentMenuItem.index()]);
                                    var toSplice = scope.parentMenuItem.index();
                                    scope.parentMenuItem = $(scope.parentMenuItem).prev();
                                    scope.arrayElement.splice(toSplice, 1);
                                    scope.arrayElement = scope.arrayElement[toSplice-1].menuItems.value;
                                    $timeout(function() {
                                        $("md-content.menu-structure").find('li').removeClass('active');
                                        scope.indexMenuItem = scope.arrayElement.length - 1;
                                        $(scope.parentMenuItem).children('ul').find('li').last().addClass('active');
                                        scope.parentMenuItem = $("md-content.menu-structure").find('li.active');
                                        scope.setMenuItemType();
                                        $timeout(function() {
                                            scope.waitableItem.value = scope.menu.hasOwnProperty('waiting') ? true : false;
                                        }, 250);
                                    }, 0);
                                }
                            } else {
                                $mdToast.show(
                                    $mdToast.simple()
                                        .theme('warn-toast')
                                        .textContent("FAB items can't be indented")
                                        .position('top right')
                                        .hideDelay(3000)
                                );
                            }
                        }
                        scope.outdentMenuItem = function() {
                            if ( scope.gc_selected.type !== 'fab' && !scope.isFabToolbar.value ) {
                                scope.parents = $(scope.parentMenuItem).parents('li.menu-tree-item');
                                if ( scope.parents.length > 0 ) {
                                    scope.outdentElement = scope.arrayElement[scope.indexMenuItem];
                                    scope.arrayElement.splice(scope.indexMenuItem, 1);
                                    scope.arrayElement = '';
                                    scope.bridge = '.menuItems.value';
                                    scope.parents.each(function(index, element){
                                        if ( index === 0 ) {
                                            scope.arrayElement = scope.bridge;
                                            scope.parentMenuItem = $(element);
                                            scope.indexMenuItem = $(scope.parentMenuItem).index() + 1;
                                        } else {
                                            scope.arrayElement = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.arrayElement;
                                        }
                                    });
                                    $("md-content.menu-structure").find('li').removeClass('active');
                                    scope.arrayElement = eval('scope' + scope.arrayElement);
                                    scope.arrayElement.splice(scope.indexMenuItem, 0, scope.outdentElement);
                                    $timeout(function() {
                                        scope.parentMenuItem = $(scope.parentMenuItem).next();
                                        $(scope.parentMenuItem).addClass('active');
                                        scope.setMenuItemType();
                                        $timeout(function() {
                                            scope.waitableItem.value = scope.menu.hasOwnProperty('waiting') ? true : false;
                                        }, 250);
                                    }, 0);
                                }
                            } else {
                                $mdToast.show(
                                    $mdToast.simple()
                                        .theme('warn-toast')
                                        .textContent("FAB items can't be outdented")
                                        .position('top right')
                                        .hideDelay(3000)
                                );
                            }
                        }
                        scope.ifShowMenuIconTypes = function( icon, type ) {
                            var regexp = /(^\')(.*)(\'$)/gm, filtered = regexp.exec( icon );
                            if ( icon && ( icon.indexOf('+') >= 0 ) ) { filtered = false; }
                            if ( icon === '' ) { filtered = true; }
                            if ( icon.indexOf("'") === 0 && icon.indexOf('+') === -1 && icon.charAt(icon.length-1) === "'" && !type ) { 
                                icon.indexOf("'fa-") === 0 ? scope.menu.icon.type = 'fa-icon' : scope.menu.icon.type = 'svg-icon'; 
                            } else if ( icon.indexOf("'") === 0 && icon.indexOf('+') === -1 && icon.charAt(icon.length-1) === "'" && type !== '' ) {
                                switch ( type ) {
                                    case 'checked': icon.indexOf("'fa-") === 0 ? scope.menu.state.checkedIcon.type = 'fa-icon' : scope.menu.state.checkedIcon.type = 'svg-icon'; break;
                                    case 'unchecked': icon.indexOf("'fa-") === 0 ? scope.menu.state.uncheckedIcon.type = 'fa-icon' : scope.menu.state.uncheckedIcon.type = 'svg-icon'; break;
                                    case 'waiting': icon.indexOf("'fa-") === 0 ? scope.menu.waiting.icon.type = 'fa-icon' : scope.menu.waiting.icon.type = 'svg-icon'; break;
                                }
                            }
                            if ( !type ) {
                                scope.showIconTypes = filtered ? false : true;    
                            } else if ( type !== '' ) {
                                switch ( type ) {
                                    case 'checked': scope.showCheckedIconTypes = filtered ? false : true; break;
                                    case 'unchecked': scope.showUncheckedIconTypes = filtered ? false : true; break;
                                    case 'waiting': scope.showWaitingIconTypes = filtered ? false : true; break;
                                }
                            }
                        } 
                        scope.setMenuItemType = function( menuType ) {
                            $timeout(function() {
                                if ( menuType ) {
                                    switch ( menuType ) {
                                        case 'title':       
                                            scope.menu.title = true;  
                                            scope.menu.divider = false; 
                                            if(scope.menu.state){scope.menu.state.value = false;}
                                            break;
                                        case 'divider':     
                                            scope.menu.title = false; 
                                            scope.menu.divider = true;  
                                            if(scope.menu.state){scope.menu.state.value = false;}
                                            break;
                                        case 'selection':   
                                            scope.menu.title = false; 
                                            scope.menu.divider = false; 
                                            if(scope.menu.state){scope.menu.state.value = true;}
                                            scope.menuEditorTabs.activeTab = 1; 
                                            break;
                                        default:            
                                            scope.menu.title = false; 
                                            scope.menu.divider = false; 
                                            if(scope.menu.state){scope.menu.state.value = false;}
                                    }
                                } else {
                                    scope.menuEditorItem = { "type": "" };
                                    if ( scope.menu.title === true ) { scope.menuEditorItem.type = 'title'; }
                                    else if ( scope.menu.divider === true ) { scope.menuEditorItem.type = 'divider'; }
                                    else if ( scope.statable.value && scope.menu.state && scope.menu.state.value === true ) { scope.menuEditorItem.type = 'selection'; scope.menuEditorTabs.activeTab = 1; }
                                    else { scope.menuEditorItem.type = 'standard'; }
                                }
                            }, 0);
                        }
                        scope.closeDialog = function() {
                            $mdDialog.hide();
                        }
                    }
                })
            };
        }
    }
}]);

dfxViewEditorApp.directive('dfxVeMenuIcons', [ '$http', '$timeout', '$compile', '$filter', function($http, $timeout, $compile, $filter) {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        templateUrl: function(el, attrs) {
            return '/gcontrols/web/picker_menu_icon.html';
        },
        controller: function($scope, $element, $attrs) {
            $scope.faIcons = [];
            $http.get('/gcontrols/web/picker_icon.json').then(function(res){
                for ( var i = 0; i < res.data.faClasses.length; i++ ) {
                    var faResIcon = { "value": res.data.faClasses[i], "category": "'fa-icons'", "type": "fa-icon" };
                    $scope.faIcons.push( faResIcon );
                }
            });
            $scope.svgCategories = [];
            $scope.svgIcons = [];
            $http.get('/gcontrols/web/mdicons.json').then(function(res){
                for ( var i = 0; i < res.data.length; i++ ) {
                    $scope.svgCategories.push( res.data[i].type );
                    for ( var j = 0; j < res.data[i].items.length; j++ ) {
                        var svgResIcon = { "value": res.data[i].items[j], "category": "'"+res.data[i].type+"','svg-icons'", "type": "svg-icon" };
                        $scope.svgIcons.push( svgResIcon );
                    }
                }
            });
            $timeout(function(){
                $scope.dfxIconsList = $scope.svgIcons.concat($scope.faIcons);
                $scope.dfxFilteredIconsList = $scope.dfxIconsList;
            }, 250);   
            $scope.targetItem = {};
            $scope.iconsCategory = '';
            $scope.chooseIconsCategory = function( iconCategory, ev ) {
                $scope.dfxIconsList = $filter('filter')($scope.dfxFilteredIconsList, "'"+iconCategory+"'", 'strict');                
                switch ( iconCategory ) {
                    case 'svg-icons': $scope.iconsCategory = '/ ' + 'SVG Icons'; break;
                    case 'fa-icons': $scope.iconsCategory = '/ ' + 'Font Awesome Icons'; break;
                    default: $scope.iconsCategory = '/ ' + iconCategory;
                }
                $(".dfx-ve-icons-categories span").removeClass('active');
                $(ev.target).addClass('active');
            }
            $scope.searchIcons = function( icon ) {
                $scope.dfxIconsList = $filter('filter')($scope.dfxFilteredIconsList, icon, 'strict');
                $scope.iconsCategory = '| ' + icon;
                $(".dfx-ve-icons-categories span").removeClass('active');
            }
            $scope.showMenuIcons = function(ev, menuItem) {
                $scope.targetItem = menuItem;

                var dfxCssStyleDialog = '<div class="dfx-ve-dialog"></div>';
                $('body').append(dfxCssStyleDialog);
                $('.dfx-ve-dialog').load('/gcontrols/web/menu_dialog_icons.html', function(response,status,xhr){
                    $compile($('.dfx-ve-dialog').contents())($scope);
                    $('.sp-container').remove();
                    // $timeout(function() {
                    //     $('.dfx-ve-css-style-editor').addClass('active');
                    // $('#' + $scope.component_id + '_md_dialog .second-dialog-box').load('/gcontrols/web/menu_dialog_icons.html');
                    $timeout(function() {
                        // $compile($('.second-dialog-box').contents())($scope);
                        $('#' + $scope.component_id + '_md_dialog .second-dialog').delay(500).fadeIn(500);
                    }, 0);
                });
            }
            $scope.setDfxIcon = function(icon, type) {
                if ( !$attrs.dfxMenuState ) {
                    $scope.targetItem.icon = { "value": "'" + icon + "'", type: type }
                } else {
                    switch ( $attrs.dfxMenuState ) {
                        case 'checked': 
                            $scope.targetItem.state.checkedIcon.value = "'" + icon + "'";
                            $scope.targetItem.state.checkedIcon.type = type;
                            break;
                        case 'unchecked': 
                            $scope.targetItem.state.uncheckedIcon.value = "'" + icon + "'";
                            $scope.targetItem.state.uncheckedIcon.type = type;
                            break;
                    }
                }
                $timeout(function(){
                    $($scope.targetMenuIcon).focus().blur();
                }, 0);
                $(".second-dialog").fadeOut('250', function() { $(this).remove(); });
            }
            $scope.closeMenuIcon = function() {
                $(".second-dialog").fadeOut('250', function() { $(this).remove(); });
            }
        }
    }
}]);

dfxViewEditorApp.directive('dfxVeMenuExpression', [ '$timeout', '$compile', function($timeout, $compile) {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        templateUrl: function(el, attrs) {
            return '/gcontrols/web/picker_menu_expression.html';
        },
        controller: function($scope, $element, $attrs) {
            $scope.showMenuExpression = function(ev) {
                $('#' + $scope.component_id + '_md_dialog .second-dialog-box').load('/gcontrols/web/menu_dialog_expression.html');
                $timeout(function() {
                    $compile($('.second-dialog-box').contents())($scope);   
                    $scope.targetMenuExprPicker = ev.target;
                    $scope.targetMenuExpression = $($scope.targetMenuExprPicker).parent().children('input');
                    $scope.targetMenuExpValue = angular.element($scope.targetMenuExpression).data('$ngModelController').$viewValue;
                    $("textarea.expression-textarea").val($scope.targetMenuExpValue);                
                    $('#' + $scope.component_id + '_md_dialog .second-dialog').fadeIn(250);                    
                }, 250);
            }
            $scope.addExpression = function(ev) {
                var cursorPos = document.getElementById($scope.component_id+"_expression_textarea").selectionStart,                                
                areaValue = $("#"+$scope.component_id+"_expression_textarea").val(),
                expressionLength = $("#"+$scope.component_id+"_expression_textarea").val().length,
                varName = ev.target.textContent;
                $("#"+$scope.component_id+"_expression_textarea").val(areaValue.substring(0, cursorPos) + varName + areaValue.substring(cursorPos));
            }
            $scope.saveMenuExpression = function() {
                var newMenuExpression = $("textarea.expression-textarea").val();
                $scope.targetMenuExpression.val(newMenuExpression);
                angular.element($scope.targetMenuExpression).data('$ngModelController').$setViewValue(newMenuExpression);
                $($scope.targetMenuExpression).focus().blur();
                $(".second-dialog").fadeOut('250', function() { $(this).remove(); });
            }
            $scope.clearMenuExpression = function() {
                $("textarea.expression-textarea").val('');
            }
            $scope.closeMenuExpression = function() {
                $(".second-dialog").fadeOut('250', function() { $(this).remove(); });
            }
        }
    }
}]);

dfxViewEditorApp.directive('dfxVeTreeEditor', [ '$mdDialog', '$mdToast', '$http', '$timeout', function($mdDialog, $mdToast, $http, $timeout) {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        templateUrl: function( el, attrs ) {
            return '/gcontrols/web/treeview_picker.html';
        },
        link: function(scope, element, attrs) {
            scope.showTreeEditor = function(ev) {
                scope.attributes.static.status = "overridden";
                $mdDialog.show({
                    scope: scope.$new(),
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose:true,
                    ariaLabel: 'tree-view-editor',
                    templateUrl: '/gcontrols/web/treeview_editor.html',
                    onComplete: function() {
                        scope.children = scope.attributes.static.value;
                        scope.tree = scope.children[0];
                        $timeout(function() {
                            scope.indexTreeItem = 0;
                            scope.arrayElement = scope.children;
                            scope.gcTreeItems = $("md-content.tree-structure").find('li');
                            $("md-content.tree-structure > ul > li:first-child").addClass('active');
                            scope.parentTreeItem = $("md-content.tree-structure").find('li.active');
                        }, 0);
                    },
                    controller: function(){
                        scope.selectTreeItem = function(ev, treeItem) {
                            scope.tree = treeItem;
                            scope.selectedTreeItem = ev.target,
                            scope.selfParents = $(scope.selectedTreeItem).parents('li.tree-view-item'),
                            scope.levelTreeItem = scope.selfParents.length,
                            scope.parentTreeItem = $(scope.selectedTreeItem).parent();
                            scope.indexTreeItem = scope.parentTreeItem.index();
                            scope.indexParentTreeItem = '';
                            scope.gcTreeItems = $("md-content.tree-structure").find('li');
                            scope.arrayElement = '';
                            scope.bridge = '.children';
                            scope.indentPath = '';
                            scope.outdentPath = '';
                            scope.gcTreeItems.removeClass('active');
                            scope.parentTreeItem.addClass('active');
                            scope.selfParents.each(function(index, element){
                                if (index === 0) {
                                    scope.arrayElement = scope.bridge;
                                    scope.indexParentTreeItem = $(element).attr('parent-index');
                                    var indendIndex = $(element).attr('self-index') - 1;
                                    scope.indentPath = scope.bridge + '[' + indendIndex + ']' + scope.bridge;
                                    if ($(element).attr('self-index') > 0) {
                                        scope.canIndent = true;
                                    } else {
                                        scope.canIndent = false;
                                    }
                                } else if (index === 1) {
                                    scope.indentPath = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.indentPath;
                                    scope.outdentPath = scope.bridge;
                                    scope.arrayElement = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.arrayElement;

                                } else {
                                    scope.arrayElement = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.arrayElement;
                                    scope.indentPath = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.indentPath;
                                    scope.outdentPath = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.outdentPath;
                                }
                            })
                            scope.arrayElement = eval('scope' + scope.arrayElement);
                            scope.outdentPath = eval('scope' + scope.outdentPath);
                        }
                        scope.addTreeItem = function() {
                            var treeItemTemplate = {
                                "name": "'New item'",
                                "children": []
                            }
                            if ( scope.children.length > 0 ) {
                                angular.forEach(scope.arrayElement, function(obj, index){
                                    if (index === scope.indexTreeItem) {
                                        scope.arrayElement.splice(index+1, 0, treeItemTemplate);
                                        return;
                                    }
                                });
                                $timeout(function() {
                                    scope.indexTreeItem = scope.indexTreeItem + 1;
                                    scope.tree = scope.arrayElement[scope.indexTreeItem];
                                    var currentItem = $("md-content.tree-structure").find('li.active');
                                    $("md-content.tree-structure").find('li').removeClass('active');
                                    currentItem.next().addClass('active');
                                    scope.parentTreeItem = scope.parentTreeItem.next();
                                }, 0);
                            } else {
                                scope.children.push(treeItemTemplate);
                                $timeout(function() {
                                    scope.arrayElement = scope.children;
                                    scope.indexTreeItem = 0;
                                    scope.parentTreeItem = $("md-content.tree-structure li.tree-view-item");
                                    $(scope.parentTreeItem).addClass('active');
                                    scope.tree = scope.children[0];
                                }, 0);
                            }
                        }
                        scope.deleteTreeItem = function() {
                            if ( scope.children.length > 0 ) {
                                if ( scope.arrayElement.length > 1 ) {
                                    $timeout(function() {
                                        if ( scope.arrayElement.length === scope.indexTreeItem + 1 ) {
                                            scope.parentTreeItem = $("md-content.tree-structure").find('li.active').prev();
                                            scope.arrayElement.splice(scope.indexTreeItem, 1);
                                            scope.indexTreeItem = scope.indexTreeItem - 1;
                                            scope.tree = scope.arrayElement[scope.indexTreeItem];
                                            $("md-content.tree-structure").find('li').removeClass('active');
                                            scope.parentTreeItem.addClass('active');
                                        } else {
                                            scope.arrayElement.splice(scope.indexTreeItem, 1);
                                            scope.tree = scope.arrayElement[scope.indexTreeItem];
                                        }
                                    }, 0);
                                } else {
                                    scope.arrayElement.splice(scope.indexTreeItem, 1);
                                    scope.parents = $(scope.parentTreeItem).parents('li.tree-view-item');
                                    scope.treeLevel = scope.parents.length;
                                    scope.parentTreeItem = scope.parents.first();
                                    scope.indexTreeItem = scope.parentTreeItem.index();
                                    scope.parentTreeItem.addClass('active');
                                    scope.arrayElement = '';
                                    scope.parents.each(function(index, element){
                                        if ( index === 0 ) {
                                            scope.arrayElement = scope.bridge;
                                        } else {
                                            scope.arrayElement = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.arrayElement;
                                        }
                                    });
                                    scope.arrayElement = eval('scope' + scope.arrayElement);
                                    scope.tree = scope.arrayElement[scope.indexTreeItem];
                                }
                            }
                        }
                        Array.prototype.move = function(from,to){
                            scope.gcTreeItems.removeClass('active');
                            this.splice(to,0,this.splice(from,1)[0]);
                            return this;
                        }
                        scope.moveUpTreeItem = function() {
                            if ( scope.indexTreeItem > 0 ) {
                                $timeout(function() {
                                    scope.arrayElement.move(scope.indexTreeItem - 1,scope.indexTreeItem).join(',');
                                    scope.indexTreeItem = scope.indexTreeItem - 1;
                                    $("md-content.tree-structure").find('li').removeClass('active');
                                    scope.parentTreeItem = scope.parentTreeItem.prev();
                                    scope.parentTreeItem.addClass('active');
                                }, 0);
                            }
                        }
                        scope.moveDownTreeItem = function() {
                            if ( scope.indexTreeItem !== scope.arrayElement.length-1 && angular.isNumber(scope.indexTreeItem) === true ) {
                                scope.arrayElement.move(scope.indexTreeItem,scope.indexTreeItem + 1).join(',');
                                scope.indexTreeItem = scope.indexTreeItem + 1;
                                $("md-content.tree-structure").find('li').removeClass('active');
                                scope.parentTreeItem = scope.parentTreeItem.next();
                                scope.parentTreeItem.addClass('active');
                            }
                        }
                        scope.indentTreeItem = function() {
                            if ( scope.parentTreeItem.index() > 0 ) {
                                scope.arrayElement[scope.parentTreeItem.index()-1].children.push(scope.arrayElement[scope.parentTreeItem.index()]);
                                var toSplice = scope.parentTreeItem.index();
                                scope.parentTreeItem = $(scope.parentTreeItem).prev();
                                scope.arrayElement.splice(toSplice, 1);
                                scope.arrayElement = scope.arrayElement[toSplice-1].children;
                                $timeout(function() {
                                    $("md-content.tree-structure").find('li').removeClass('active');
                                    scope.indexTreeItem = scope.arrayElement.length - 1;
                                    $(scope.parentTreeItem).children('ul').find('li').last().addClass('active');
                                    scope.parentTreeItem = $("md-content.tree-structure").find('li.active');
                                }, 0);
                            }
                        }
                        scope.outdentTreeItem = function() {
                            scope.parents = $(scope.parentTreeItem).parents('li.tree-view-item');
                            if ( scope.parents.length > 0 ) {
                                scope.outdentElement = scope.arrayElement[scope.indexTreeItem];
                                scope.arrayElement.splice(scope.indexTreeItem, 1);
                                scope.arrayElement = '';
                                scope.bridge = '.children';
                                scope.parents.each(function(index, element){
                                    if ( index === 0 ) {
                                        scope.arrayElement = scope.bridge;
                                        scope.parentTreeItem = $(element);
                                        scope.indexTreeItem = $(scope.parentTreeItem).index() + 1;
                                    } else {
                                        scope.arrayElement = scope.bridge + '[' + $(element).attr('self-index') + ']' + scope.arrayElement;
                                    }
                                });
                                $("md-content.tree-structure").find('li').removeClass('active');
                                scope.arrayElement = eval('scope' + scope.arrayElement);
                                scope.arrayElement.splice(scope.indexTreeItem, 0, scope.outdentElement);
                                $timeout(function() {
                                    scope.parentTreeItem = $(scope.parentTreeItem).next();
                                    $(scope.parentTreeItem).addClass('active');
                                }, 0);
                            }
                        }
                        scope.closeDialog = function() {
                            $mdDialog.hide();
                        }
                    }
                });
            }
        }
    }
}]);

dfxViewEditorApp.directive('dfxGcToolbarDesign', function($sce, $compile, $timeout, $mdMenu, $filter) {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        templateUrl: function( el, attrs) {
            return '/gcontrols/web/toolbar_design.html';
        },
        link: function(scope, element, attrs) {            
            var singleMenuItem ='', toolbarType='', iconbarMenuItem = '<md-menu-item ng-if="{{itemDisplay}}">';
            var rebuildIcons = function( menuItems ) {
                for ( var i = 0; i < menuItems.length; i++ ) {
                    if ( typeof menuItems[i].icon === 'string' ) {
                        var tempIco = menuItems[i].icon;
                        menuItems[i].icon = {
                            "value": tempIco,
                            "type": menuItems[i].hasOwnProperty('iconType') ? menuItems[i].iconType : 'fa-icon'
                        }
                    }
                    if ( menuItems[i].menuItems.value.length > 0 ) {
                        rebuildIcons( menuItems[i].menuItems.value );
                    }
                }
            }

            scope.cleanFabClasses = function( fab ){
                if ( fab.class.indexOf('md-fab') > -1 ) { fab.class = fab.class.replace('md-fab', ""); }
                if ( fab.class.indexOf('md-raised') > -1 ) { fab.class = fab.class.replace('md-raised', ""); }
                if ( fab.class.indexOf('md-primary') > -1 ) { fab.class = fab.class.replace('md-primary', ""); }
                if ( fab.class.indexOf('md-mini') > -1 ) { fab.class = fab.class.replace('md-mini', ""); }
            }
            
            $timeout(function() {
                if(scope.attributes.toolbar.leftMenu.hasOwnProperty('menuItemsType')){
                    scope.attributes.toolbar.rightMenu.menuItemsType = { "value": "static" };
                }   
                if(scope.attributes.toolbar.rightMenu.hasOwnProperty('menuItemsType')){
                    scope.attributes.toolbar.rightMenu.menuItemsType = { "value": "static" };
                }
                rebuildIcons( scope.attributes.toolbar.leftMenu.menuItems.value );
                rebuildIcons( scope.attributes.toolbar.rightMenu.menuItems.value );
                scope.cleanFabClasses(scope.attributes.toolbar.leftMenu.fab.triggerButton);
                scope.cleanFabClasses(scope.attributes.toolbar.leftMenu.fab.actionButton);
                scope.cleanFabClasses(scope.attributes.toolbar.rightMenu.fab.triggerButton);
                scope.cleanFabClasses(scope.attributes.toolbar.rightMenu.fab.actionButton);

                if ( !scope.attributes.toolbar.leftMenu.fab.triggerButton.icon.hasOwnProperty('size') ) { 
                    scope.attributes.toolbar.leftMenu.fab.triggerButton.label = "";
                    scope.attributes.toolbar.leftMenu.fab.triggerButton.style = "";
                    scope.attributes.toolbar.leftMenu.fab.triggerButton.tooltip = { "direction": "top", "style": "", "class": "" };
                    scope.attributes.toolbar.leftMenu.fab.triggerButton.icon = { "size" : 24, "style": "", "class": "", "value": "'fa-bars'", "type" : "fa-icon" }                    
                }
                if ( !scope.attributes.toolbar.rightMenu.fab.triggerButton.icon.hasOwnProperty('size') ) { 
                    scope.attributes.toolbar.rightMenu.fab.triggerButton.label = "";
                    scope.attributes.toolbar.rightMenu.fab.triggerButton.style = "";
                    scope.attributes.toolbar.rightMenu.fab.triggerButton.tooltip = { "direction": "top", "style": "", "class": "" };
                    scope.attributes.toolbar.rightMenu.fab.triggerButton.icon = { "size" : 24, "style": "", "class": "", "value": "'fa-bars'", "type" : "fa-icon" }                    
                }
                if ( !scope.attributes.toolbar.leftMenu.fab.actionButton.icon.hasOwnProperty('size') ) { 
                    scope.attributes.toolbar.leftMenu.fab.actionButton.style = "";
                    scope.attributes.toolbar.leftMenu.fab.actionButton.icon = { "size" : 20, "style": "", "class": "" };
                    scope.attributes.toolbar.leftMenu.fab.actionButton.tooltip = { "direction": "top", "style": "", "class": "" };
                }
                if ( !scope.attributes.toolbar.rightMenu.fab.actionButton.icon.hasOwnProperty('size') ) { 
                    scope.attributes.toolbar.rightMenu.fab.actionButton.style = "";
                    scope.attributes.toolbar.rightMenu.fab.actionButton.icon = { "size" : 20, "style": "", "class": "" };
                    scope.attributes.toolbar.rightMenu.fab.actionButton.tooltip = { "direction": "top", "style": "", "class": "" };
                }
                
                if ( !scope.attributes.toolbar.leftMenu.hasOwnProperty('iconBar') ) {                    
                    scope.attributes.toolbar.leftMenu.iconBar = {
                        "triggerButton": { "style": "", "class": "", "icon": { "size": 24, "style": "", "class": "" } },
                        "actionButton": { "style": "", "class": "", "icon": { "size": 16, "style": "", "class": "" } }                        
                    }
                    scope.attributes.toolbar.leftMenu.buttons = {
                        "triggerButton": { "style": "", "class": "", "icon": { "size": 20, "style": "", "class": "" } },
                        "actionButton": { "style": "", "class": "", "icon": { "size": 16, "style": "", "class": "" } }
                    } 
                    delete scope.attributes.toolbar.leftMenu.buttonStyle;
                    delete scope.attributes.toolbar.leftMenu.iconStyle;
                }
                if ( !scope.attributes.toolbar.rightMenu.hasOwnProperty('iconBar') ) {                    
                    scope.attributes.toolbar.rightMenu.iconBar = {
                        "triggerButton": { "style": "", "class": "", "icon": { "size": 24, "style": "", "class": "" } },
                        "actionButton": { "style": "", "class": "", "icon": { "size": 16, "style": "", "class": "" } }
                    }
                    scope.attributes.toolbar.rightMenu.buttons = {
                        "triggerButton": { "style": "", "class": "", "icon": { "size": 20, "style": "", "class": "" } },
                        "actionButton": { "style": "", "class": "", "icon": { "size": 16, "style": "", "class": "" } }
                    }                    
                    delete scope.attributes.toolbar.rightMenu.buttonStyle;
                    delete scope.attributes.toolbar.rightMenu.iconStyle;
                }
            }, 250);

            var buildNextLevel = function ( nextLevel, road ) {
                for ( var i = 0; i < nextLevel.length; i++ ) {
                    if ( nextLevel[i].menuItems.value.length > 0 ) {
                        var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', true);
                        scope.iconBar = scope.iconBar + iconbarItem + '<md-menu>';                            
                        createDfxMenuItem( nextLevel[i], 'singleMenuItem', road, i );
                        buildNextLevel( nextLevel[i].menuItems.value, road + ',' + i );
                        scope.iconBar = scope.iconBar + '</md-menu-content></md-menu></md-menu-item>';
                    } else {
                        if ( nextLevel[i].divider === true ) {
                            scope.iconBar = scope.iconBar + '<md-menu-divider></md-menu-divider>';
                        } else if ( nextLevel[i].title === true ) {
                            scope.iconBar = scope.iconBar + '<md-menu-item class="tree-menu-title"><div>'+'{{'+nextLevel[i].label+' | checkExpression}}'+'</div></md-menu-item>';
                        } else {
                            var iconbarItem = iconbarMenuItem.replace('{{itemDisplay}}', true);
                            scope.iconBar = scope.iconBar + iconbarItem;
                            createDfxMenuItem( nextLevel[i], 'singleMenuItem', road, i );
                        }
                    }
                }
            }

            var createDfxMenuItem = function( dfxMenuItem, type, level, index ) {
                if ( typeof dfxMenuItem.icon === 'string' ) { 
                    var tempIcon = dfxMenuItem.icon;
                    dfxMenuItem.icon = { 
                        "value": tempIcon, 
                        "type":  dfxMenuItem.hasOwnProperty('iconType') ? dfxMenuItem.iconType : 'fa-icon' 
                    }
                }
                var tempPropObject = {};
                tempPropObject.faIcon =                 dfxMenuItem.icon.value.indexOf("'") == -1 ? 'fa-home' : eval(dfxMenuItem.icon.value);
                tempPropObject.svgIcon =                dfxMenuItem.icon.value.indexOf("'") == -1 ? 'home' : eval(dfxMenuItem.icon.value);
                tempPropObject.faItemIndex =            level >= 0 ? level + ',' + index : index;
                tempPropObject.svgItemIndex =           level >= 0 ? level + ',' + index : index;
                tempPropObject.itemDisabled =           dfxMenuItem.disabled;
                tempPropObject.itemDisplay =            true;
                tempPropObject.itemLabel =              $filter('checkExpression')(dfxMenuItem.label);
                tempPropObject.itemClick =              dfxMenuItem.menuItems.value.length > 0 ? '$mdOpenMenu();'+dfxMenuItem.onclick : 'unfocusButton($event);'+dfxMenuItem.onclick;
                if ( type === 'singleMenuItem' ) {
                    tempPropObject.itemShortcut =       dfxMenuItem.shortcut;
                    tempPropObject.ifItemNotification = dfxMenuItem.notification.length > 0 ? true : false;
                    tempPropObject.itemNotification =   dfxMenuItem.notification;
                }    
                if ( toolbarType==='iconBar' ) {
                    if ( dfxMenuItem.hasOwnProperty('waiting')) { delete dfxMenuItem.waiting; }                    
                    if ( !dfxMenuItem.hasOwnProperty('state') ) {
                        dfxMenuItem.state = {
                            "value":           false,
                            "binding":         "true",
                            "checkedIcon":   { "value": "'thumb_up'", "type": "svg-icon", "style": "", "class": "" },
                            "uncheckedIcon": { "value": "'thumb_down'", "type": "svg-icon", "style": "", "class": "" }
                        };
                    } 
                    tempPropObject.ifFaIcon =               dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'fa-icon' && !dfxMenuItem.state.value ? true : false;
                    tempPropObject.ifSvgIcon =              dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'svg-icon' && !dfxMenuItem.state.value ? true : false;
                    tempPropObject.ifStateFaIcon =          dfxMenuItem.state.checkedIcon.value.length > 0 && dfxMenuItem.state.checkedIcon.type === 'fa-icon' && dfxMenuItem.state.value ? true : false;
                    tempPropObject.ifStateSvgIcon =         dfxMenuItem.state.checkedIcon.value.length > 0 && dfxMenuItem.state.checkedIcon.type === 'svg-icon' && dfxMenuItem.state.value ? true : false;
                    tempPropObject.stateFaIcon =            dfxMenuItem.state.checkedIcon.value.indexOf("'") == -1 ? 'fa-thumbs-up' : eval(dfxMenuItem.state.checkedIcon.value);
                    tempPropObject.stateSvgIcon =           dfxMenuItem.state.checkedIcon.value.indexOf("'") == -1 ? 'thumb_up' : eval(dfxMenuItem.state.checkedIcon.value);
                    tempPropObject.stateFaIconStyle =       dfxMenuItem.state.checkedIcon.style;
                    tempPropObject.stateSvgIconStyle =      dfxMenuItem.state.checkedIcon.style;
                    tempPropObject.stateFaIconClass =       dfxMenuItem.state.checkedIcon.class;
                    tempPropObject.stateSvgIconClass =      dfxMenuItem.state.checkedIcon.class;
                } else if (  toolbarType==='buttons' ) {
                    scope.waitableItem = { "value": false };
                    if ( dfxMenuItem.hasOwnProperty('state')) { delete dfxMenuItem.state; }
                    if ( typeof level === 'undefined' ) { 
                        scope.waitableItem.value = true;
                        if ( !dfxMenuItem.hasOwnProperty('waiting') ) {
                            dfxMenuItem.waiting = {
                                "value": "", "autoDisabled": false, 
                                "icon": { "value": "'fa-spinner'", "type": "fa-icon", "style": "", "class": "fa-pulse" }
                            }
                        }
                    } else {
                        scope.waitableItem.value = false;
                        if ( dfxMenuItem.hasOwnProperty('waiting')) { delete dfxMenuItem.waiting; }
                    }
                    if ( type === 'singleMenuItem' ) {
                        tempPropObject.ifFaIcon =              dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'fa-icon' ? true : false;
                        tempPropObject.ifSvgIcon =             dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'svg-icon' ? true : false;
                    } else {
                        tempPropObject.ifFaIcon =              dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'fa-icon' && dfxMenuItem.waiting.value !=='true' ? true : false;
                        tempPropObject.ifSvgIcon =             dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'svg-icon' && dfxMenuItem.waiting.value !=='true' ? true : false;                        
                        tempPropObject.ifWaitFaIcon =          dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'fa-icon' && dfxMenuItem.waiting.value ==='true' ? true : false;
                        tempPropObject.ifWaitSvgIcon =         dfxMenuItem.icon.value.length > 0 && dfxMenuItem.icon.type === 'svg-icon' && dfxMenuItem.waiting.value ==='true' ? true : false;
                        tempPropObject.waitFaIcon =            dfxMenuItem.waiting.icon.value.indexOf("'") == -1 ? 'fa-spinner' : eval(dfxMenuItem.waiting.icon.value);
                        tempPropObject.waitSvgIcon =           dfxMenuItem.waiting.icon.value.indexOf("'") == -1 ? 'track_changes' : eval(dfxMenuItem.waiting.icon.value);
                        tempPropObject.waitFaIconStyle =       dfxMenuItem.waiting.icon.style;
                        tempPropObject.waitSvgIconStyle =      dfxMenuItem.waiting.icon.style;
                        tempPropObject.waitFaIconClass =       dfxMenuItem.waiting.icon.class;
                        tempPropObject.waitSvgIconClass =      dfxMenuItem.waiting.icon.class;
                    } 
                }
                var tempMenu = '';
                if ( type === 'singleMenuItem' ) {
                    tempMenu = singleMenuItem
                        .replace('{{ifFaIcon}}',           tempPropObject.ifFaIcon )
                        .replace('{{ifSvgIcon}}',          tempPropObject.ifSvgIcon )
                        .replace('{{ifStateFaIcon}}',      tempPropObject.ifStateFaIcon )
                        .replace('{{ifStateSvgIcon}}',     tempPropObject.ifStateSvgIcon )
                        .replace('{{faIcon}}',             tempPropObject.faIcon )
                        .replace('{{svgIcon}}',            tempPropObject.svgIcon )
                        .replace('{{stateFaIcon}}',        tempPropObject.stateFaIcon )
                        .replace('{{stateSvgIcon}}',       tempPropObject.stateSvgIcon )
                        .replace('{{stateFaIconStyle}}',   tempPropObject.stateFaIconStyle )
                        .replace('{{stateSvgIconStyle}}',  tempPropObject.stateSvgIconStyle )
                        .replace('{{stateFaIconClass}}',   tempPropObject.stateFaIconClass )
                        .replace('{{stateSvgIconClass}}',  tempPropObject.stateSvgIconClass )
                        .replace('{{itemLabel}}',          tempPropObject.itemLabel )
                        .replace('{{itemShortcut}}',       tempPropObject.itemShortcut )
                        .replace('{{ifItemNotification}}', tempPropObject.ifItemNotification )
                        .replace('{{itemNotification}}',   tempPropObject.itemNotification )
                        .replace('{{itemIndex}}',          tempPropObject.itemIndex )
                        .replace('{{itemDisplay}}',        tempPropObject.itemDisplay )
                        .replace('{{itemDisabled}}',       tempPropObject.itemDisabled )
                        .replace('{{itemClick}}',          tempPropObject.itemClick );
                } else {
                    tempMenu = scope.rootMenuItem
                        .replace('{{ifFaIcon}}',           tempPropObject.ifFaIcon )
                        .replace('{{ifSvgIcon}}',          tempPropObject.ifSvgIcon )
                        .replace('{{ifStateFaIcon}}',      tempPropObject.ifStateFaIcon )
                        .replace('{{ifStateSvgIcon}}',     tempPropObject.ifStateSvgIcon )
                        .replace('{{ifWaitFaIcon}}',       tempPropObject.ifWaitFaIcon )
                        .replace('{{ifWaitSvgIcon}}',      tempPropObject.ifWaitSvgIcon )
                        .replace('{{faIcon}}',             tempPropObject.faIcon )
                        .replace('{{svgIcon}}',            tempPropObject.svgIcon )
                        .replace('{{stateFaIcon}}',        tempPropObject.stateFaIcon )
                        .replace('{{stateSvgIcon}}',       tempPropObject.stateSvgIcon )
                        .replace('{{stateFaIconStyle}}',   tempPropObject.stateFaIconStyle )
                        .replace('{{stateSvgIconStyle}}',  tempPropObject.stateSvgIconStyle )
                        .replace('{{stateFaIconClass}}',   tempPropObject.stateFaIconClass )
                        .replace('{{stateSvgIconClass}}',  tempPropObject.stateSvgIconClass )
                        .replace('{{waitFaIcon}}',         tempPropObject.waitFaIcon )
                        .replace('{{waitSvgIcon}}',        tempPropObject.waitSvgIcon )
                        .replace('{{waitFaIconStyle}}',    tempPropObject.waitFaIconStyle )
                        .replace('{{waitSvgIconStyle}}',   tempPropObject.waitSvgIconStyle )
                        .replace('{{waitFaIconClass}}',    tempPropObject.waitFaIconClass )
                        .replace('{{waitSvgIconClass}}',   tempPropObject.waitSvgIconClass )
                        .replace('{{itemLabel}}',          tempPropObject.itemLabel )
                        .replace('{{itemIndex}}',          tempPropObject.itemIndex )
                        .replace('{{itemDisplay}}',        tempPropObject.itemDisplay )
                        .replace('{{itemDisabled}}',       tempPropObject.itemDisabled )
                        .replace('{{itemClick}}',          tempPropObject.itemClick );
                }
                if ( dfxMenuItem.menuItems.value.length > 0 ) {
                    scope.iconBar = scope.iconBar + tempMenu +'<md-menu-content width="4">';
                } else {
                    if ( type === 'singleMenuItem' ) {
                        scope.iconBar = scope.iconBar + tempMenu + '</md-menu-item>';
                    } else {
                        scope.iconBar = scope.iconBar + tempMenu + '<md-menu-content width="4"></md-menu-content>';
                    }
                } 
            }

            scope.unfocusButton = function( event ){
                var target = $(event.target);
                if ( target.is( "button" ) ) {
                    target.blur();
                } else {
                    $(target.parent()[0]).blur();
                }
            }

            scope.iconbarBuilder = function( side ) {
                $timeout(function() {
                    if ( side === 'left' ) {                        
                        if ( scope.attributes.toolbar.leftMenu.type.value === 'Icon Bar' ) {
                            toolbarType='iconBar';
                            scope.leftRootMenuItem = '<button ng-click="{{itemClick}}" ng-show="{{itemDisplay}}" menu-index="{{itemIndex}}" ng-disabled="{{itemDisabled}}" style="{{attributes.toolbar.leftMenu.iconBar.triggerButton.style}}" aria-label="md-icon-button" class="md-icon-button {{attributes.toolbar.leftMenu.iconBar.triggerButton.class}}">'+
                            '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.class}}" style="font-size:{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.size}}px; {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.style}}"></md-icon>'+
                            '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.class}}" style="{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.style}}"></ng-md-icon>'+
                            '<md-icon ng-if="{{ifStateFaIcon}}" class="fa {{stateFaIcon}} dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.class}} {{stateFaIconClass}}" style="font-size:{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.size}}px; {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.style}} {{stateFaIconStyle}}"></md-icon>'+
                            '<ng-md-icon ng-if="{{ifStateSvgIcon}}" icon="{{stateSvgIcon}}" size="{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-left-menu-iconbar {{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.class}} {{stateSvgIconClass}}" style="{{attributes.toolbar.leftMenu.iconBar.triggerButton.icon.style}} {{stateSvgIconStyle}}"></ng-md-icon>'+
                            '</button>';
                            singleMenuItem ='<md-button ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" menu-index="{{itemIndex}}" ng-click="{{itemClick}}" '+
                            'class="dfx-menu-button {{attributes.toolbar.leftMenu.iconBar.actionButton.class}}" style="{{attributes.toolbar.leftMenu.iconBar.actionButton.style}}" aria-label="iconbar-button" >'+
                            '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-menu-button-icon {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.class}}" style="font-size:{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.size}}px; {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.style}}"></md-icon>'+
                            '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.class}}" style="{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.style}}"></ng-md-icon>'+
                            '<i><md-icon ng-if="{{ifStateFaIcon}}" class="fa {{stateFaIcon}} dfx-menu-button-icon {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.class}} {{stateFaIconClass}}" style="font-size:{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.size}}px; {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.style}} {{stateFaIconStyle}}"></md-icon>'+
                            '<ng-md-icon ng-if="{{ifStateSvgIcon}}" icon="{{stateSvgIcon}}" size="{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.leftMenu.iconBar.actionButton.icon.class}} {{stateFaIconClass}}" style="{{attributes.toolbar.leftMenu.iconBar.actionButton.icon.style}} {{stateSvgIconStyle}}"></ng-md-icon></i>'+
                            '<span>{{itemLabel}}</span>'+
                            '<span class="md-alt-text">{{itemShortcut}}</span>'+
                            '<small ng-if="{{ifItemNotification}}">{{itemNotification}}</small>'+
                            '</md-button>';

                        } else if ( scope.attributes.toolbar.leftMenu.type.value === 'Buttons' ) {
                            toolbarType='buttons';
                            scope.leftRootMenuItem = '<button aria-label="left_buttons" ng-click="{{itemClick}}" style="width: 100%; {{attributes.toolbar.leftMenu.buttons.triggerButton.style}}"' +
                            'class="dfx-core-gc-toolbar-left-buttons md-button md-raised md-altTheme-theme glyph {{attributes.toolbar.leftMenu.buttons.triggerButton.class}}">'+
                            '<div ng-if="{{ifFaIcon}}">'+
                                '<md-icon class="fa {{faIcon}} dfx-core-gc-toolbar-left-menu-icon {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.class}}" style="font-size: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; width: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.style}}"></md-icon>'+
                            '</div>'+
                            '<div ng-if="{{ifSvgIcon}}">'+
                                '<ng-md-icon icon="{{svgIcon}}" size="{{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-left-menu-icon {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.class}}" style="width: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px;{{attributes.toolbar.leftMenu.buttons.triggerButton.icon.style}}"></ng-md-icon>'+
                            '</div>'+
                            '<div ng-if="{{ifWaitFaIcon}}">'+
                                '<md-icon class="fa {{waitFaIcon}} dfx-core-gc-toolbar-left-menu-icon {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.class}} {{waitFaIconClass}}" style="font-size: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; width: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px;{{attributes.toolbar.leftMenu.buttons.triggerButton.icon.style}}; {{waitFaIconStyle}}"></md-icon>'+
                            '</div>'+
                            '<div ng-if="{{ifWaitSvgIcon}}">'+
                                '<ng-md-icon icon="{{waitSvgIcon}}" size="{{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-left-menu-icon {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.class}} {{waitSvgIconClass}}" style="width: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.leftMenu.buttons.triggerButton.icon.size}}px;{{attributes.toolbar.leftMenu.buttons.triggerButton.icon.style}}; {{waitSvgIconStyle}}"></ng-md-icon>'+
                            '</div>'+
                            '<span style="line-height: 20px;">{{itemLabel}}</span>'+
                            '</button>';
                            singleMenuItem ='<md-button ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" menu-index="{{itemIndex}}" ng-click="{{itemClick}}" '+
                            'class="dfx-menu-button {{attributes.toolbar.leftMenu.buttons.actionButton.class}}" style="{{attributes.toolbar.leftMenu.buttons.actionButton.style}}" aria-label="buttons-button" >'+
                            '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-menu-button-icon {{attributes.toolbar.leftMenu.buttons.actionButton.icon.class}}" style="font-size:{{attributes.toolbar.leftMenu.buttons.actionButton.icon.size}}px; {{attributes.toolbar.leftMenu.buttons.actionButton.icon.style}}"></md-icon>'+
                            '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.leftMenu.buttons.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.leftMenu.buttons.actionButton.icon.class}}" style="{{attributes.toolbar.leftMenu.buttons.actionButton.icon.style}}"></ng-md-icon>'+                            
                            '<span>{{itemLabel}}</span>'+
                            '<span class="md-alt-text">{{itemShortcut}}</span>'+
                            '<small ng-if="{{ifItemNotification}}">{{itemNotification}}</small>'+
                            '</md-button>';
                        }
                        scope.iconbarArray = scope.attributes.toolbar.leftMenu.menuItems.value;
                        scope.rootMenuItem = scope.leftRootMenuItem;
                        if ( scope.attributes.toolbar.leftMenu.type.value === 'Buttons' ) {
                            scope.iconBar = '<md-menu-bar style="padding: 0">';
                        } else {
                            scope.iconBar = '<md-menu-bar>';
                        }
                    } else if ( side === 'right' ) {                        
                        if ( scope.attributes.toolbar.rightMenu.type.value === 'Icon Bar' ) {
                            toolbarType='iconBar';
                            scope.rightRootMenuItem = '<button ng-click="{{itemClick}}" ng-show="{{itemDisplay}}" menu-index="{{itemIndex}}" ng-disabled="{{itemDisabled}}" style="{{attributes.toolbar.rightMenu.iconBar.triggerButton.style}}" aria-label="md-icon-button" class="md-icon-button {{attributes.toolbar.rightMenu.iconBar.triggerButton.class}}">'+
                            '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-core-gc-toolbar-right-menu-iconbar {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.class}}" style="font-size:{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.size}}px; {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.style}}"></md-icon>'+
                            '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-right-menu-iconbar {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.class}}" style="{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.style}}"></ng-md-icon>'+
                            '<md-icon ng-if="{{ifStateFaIcon}}" class="fa {{stateFaIcon}} dfx-core-gc-toolbar-right-menu-iconbar {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.class}} {{stateFaIconClass}}" style="font-size:{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.size}}px; {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.style}} {{stateFaIconStyle}}"></md-icon>'+
                            '<ng-md-icon ng-if="{{ifStateSvgIcon}}" icon="{{stateSvgIcon}}" size="{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-right-menu-iconbar {{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.class}} {{stateSvgIconClass}}" style="{{attributes.toolbar.rightMenu.iconBar.triggerButton.icon.style}} {{stateSvgIconStyle}}"></ng-md-icon>'+
                            '</button>';
                            singleMenuItem ='<md-button ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" menu-index="{{itemIndex}}" ng-click="{{itemClick}}" '+
                            'class="dfx-menu-button {{attributes.toolbar.rightMenu.iconBar.actionButton.class}}" style="{{attributes.toolbar.rightMenu.iconBar.actionButton.style}}" aria-label="iconbar-button" >'+
                            '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-menu-button-icon {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.class}}" style="font-size:{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.size}}px; {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.style}}"></md-icon>'+
                            '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.class}}" style="{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.style}}"></ng-md-icon>'+
                            '<i><md-icon ng-if="{{ifStateFaIcon}}" class="fa {{stateFaIcon}} dfx-menu-button-icon {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.class}} {{stateFaIconClass}}" style="font-size:{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.size}}px; {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.style}} {{stateFaIconStyle}}"></md-icon>'+
                            '<ng-md-icon ng-if="{{ifStateSvgIcon}}" icon="{{stateSvgIcon}}" size="{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.rightMenu.iconBar.actionButton.icon.class}} {{stateFaIconClass}}" style="{{attributes.toolbar.rightMenu.iconBar.actionButton.icon.style}} {{stateSvgIconStyle}}"></ng-md-icon></i>'+
                            '<span>{{itemLabel}}</span>'+
                            '<span class="md-alt-text">{{itemShortcut}}</span>'+
                            '<small ng-if="{{ifItemNotification}}">{{itemNotification}}</small>'+
                            '</md-button>';
                        } else if ( scope.attributes.toolbar.rightMenu.type.value === 'Buttons' ) {
                            toolbarType='buttons';
                            scope.rightRootMenuItem = '<button aria-label="right_buttons" ng-click="{{itemClick}}" style="width: 100%; {{attributes.toolbar.rightMenu.buttons.triggerButton.style}}" ' +
                            'class="dfx-core-gc-toolbar-right-buttons md-button md-raised md-altTheme-theme glyph {{attributes.toolbar.rightMenu.buttons.triggerButton.class}}">'+
                            '<div ng-if="{{ifFaIcon}}">'+
                                '<md-icon class="fa {{faIcon}} dfx-core-gc-toolbar-right-menu-icon {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.class}}" style="font-size: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; width: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.style}}"></md-icon>'+
                            '</div>'+
                            '<div ng-if="{{ifSvgIcon}}">'+
                                '<ng-md-icon icon="{{svgIcon}}" size="{{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-right-menu-icon {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.class}}" style="width: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px;{{attributes.toolbar.rightMenu.buttons.triggerButton.icon.style}}"></ng-md-icon>'+
                            '</div>'+
                            '<div ng-if="{{ifWaitFaIcon}}">'+
                                '<md-icon class="fa {{waitFaIcon}} dfx-core-gc-toolbar-right-menu-icon {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.class}} {{waitFaIconClass}}" style="font-size: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; width: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px;{{attributes.toolbar.rightMenu.buttons.triggerButton.icon.style}}; {{waitFaIconStyle}}"></md-icon>'+
                            '</div>'+
                            '<div ng-if="{{ifWaitSvgIcon}}">'+
                                '<ng-md-icon icon="{{waitSvgIcon}}" size="{{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}" class="dfx-core-gc-toolbar-right-menu-icon {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.class}} {{waitSvgIconClass}}" style="width: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px; height: {{attributes.toolbar.rightMenu.buttons.triggerButton.icon.size}}px;{{attributes.toolbar.rightMenu.buttons.triggerButton.icon.style}}; {{waitSvgIconStyle}}"></ng-md-icon>'+
                            '</div>'+
                            '<span style="line-height: 20px;">{{itemLabel}}</span></button>';
                            singleMenuItem ='<md-button ng-show="{{itemDisplay}}" ng-disabled="{{itemDisabled}}" menu-index="{{itemIndex}}" ng-click="{{itemClick}}" '+
                            'class="dfx-menu-button {{attributes.toolbar.rightMenu.buttons.actionButton.class}}" style="{{attributes.toolbar.rightMenu.buttons.actionButton.style}}" aria-label="buttons-button" >'+
                            '<md-icon ng-if="{{ifFaIcon}}" class="fa {{faIcon}} dfx-menu-button-icon {{attributes.toolbar.rightMenu.buttons.actionButton.icon.class}}" style="font-size:{{attributes.toolbar.rightMenu.buttons.actionButton.icon.size}}px; {{attributes.toolbar.rightMenu.buttons.actionButton.icon.style}}"></md-icon>'+
                            '<ng-md-icon ng-if="{{ifSvgIcon}}" icon="{{svgIcon}}" size="{{attributes.toolbar.rightMenu.buttons.actionButton.icon.size}}" class="dfx-menu-button-icon {{attributes.toolbar.rightMenu.buttons.actionButton.icon.class}}" style="{{attributes.toolbar.rightMenu.buttons.actionButton.icon.style}}"></ng-md-icon>'+                            
                            '<span>{{itemLabel}}</span>'+
                            '<span class="md-alt-text">{{itemShortcut}}</span>'+
                            '<small ng-if="{{ifItemNotification}}">{{itemNotification}}</small>'+
                            '</md-button>';
                        }
                        scope.iconbarArray = scope.attributes.toolbar.rightMenu.menuItems.value;
                        scope.rootMenuItem = scope.rightRootMenuItem;
                        if ( scope.attributes.toolbar.rightMenu.type.value === 'Buttons' ) {
                            scope.iconBar = '<md-menu-bar style="padding: 0">';
                        } else {
                            scope.iconBar = '<md-menu-bar>';
                        }
                    }

                    for ( var item = 0; item < scope.iconbarArray.length; item++ ) {
                        if ( side === 'left' ) {
                            if ( scope.attributes.toolbar.leftMenu.type.value === 'Buttons' ) {
                                scope.iconBar = scope.iconBar + '<md-menu class="toolbar-button" style="padding: 1px">';
                            } else {
                                scope.iconBar = scope.iconBar + '<md-menu>';
                            }
                        } else {
                            if ( scope.attributes.toolbar.rightMenu.type.value === 'Buttons' ) {
                                scope.iconBar = scope.iconBar + '<md-menu class="toolbar-button" style="padding: 1px">';
                            } else {
                                scope.iconBar = scope.iconBar + '<md-menu>';
                            }
                        }
                        if ( scope.iconbarArray[item].menuItems.value.length > 0 ) {
                            createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item );
                            buildNextLevel( scope.iconbarArray[item].menuItems.value, item);
                            scope.iconBar = scope.iconBar + '</md-menu-content>';
                        } else {
                            createDfxMenuItem( scope.iconbarArray[item], 'rootMenuItem', undefined, item );
                        }
                        scope.iconBar = scope.iconBar + '</md-menu>';
                    };
                    scope.iconBar = scope.iconBar + '</md-menu-bar>';
                    scope.iconBarMenu = scope.iconBar;
                    if ( side==='left' ) {
                        if ( scope.attributes.toolbar.leftMenu.type.value === 'Icon Bar' ) {
                            $('#' + scope.component_id + '_left_menu_bar').html(scope.iconBarMenu);
                            $compile($('#' + scope.component_id + '_left_menu_bar').contents())(scope);
                        } else if ( scope.attributes.toolbar.leftMenu.type.value === 'Buttons' ) {
                            $('#' + scope.component_id + '_left_buttons_menu').html(scope.iconBarMenu);
                            $compile($('#' + scope.component_id + '_left_buttons_menu').contents())(scope);
                        }
                        scope.setButtonsWidth(scope.attributes.toolbar.leftMenu.equalButtonSize.value, 'left');
                    } else if ( side==='right' ) {
                        if ( scope.attributes.toolbar.rightMenu.type.value === 'Icon Bar' ) {
                            $('#' + scope.component_id + '_right_menu_bar').html(scope.iconBarMenu);
                            $compile($('#' + scope.component_id + '_right_menu_bar').contents())(scope);
                        } else if ( scope.attributes.toolbar.rightMenu.type.value === 'Buttons' ) {
                            $('#' + scope.component_id + '_right_buttons_menu').html(scope.iconBarMenu);
                            $compile($('#' + scope.component_id + '_right_buttons_menu').contents())(scope);
                        }
                        scope.setButtonsWidth(scope.attributes.toolbar.rightMenu.equalButtonSize.value, 'right');
                    }
                }, 0);
            };

            /*$timeout(function(){
                scope.attributes.toolbar.rightMenu.initialClick.value = false;
                scope.attributes.toolbar.leftMenu.initialClick.value = false;
            }, 0);*/

            scope.snippetTrustAsHtml = function( snippet ) {
                return $sce.trustAsHtml(snippet);
            };

            scope.$watch( "attributes.toolbar.title.isHtml.value", function( newValue ) {
                if ( newValue ) {
                    $timeout(function(){
                        var html_title = '#' + scope.component_id + '_toolbar_bindingHtml';
                        $compile($(html_title).contents())(scope);
                    }, 0);
                }
            });

            scope.closeOthers = function() {
                $mdMenu.hide(null, { closeAll: true });
            }

            scope.setButtonsWidth = function(isEqual, side){
                $timeout(function(){
                    if(side==='right'){
                        var parentDiv = '#' + scope.component_id + '_toolbar_right_menu';
                    }else{
                        var parentDiv = '#' + scope.component_id + '_toolbar_left_menu';
                    }

                if(isEqual && side==='right'){
                        var counter = 0;
                        for(var i =0; i < scope.attributes.toolbar.rightMenu.menuItems.value.length; i++){
                            if(!scope.attributes.toolbar.rightMenu.menuItems.value[i].divider){
                                counter++;
                            }
                        }
                        var percentValue = Math.floor(100/counter);
                        if(percentValue > 5){
                            $(parentDiv).css('width', '100%');
                            $($(parentDiv).find('md-menu-bar')[0]).children().css('width', (percentValue+'%'));
                        }else{
                            $(parentDiv).css('width', '');
                            $($(parentDiv).find('md-menu-bar')[0]).children().css('width', '');
                        }
                }else if(isEqual && side==='left'){
                    var counter = 0;
                    for(var i =0; i < scope.attributes.toolbar.leftMenu.menuItems.value.length; i++){
                        if(!scope.attributes.toolbar.leftMenu.menuItems.value[i].divider){
                            counter++;
                        }
                    }
                    var percentValue = Math.floor(100/counter);
                    if(percentValue > 5){
                        $(parentDiv).css('width', '100%');
                        $($(parentDiv).find('md-menu-bar')[0]).children().css('width', (percentValue+'%'));
                    }
                    }else{
                        $(parentDiv).css('width', '');
                        $($(parentDiv).find('md-menu-bar')[0]).children().css('width', '');
                }
                }, 0);
            };

            scope.rightFabClick = function(){
                scope.attributes.toolbar.rightMenu.initialClick.value = true;
            };
            scope.leftFabClick = function(){
                scope.attributes.toolbar.leftMenu.initialClick.value = true;
            };
            scope.checkIconType = function( menuList ) {
                for (var i = 0; i < menuList.length; i++) {
                    if ( !menuList[i].hasOwnProperty('iconType') ) { menuList[i].iconType = 'fa-icon'; }
                }
            }   

            scope.ifShowToolbarIconTypes = function( icon, side, type ) { 
                var regexp = /(^\')(.*)(\'$)/gm, filtered = regexp.exec( icon ), iconType = '';
                if ( icon && ( icon.indexOf('+') >= 0 ) ) { filtered = false; }
                if ( icon === '' ) { filtered = true; }
                if ( icon.indexOf("'") === 0 && icon.indexOf('+') === -1 && icon.charAt(icon.length-1) === "'" ) {
                    icon.indexOf("'fa-") === 0 ? iconType = 'fa-icon' : iconType = 'svg-icon';
                }
                if ( side === 'leftSide' ) {                        
                    switch ( type ) {
                        case 'fabTrigger': 
                            if (iconType!=='') { scope.attributes.toolbar.leftMenu.fab.triggerButton.icon.type = iconType; }
                            if ( filtered ) {
                                if (!$("#toolbarLeftFabTrigger").hasClass('ng-hide')){$("#toolbarLeftFabTrigger").addClass('ng-hide');}
                            } else {
                                $("#toolbarLeftFabTrigger").removeClass('ng-hide');
                            }
                            break;
                    }
                } else if ( side === 'rightSide' ){
                    switch ( type ) {
                        case 'fabTrigger': 
                            if (iconType!=='') { scope.attributes.toolbar.rightMenu.fab.triggerButton.icon.type = iconType; }
                            if ( filtered ) {
                                if (!$("#toolbarRightFabTrigger").hasClass('ng-hide')){$("#toolbarRightFabTrigger").addClass('ng-hide');}
                            } else {
                                $("#toolbarRightFabTrigger").removeClass('ng-hide');
                            }
                            break;
                    }
                }
            }

            scope.$watch("attributes.toolbar.rightMenu.type.value", function(newValue){
                if(newValue){
                    $timeout(function(){
                        var parentDiv = '#' + scope.component_id + '_toolbar_right_menu';
                        if(newValue === 'Icon Bar'){
                            $(parentDiv).css('width', '');
                            scope.attributes.toolbar.rightMenu.equalButtonSize.value = false;
                            scope.iconbarBuilder('right');
                        }else if (newValue === 'Fab') {
                            $(parentDiv).css('width', '');
                            scope.attributes.toolbar.rightMenu.equalButtonSize.value = false;                            
                            scope.checkIconType( scope.attributes.toolbar.rightMenu.menuItems.value );                            
                        }else if(newValue === 'Buttons'){
                            scope.iconbarBuilder('right');
                        }
                    },0);
                }

            });

            scope.$watch("attributes.toolbar.leftMenu.type.value", function(newValue){
                if(newValue) {
                    $timeout(function () {
                        var parentDiv = '#' + scope.component_id + '_toolbar_left_menu';
                        if(newValue === 'Icon Bar'){
                            $(parentDiv).css('width', '');
                            scope.attributes.toolbar.leftMenu.equalButtonSize.value = false;
                            scope.iconbarBuilder('left');
                        }else if (newValue === 'Fab') {
                            $(parentDiv).css('width', '');
                            scope.attributes.toolbar.leftMenu.equalButtonSize.value = false;                            
                            scope.checkIconType( scope.attributes.toolbar.leftMenu.menuItems.value );                            
                        }else if(newValue === 'Buttons'){
                            scope.iconbarBuilder('left');
                        }
                    }, 0);
                }
            });

            scope.$watch('attributes.toolbar.leftMenu.fab.triggerButton.icon.value', function(newValue){
                if (newValue) {
                    scope.ifShowToolbarIconTypes( newValue, 'leftSide', 'fabTrigger' );
                }
            }, true);

            scope.$watch('attributes.toolbar.rightMenu.fab.triggerButton.icon.value', function(newValue){
                if (newValue) {
                    scope.ifShowToolbarIconTypes( newValue, 'rightSide', 'fabTrigger' );
                }
            }, true);

            scope.$watch('attributes.toolbar.leftMenu.menuItems.value', function(newVal, oldVal) {
                if(newVal){
                    if (newVal != null && !angular.equals(newVal, oldVal)) {
                        $timeout(function() {
                            if(scope.attributes.toolbar.leftMenu.type.value === 'Icon Bar' || scope.attributes.toolbar.leftMenu.type.value === 'Buttons'){
                                scope.iconbarBuilder('left');
                            }
                        }, 0);
                    }
                }
            }, true);

            scope.$watch('attributes.toolbar.rightMenu.menuItems.value', function(newVal, oldVal) {
                if(newVal){
                    if (newVal != null && !angular.equals(newVal, oldVal)) {
                        $timeout(function() {
                            if(scope.attributes.toolbar.rightMenu.type.value === 'Icon Bar' || scope.attributes.toolbar.rightMenu.type.value === 'Buttons') {
                                scope.iconbarBuilder('right');
                            }
                        }, 0);
                    }
                }
            }, true);

            scope.$watch("attributes.toolbar.leftMenu.equalButtonSize.value", function(newValue){
                if(newValue){
                    scope.setButtonsWidth(newValue, 'left');
                }
            });

            scope.$watch("attributes.toolbar.rightMenu.equalButtonSize.value", function(newValue){
                if(newValue){
                    scope.setButtonsWidth(newValue, 'right');
                }
            });
            scope.$watch("attributes.toolbar.leftMenu.dynamic.value", function(newValue){
                if(newValue){
                    $timeout(function(){
                        if (scope.attributes.toolbar.leftMenu.dynamicPresent==null) {
                            scope.attributes.toolbar.leftMenu.dynamicPresent = { "value": "" };
                            scope.attributes.toolbar.leftMenu.dynamic = { "value": "" };
                        }
                        if(typeof newValue !== "undefined" && newValue !== null && newValue !== ""){
                            scope.attributes.toolbar.leftMenu.dynamicPresent.value = true;
                        }else{
                            scope.attributes.toolbar.leftMenu.dynamicPresent.value = false;
                        }
                    }, 0);
                }

            });
            scope.$watch("attributes.toolbar.rightMenu.dynamic.value", function(newValue){
                if(newValue){
                    $timeout(function(){
                        if (scope.attributes.toolbar.rightMenu.dynamicPresent==null) {
                            scope.attributes.toolbar.rightMenu.dynamicPresent = { "value": "" };
                            scope.attributes.toolbar.rightMenu.dynamic = { "value": "" };
                        }
                        if(typeof newValue !== "undefined" && newValue !== null && newValue !== ""){
                            scope.attributes.toolbar.rightMenu.dynamicPresent.value = true;
                        }else{
                            scope.attributes.toolbar.rightMenu.dynamicPresent.value = false;
                        }
                    }, 0);
                }
            });
        }
    }
});

dfxViewEditorApp.directive('dfxGcToolbarProperty', function($mdDialog) {
    return {
        restrict: 'A',
        templateUrl: function( el, attrs) {
            return '/gcontrols/web/toolbar_props.html';
        },
        link: function(scope, element, attrs) {
            scope.showCodemirror = function(ev) {
                $mdDialog.show({
                    scope: scope.$new(),
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose:true,
                    templateUrl: '/gcontrols/web/html_editor_template.html',
                    onComplete:function(scope){
                        var myTextArea = document.getElementById('dfx_html_editor');
                        var scriptEditor = CodeMirror(function (elt) {
                                myTextArea.parentNode.replaceChild(elt, myTextArea);
                            },
                            {
                                lineNumbers: true,
                                value: (scope.attributes.toolbar.title.content.value !== '') ? scope.attributes.toolbar.title.content.value : $('#dfx_html_editor').text(),
                                mode: {name: "xml", globalVars: true},
                                matchBrackets: true,
                                highlightSelectionMatches: {showToken: /\w/},
                                styleActiveLine: true,
                                viewportMargin : Infinity,
                                extraKeys: {"Alt-F": "findPersistent", "Ctrl-Space": "autocomplete"},
                                lineWrapping: true
                            });
                        scriptEditor.setSize(800, 400);
                        $(scriptEditor.getWrapperElement()).attr("id", "dfx_html_editor");
                    },
                    controller: function(scope){
                        scope.closeDialog = function() {
                            $mdDialog.hide();
                        }
                        scope.saveDialog = function() {
                            var editor = $('#dfx_html_editor.CodeMirror')[0].CodeMirror;
                            scope.attributes.toolbar.title.content.value = editor.getValue();
                            $mdDialog.hide();
                        }
                    }
                })
            };
        }
    }
});

dfxViewEditorApp.directive('dfxVePlatform', function() {
    return {
        restrict: 'A',
        scope: false,
        link: function(scope, element, attrs) {
            if (scope.view_platform == 'mobile') {
                scope.refreshDevice();
            } else {
                element.css('width', '100%');
            }
        }
    }
});


dfxViewEditorApp.directive('dfxViewCompiled', [ '$compile', function($compile) {
    return {
        restrict: 'A',
        controller: function($scope, $element, $attrs) {
            $scope.view_id = $attrs.dfxViewCompiled;
            var widget_definition = JSON.parse(window.localStorage.getItem( 'dfx_' + $attrs.dfxViewCompiled ));
            $scope.addCompiledComponents( widget_definition.definition, { 'id': 'dfx-ve-compiled' }, 'default' );
        }
    }
}]);

var helpDialogScript = function (options) {
    if (!options.varName) options.varName = "test";
    if (options.item == 'apiroute-search') {
        var ve_scope = angular.element(document.getElementById('dfx_src_widget_editor')).scope();
        ve_scope.searchAPIRoute();
    } else {
        var editor_script          = $('#dfx_script_editor.CodeMirror')[0].CodeMirror;
        var widget_name            = DfxVisualBuilder.getWidgetName();
        var widget_controller_name = DfxVisualBuilder.getWidgetControllerName();
        var script                 = '';

        if (options.item == 'module') {
            script = "var " + widget_name + " = angular.module('" + widget_name + "', ['dfxAppServices']);";
        } else if (options.item == 'controller') {
            script = widget_name + ".controller( '" + widget_controller_name + "', [ '$scope', 'dfxApiRoutes', function( $scope, dfxApiRoutes ) {\n"
            + "\t\n"
            + "}]);\n";
        } else if (options.item == 'function') {
            script = "$scope." + options.varName + " = function(arg) {\n"
            + "\t\treturn '';\n"
            + "\t};\n";
        } else if (options.item == 'apiroute-get') {
            script = "$scope." + options.varName + " = [];\n";
            + "dfxApiRoutes.get( $scope, 'bpm/test', {}, function(data) {\n"
            + "\t\t\t// Put your callback code here\n"
            + "}, '', $scope." + options.varName + ");\n";
        } else if (options.item == 'apiroute-post') {
            script = "dfxApiRoutes.post( $scope, 'service/path', {} , {} , function(data) {\n"
            + "\t\t\t$scope.$apply(function(){\n"
            + "\t\t\t\t$scope." + options.varName + " = data;\n"
            + "\t\t\t});\n"
            + "\t\t});\n";
        } else if (options.item == 'barchart') {
            script = "$scope." + options.varName + " = [{\n"
            + "\t\tkey: 'Cumulative Return',\n"
            + "\t\tvalues: [\n"
            + "\t\t\t{\n"
            + "\t\t\t\t'label': 'A',\n"
            + "\t\t\t\t'value': -29.76\n"
            + "\t\t\t},\n"
            + "\t\t\t{\n"
            + "\t\t\t\t'label': 'B',\n"
            + "\t\t\t\t'value': 32.80\n"
            + "\t\t\t},\n"
            + "\t\t\t{\n"
            + "\t\t\t\t'label': 'C',\n"
            + "\t\t\t\t'value': 196.45\n"
            + "\t\t\t},\n"
            + "\t\t\t{\n"
            + "\t\t\t\t'label': 'D',\n"
            + "\t\t\t\t'value': -98.07\n"
            + "\t\t\t},\n"
            + "\t\t\t{\n"
            + "\t\t\t\t'label': 'E',\n"
            + "\t\t\t\t'value': -13.92\n"
            + "\t\t\t}\n"
            + "\t\t]\n"
            + "\t}];\n";
            if (options.optionsVarName) {
                script += "\t$scope." + options.optionsVarName + " = {\n"
                + "\t\tchart: {\n"
                + "\t\t\ttype: 'discreteBarChart',\n"
                + "\t\t\tmargin : {\n"
                + "\t\t\t\ttop: 20,\n"
                + "\t\t\t\tright: 20,\n"
                + "\t\t\t\tbottom: 50,\n"
                + "\t\t\t\tleft: 55\n"
                + "\t\t\t},\n"
                + "\t\t\tx: function(d){return d.label;},\n"
                + "\t\t\ty: function(d){return d.value;},\n"
                + "\t\t\tshowValues:  true,\n"
                + "\t\t\tvalueFormat: function (d) {\n"
                + "\t\t\t\treturn d3.format(',.4f')(d);\n"
                + "\t\t\t},\n"
                + "\t\t\tduration:    500,\n"
                + "\t\t\txAxis:       {\n"
                + "\t\t\t\taxisLabel: 'X Axis'\n"
                + "\t\t\t},\n"
                + "\t\t\tyAxis:       {\n"
                + "\t\t\t\taxisLabel: 'Y Axis',\n"
                + "\t\t\t\taxisLabelDistance: -10\n"
                + "\t\t\t}\n"
                + "\t\t},\n"
                + "\t\ttitle: {\n"
                + "\t\t\ttext: 'Bar Chart',\n"
                + "\t\t\tenable: true\n"
                + "\t\t}\n"
                + "\t};\n";
            }
        } else if (options.item == 'hzbarchart') {
            script = "$scope." + options.varName + " = [\n"
            + "\t\t{\n"
            + "\t\t\tkey: 'Series1',\n"
            + "\t\t\tcolor: '#d62728',\n"
            + "\t\t\tvalues: [\n"
            + "\t\t\t\t{\n"
            + "\t\t\t\t\t'label': 'Group A',\n"
            + "\t\t\t\t\t'value': -1.874\n"
            + "\t\t\t\t},\n"
            + "\t\t\t\t{\n"
            + "\t\t\t\t\t'label': 'Group B',\n"
            + "\t\t\t\t\t'value': -8.096\n"
            + "\t\t\t\t},\n"
            + "\t\t\t\t{\n"
            + "\t\t\t\t\t'label': 'Group C',\n"
            + "\t\t\t\t\t'value': -0.570\n"
            + "\t\t\t\t},\n"
            + "\t\t\t\t{\n"
            + "\t\t\t\t\t'label': 'Group D',\n"
            + "\t\t\t\t\t'value': -2.417\n"
            + "\t\t\t\t},\n"
            + "\t\t\t\t{\n"
            + "\t\t\t\t\t'label': 'Group E',\n"
            + "\t\t\t\t\t'value': -0.720\n"
            + "\t\t\t\t}\n"
            + "\t\t\t]\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\tkey: 'Series2',\n"
            + "\t\t\tcolor: '#1f77b4',\n"
            + "\t\t\tvalues: [\n"
            + "\t\t\t\t{\n"
            + "\t\t\t\t\t'label': 'Group A',\n"
            + "\t\t\t\t\t'value': 25.307\n"
            + "\t\t\t\t},\n"
            + "\t\t\t\t{\n"
            + "\t\t\t\t\t'label': 'Group B',\n"
            + "\t\t\t\t\t'value': 16.756\n"
            + "\t\t\t\t},\n"
            + "\t\t\t\t{\n"
            + "\t\t\t\t\t'label': 'Group C',\n"
            + "\t\t\t\t\t'value': 18.451\n"
            + "\t\t\t\t},\n"
            + "\t\t\t\t{\n"
            + "\t\t\t\t\t'label': 'Group D',\n"
            + "\t\t\t\t\t'value': 8.614\n"
            + "\t\t\t\t},\n"
            + "\t\t\t\t{\n"
            + "\t\t\t\t\t'label': 'Group E',\n"
            + "\t\t\t\t\t'value': 7.808\n"
            + "\t\t\t\t}\n"
            + "\t\t\t]\n"
            + "\t\t}\n"
            + "\t];\n";
            if (options.optionsVarName) {
                script += "\t$scope." + options.optionsVarName + " = {\n"
                + "\t\tchart: {\n"
                + "\t\t\ttype: 'multiBarHorizontalChart',\n"
                + "\t\t\tmargin : {\n"
                + "\t\t\t\ttop: 20,\n"
                + "\t\t\t\tright: 20,\n"
                + "\t\t\t\tbottom: 50,\n"
                + "\t\t\t\tleft: 55\n"
                + "\t\t\t},\n"
                + "\t\t\tx: function(d){return d.label;},\n"
                + "\t\t\ty: function(d){return d.value;},\n"
                + "\t\t\tshowControls: true,\n"
                + "\t\t\tshowValues: true,\n"
                + "\t\t\tduration:    500,\n"
                + "\t\t\txAxis:       {\n"
                + "\t\t\t\tshowMaxMin: false,\n"
                + "\t\t\t\taxisLabel: ''\n"
                + "\t\t\t},\n"
                + "\t\t\tyAxis:       {\n"
                + "\t\t\t\taxisLabel: 'Values',\n"
                + "\t\t\t\ttickFormat: function(d) {\n"
                + "\t\t\t\t\treturn d3.format(',.2f')(d);\n"
                + "\t\t\t\t}\n"
                + "\t\t\t}\n"
                + "\t\t},\n"
                + "\t\ttitle: {\n"
                + "\t\t\ttext: 'Horizontal Bar Chart',\n"
                + "\t\t\tenable: true\n"
                + "\t\t}\n"
                + "\t};\n";
            }
        } else if (options.item == 'piechart') {
            script = "$scope." + options.varName + " = [\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'One',\n"
            + "\t\t\t'y': 5\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'Two',\n"
            + "\t\t\t'y': 2\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'Three',\n"
            + "\t\t\t'y': 9\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'Four',\n"
            + "\t\t\t'y': 7\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'Five',\n"
            + "\t\t\t'y': 4\n"
            + "\t\t}\n"
            + "\t];\n";
            if (options.optionsVarName) {
                script += "\t$scope." + options.optionsVarName + " = {\n"
                + "\t\tchart: {\n"
                + "\t\t\ttype: 'pieChart',\n"
                + "\t\t\tmargin : {\n"
                + "\t\t\t\ttop: 20,\n"
                + "\t\t\t\tright: 20,\n"
                + "\t\t\t\tbottom: 50,\n"
                + "\t\t\t\tleft: 55\n"
                + "\t\t\t},\n"
                + "\t\t\tx: function(d){return d.key;},\n"
                + "\t\t\ty: function(d){return d.y;},\n"
                + "\t\t\tshowValues:  true,\n"
                + "\t\t\tduration: 500,\n"
                + "\t\t\tlabelThreshold: 0.01,\n"
                + "\t\t\tlabelSunbeamLayout: true,\n"
                + "\t\t\tlegend: {\n"
                + "\t\t\t\tmargin: {\n"
                + "\t\t\t\t\ttop: 5,\n"
                + "\t\t\t\t\tright: 35,\n"
                + "\t\t\t\t\tbottom: 5,\n"
                + "\t\t\t\t\tleft: 0\n"
                + "\t\t\t\t}\n"
                + "\t\t\t}\n"
                + "\t\t},\n"
                + "\t\ttitle: {\n"
                + "\t\t\ttext: 'Pie Chart',\n"
                + "\t\t\tenable: true\n"
                + "\t\t}\n"
                + "\t};\n";
            }
        } else if (options.item == 'donutchart') {
            script = "$scope." + options.varName + " = [\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'One',\n"
            + "\t\t\t'y': 5\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'Two',\n"
            + "\t\t\t'y': 2\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'Three',\n"
            + "\t\t\t'y': 9\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'Four',\n"
            + "\t\t\t'y': 7\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'Five',\n"
            + "\t\t\t'y': 4\n"
            + "\t\t}\n"
            + "\t];\n";
            if (options.optionsVarName) {
                script += "\t$scope." + options.optionsVarName + " = {\n"
                + "\t\tchart: {\n"
                + "\t\t\ttype: 'pieChart',\n"
                + "\t\t\tdonut: true,\n"
                + "\t\t\tmargin : {\n"
                + "\t\t\t\ttop: 20,\n"
                + "\t\t\t\tright: 20,\n"
                + "\t\t\t\tbottom: 50,\n"
                + "\t\t\t\tleft: 55\n"
                + "\t\t\t},\n"
                + "\t\t\tx: function(d){return d.key;},\n"
                + "\t\t\ty: function(d){return d.y;},\n"
                + "\t\t\tshowValues: true,\n"
                + "\t\t\tdonutRatio: 0.35,\n"
                + "\t\t\tduration: 500,\n"
                + "\t\t\tlegend: {\n"
                + "\t\t\t\tmargin: {\n"
                + "\t\t\t\t\ttop: 5,\n"
                + "\t\t\t\t\tright: 35,\n"
                + "\t\t\t\t\tbottom: 5,\n"
                + "\t\t\t\t\tleft: 0\n"
                + "\t\t\t\t}\n"
                + "\t\t\t},\n"
                + "\t\t\tpie: {\n"
                + "\t\t\t\tstartAngle: function(d) { return d.startAngle - Math.PI },\n"
                + "\t\t\t\tendAngle: function(d) { return d.endAngle - Math.PI }\n"
                + "\t\t\t}\n"
                + "\t\t},\n"
                + "\t\ttitle: {\n"
                + "\t\t\ttext: 'Donut Chart',\n"
                + "\t\t\tenable: true\n"
                + "\t\t}\n"
                + "\t};\n";
            }
        } else if (options.item == 'linechart') {
            script = "function lineChartDesignData() {\n"
            + "\t\tvar sin = [], sin2 = [], cos = [];\n"
            + "\t\t//Data is represented as an array of {x,y} pairs.\n"
            + "\t\tfor (var i = 0; i < 100; i++) {\n"
            + "\t\t\tsin.push({x: i, y: Math.sin(i / 10)});\n"
            + "\t\t\tsin2.push({x: i, y: i % 10 == 5 ? null : Math.sin(i / 10) * 0.25 + 0.5});\n"
            + "\t\t\tcos.push({x: i, y: .5 * Math.cos(i / 10 + 2) + Math.random() / 10});\n"
            + "\t\t}\n"
            + "\t\t//Line chart data should be sent as an array of series objects.\n"
            + "\t\treturn [\n"
            + "\t\t\t{\n"
            + "\t\t\t\tvalues: sin,      //values - represents the array of {x,y} data points\n"
            + "\t\t\t\tkey:    'Sine Wave', //key  - the name of the series.\n"
            + "\t\t\t\tcolor:  '#ff7f0e'  //color - optional: choose your own line color.\n"
            + "\t\t\t},\n"
            + "\t\t\t{\n"
            + "\t\t\t\tvalues: cos,\n"
            + "\t\t\t\tkey:    'Cosine Wave',\n"
            + "\t\t\t\tcolor:  '#2ca02c'\n"
            + "\t\t\t},\n"
            + "\t\t\t{\n"
            + "\t\t\t\tvalues: sin2,\n"
            + "\t\t\t\tkey:    'Another sine wave',\n"
            + "\t\t\t\tcolor:  '#7777ff',\n"
            + "\t\t\t\tarea:   true      //area - set to true if you want this line to turn into a filled area chart.\n"
            + "\t\t\t}\n"
            + "\t\t];\n"
            + "\t};\n"
            + "\t$scope." + options.varName + " = lineChartDesignData();\n";
            if (options.optionsVarName) {
                script += "\t$scope." + options.optionsVarName + " = {\n"
                + "\t\tchart: {\n"
                + "\t\t\ttype: 'lineChart',\n"
                + "\t\t\tmargin : {\n"
                + "\t\t\t\ttop: 20,\n"
                + "\t\t\t\tright: 20,\n"
                + "\t\t\t\tbottom: 50,\n"
                + "\t\t\t\tleft: 55\n"
                + "\t\t\t},\n"
                + "\t\t\tx: function(d){return d.x;},\n"
                + "\t\t\ty: function(d){return d.y;},\n"
                + "\t\t\tuseInteractiveGuideline: true,\n"
                + "\t\t\txAxis:       {\n"
                + "\t\t\t\taxisLabel: 'Time (ms)'\n"
                + "\t\t\t},\n"
                + "\t\t\tyAxis:       {\n"
                + "\t\t\t\taxisLabel: 'Voltage (v)',\n"
                + "\t\t\t\taxisLabelDistance: -10\n"
                + "\t\t\t}\n"
                + "\t\t},\n"
                + "\t\ttitle: {\n"
                + "\t\t\ttext: 'Line Chart',\n"
                + "\t\t\tenable: true\n"
                + "\t\t}\n"
                + "\t};\n";
            }
        } else if (options.item == 'cmlinechart') {
            script = "$scope." + options.varName + " = [\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'Long',\n"
            + "\t\t\t'values': [ [ 1283227200000, 248.308], [ 1285819200000, 278.148], [ 1288497600000, 292.692], [ 1291093200000, 300.842], [ 1293771600000, 326.172]],\n"
            + "\t\t\t'mean': 250\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'Short',\n"
            + "\t\t\t'values': [ [ 1283227200000, -85.397], [ 1285819200000, -94.738], [ 1288497600000, -98.661], [ 1291093200000, -99.609], [ 1293771600000, -103.570]],\n"
            + "\t\t\t'mean': -60\n"
            + "\t\t}\n"
            + "\t];\n";
            if (options.optionsVarName) {
                script += "\t$scope." + options.optionsVarName + " = {\n"
                + "\t\tchart: {\n"
                + "\t\t\ttype: 'cumulativeLineChart',\n"
                + "\t\t\tmargin : {\n"
                + "\t\t\t\ttop: 20,\n"
                + "\t\t\t\tright: 20,\n"
                + "\t\t\t\tbottom: 50,\n"
                + "\t\t\t\tleft: 55\n"
                + "\t\t\t},\n"
                + "\t\t\tx: function(d){ return d[0]; },\n"
                + "\t\t\ty: function(d){ return d[1]/100; },\n"
                + "\t\t\taverage: function(d) { return d.mean/100; },\n"
                + "\t\t\tcolor: d3.scale.category10().range(),\n"
                + "\t\t\tduration: 300,\n"
                + "\t\t\tuseInteractiveGuideline: true,\n"
                + "\t\t\tclipVoronoi: false,\n"
                + "\t\t\tinteractive: true,\n"
                + "\t\t\trescaleY: true,\n"
                + "\t\t\txAxis:       {\n"
                + "\t\t\t\taxisLabel: 'X Axis',\n"
                + "\t\t\t\taxisLabel: 'X Axis',\n"
                + "\t\t\t\ttickFormat: function(d) {\n"
                + "\t\t\t\t\treturn d3.time.format('%m/%d/%y')(new Date(d))\n"
                + "\t\t\t\t},\n"
                + "\t\t\t\tshowMaxMin: false,\n"
                + "\t\t\t\tstaggerLabels: true\n"
                + "\t\t\t},\n"
                + "\t\t\tyAxis:       {\n"
                + "\t\t\t\ttickFormat: function(d){\n"
                + "\t\t\t\t\treturn d3.format(',.1%')(d);\n"
                + "\t\t\t\t},\n"
                + "\t\t\t\taxisLabelDistance: 20\n"
                + "\t\t\t}\n"
                + "\t\t},\n"
                + "\t\ttitle: {\n"
                + "\t\t\ttext: 'Cumulative Line Chart',\n"
                + "\t\t\tenable: true\n"
                + "\t\t}\n"
                + "\t};\n";
            }
        } else if (options.item == 'areachart') {
            script = "$scope." + options.varName + " = [\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'North America',\n"
            + "\t\t\t'values': [ [ 1320033600000 , 26.672] , [ 1322629200000 , 27.297] , [ 1325307600000 , 20.174] , [ 1327986000000 , 19.631] , [ 1330491600000 , 20.366] , [ 1333166400000 , 19.284] , [ 1335758400000 , 19.157]]\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'Europe',\n"
            + "\t\t\t'values': [ [ 1320033600000 , 35.611] , [ 1322629200000 , 35.320] , [ 1325307600000 , 31.564] , [ 1327986000000 , 32.074] , [ 1330491600000 , 35.053] , [ 1333166400000 , 33.873] , [ 1335758400000 , 32.321]]\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'key': 'Australia',\n"
            + "\t\t\t'values': [ [ 1320033600000 , 5.453] , [ 1322629200000 , 7.672] , [ 1325307600000 , 8.014] , [ 1327986000000 , 0] , [ 1330491600000 , 0] , [ 1333166400000 , 0] , [ 1335758400000 , 0]]\n"
            + "\t\t}\n"
            + "\t];\n";
            if (options.optionsVarName) {
                script += "\t$scope." + options.optionsVarName + " = {\n"
                + "\t\tchart: {\n"
                + "\t\t\ttype: 'stackedAreaChart',\n"
                + "\t\t\tmargin : {\n"
                + "\t\t\t\ttop: 20,\n"
                + "\t\t\t\tright: 20,\n"
                + "\t\t\t\tbottom: 50,\n"
                + "\t\t\t\tleft: 55\n"
                + "\t\t\t},\n"
                + "\t\t\tx: function(d){return d[0];},\n"
                + "\t\t\ty: function(d){return d[1];},\n"
                + "\t\t\tuseVoronoi: false,\n"
                + "\t\t\tclipEdge: true,\n"
                + "\t\t\tduration: 100,\n"
                + "\t\t\tuseInteractiveGuideline: true,\n"
                + "\t\t\txAxis:       {\n"
                + "\t\t\t\tshowMaxMin: false,\n"
                + "\t\t\t\ttickFormat: function(d) {\n"
                + "\t\t\t\t\treturn d3.time.format('%x')(new Date(d))\n"
                + "\t\t\t\t},\n"
                + "\t\t\t\taxisLabel: 'X Axis'\n"
                + "\t\t\t},\n"
                + "\t\t\tyAxis:       {\n"
                + "\t\t\t\ttickFormat: function(d){\n"
                + "\t\t\t\t\treturn d3.format(',.2f')(d);\n"
                + "\t\t\t\t}\n"
                + "\t\t\t}\n"
                + "\t\t},\n"
                + "\t\ttitle: {\n"
                + "\t\t\ttext: 'Stacked Area Chart',\n"
                + "\t\t\tenable: true\n"
                + "\t\t}\n"
                + "\t};\n";
            }
        } else if (options.item == 'dialog_html') {
            script = "$scope." + options.varName + " = function () {\n"
            + "\t\tvar options = {\n"
            + "\t\t\ttitle : \"This is a title\",\n"
            + "\t\t\thtml : \'Lorem ipsum dolor sit amet, consectetuer adipiscing elit.',\n"
            + "\t\t\tflexWidth : \'30\',\n"
            + "\t\t\theight : \'300px\',\n"
            + "\t\t\tbuttons : [{name : \'OK\', action :\'okButtonAction()\'},{name : \'Cancel\', action : \'cancelButtonAction()\'}],\n"
            + "\t\t\tscope : $scope\n"
            + "\t\t}\n"
            + "\t\t$scope.htmlDialogInstance = dfxDialog.showHTML(options);\n"
            + "\t\t$scope.okButtonAction = function() {\n"
            + "\t\t\t\talert(\'OK\');\n"
            + "\t\t}\n"
            + "\t\t$scope.cancelButtonAction = function() {\n"
            + "\t\t\t\t$scope.htmlDialogInstance.hide();\n"
            + "\t\t}\n"
            + "\t\t}\n";
        }
        else if (options.item == 'dialog_wait') {
                script = "$scope." + options.varName + " = function () {\n"
                + "\t\tvar options = {\n"
                + "\t\t\tflexWidth : \'25\',\n"
                + "\t\t\theight : \'110px\',\n"
                + "\t\t\tmessage : \'Proccessing\',\n"
                + "\t\t\ttype : \'progress\'\n"
                + "\t\t}\n"
                + "\t\t$scope.htmlDialogInstance = dfxDialog.showWaitingMessage(options);\n"
                + "\t\t// use $scope.htmlDialogInstance.hide()\n"
                + "\t\t}\n";
        } else if (options.item == 'dialog_view') {
            script = "$scope." + options.varName + " = function () {\n"
            + "\t\tvar options = {\n"
            + "\t\t\t\ttitle : \"This is a title\",\n"
            + "\t\t\t\tflexWidth : \'30\',\n"
            + "\t\t\t\theight : \'300px\',\n"
            + "\t\t\t\tbuttons : [{name : \'OK\', action :\'okButtonAction()\'},{name : \'Cancel\', action : \'cancelButtonAction()\'}],\n"
            + "\t\t\t\tviewName : '" + options.viewName + "',\n"
            + "\t\t\t\tcardName : '" + options.cardName + "',\n"
            + "\t\t\t\tscope : $scope\n"
            + "\t\t}\n"
            + "\t\t$scope.viewDialogInstance = dfxDialog.showView(options);\n"
            + "\t\t$scope.okButtonAction = function() {\n"
            + "\t\t\t\talert(\'OK\');\n"
            + "\t\t}\n"
            + "\t\t$scope.cancelButtonAction = function() {\n"
            + "\t\t\t\t$scope.viewDialogInstance.hide();\n"
            + "\t\t}\n"
            + "\t\t}\n";
        } else if (options.item == 'side_nav_html') {
            script = "$scope." + options.varName + " = function () {\n"
            + "\t\tvar options = {\n"
            + "\t\t\t\thtml : \'Lorem ipsum dolor sit amet, consectetuer adipiscing elit.',\n"
            + "\t\t\t\twidth : \'400px\',\n"
            + "\t\t\t\tposition : \'left\',\n"
            + "\t\t\t\tscope : $scope\n"
            + "\t\t}\n"
            + "\t\t$scope.sideNavHtmlInstance = dfxSidenav.showHTML(options);\n"
            + "\t\t}\n";
        } else if (options.item == 'side_nav_view') {
            script = "$scope." + options.varName + " = function () {\n"
            + "\t\tvar options = {\n"
            + "\t\t\t\twidth : \'400px\',\n"
            + "\t\t\t\tposition : \'left\',\n"
            + "\t\t\t\tviewName : '" + options.viewName + "',\n"
            + "\t\t\t\tcardName : '" + options.cardName + "',\n"
            + "\t\t\t\tscope : $scope\n"
            + "\t\t}\n"
            + "\t\t$scope.sideNavViewInstance = dfxSidenav.showView(options);\n"
            + "\t\t}\n";
        } else if (options.item == 'bottom_sheet_html') {
            script = "$scope." + options.varName + " = function () {\n"
            + "\t\tvar options = {\n"
            + "\t\t\t\thtml : \'Lorem ipsum dolor sit amet, consectetuer adipiscing elit.',\n"
            + "\t\t\t\tscope : $scope\n"
            + "\t\t}\n"
            + "\t\t$scope.bottomSheetHtmlInstance = dfxBottomSheet.showHTML(options);\n"
            + "\t\t}\n";
        } else if (options.item == 'bottom_sheet_view') {
            script = "$scope." + options.varName + " = function () {\n"
            + "\t\tvar options = {\n"
            + "\t\t\t\tviewName : '" + options.viewName + "',\n"
            + "\t\t\t\tcardName : '" + options.cardName + "',\n"
            + "\t\t\t\tscope : $scope\n"
            + "\t\t}\n"
            + "\t\t$scope.bottomSheetViewInstance = dfxBottomSheet.showView(options);\n"
            + "\t\t}\n";
        } else if (options.item == 'show_card') {
            script = "$scope." + options.varName + " = function () {\n"
            + "\t\tvar options = {\n"
            + "\t\t\t\tviewName : '" + options.viewName + "',\n"
            + "\t\t\t\tcardName : '" + options.cardName + "',\n"
            + "\t\t\t\tscope : $scope\n"
            + "\t\t}\n"
            + "\t\tdfxChangeCard.showCard(options);\n"
            + "\t\t}\n";
        } else if (options.item == 'googleMap') {
            script = "$scope." + options.varName + " = [\n"
            + "\t\t{\n"
            + "\t\t\t'description': '<H1>Paris</H1><p>Capital of France</p>',\n"
            + "\t\t\t'icon': '/assets/hotel_0star.png',\n"
            + "\t\t\t'latitude': '48.856614',\n"
            + "\t\t\t'longitude': '2.352222'\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'description': '<H2>London</H2><p>Capital of UK</p>',\n"
            + "\t\t\t'icon': '/assets/hotel_0star.png',\n"
            + "\t\t\t'latitude': '51.507351',\n"
            + "\t\t\t'longitude': '-0.127758'\n"
            + "\t\t},\n"
            + "\t\t{\n"
            + "\t\t\t'description': '<H3>Madrid</H3><p>Capital of Spain</p>',\n"
            + "\t\t\t'icon': '/assets/hotel_0star.png',\n"
            + "\t\t\t'latitude': '40.416775',\n"
            + "\t\t\t'longitude': '-3.703790'\n"
            + "\t\t}\n"
            + "\t];\n";
        }
        editor_script.replaceSelection(script);
        $('#dfx_visual_editor_help_close').click();
    }
};
